
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "chats";

ALTER SCHEMA "chats" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "chats"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
DECLARE
    ts_in_milliseconds bigint;
BEGIN
  SELECT EXTRACT(epoch FROM NOW()) * 1000 INTO ts_in_milliseconds;
  insert into chats.users (id, "createdAt", "updatedAt", "lastSeen")
  values (new.id, ts_in_milliseconds, ts_in_milliseconds, ts_in_milliseconds);
  return new;
end;
$$;

ALTER FUNCTION "chats"."handle_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "chats"."is_auth"() RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
  return auth.uid() IS NOT NULL;
end;
$$;

ALTER FUNCTION "chats"."is_auth"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "chats"."is_chat_member"("room_id" bigint) RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
  members uuid[];
BEGIN
    SELECT "userIds" INTO members
      FROM chats.rooms
      WHERE id = room_id;
  return chats.is_member(members);
end;
$$;

ALTER FUNCTION "chats"."is_chat_member"("room_id" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "chats"."is_member"("members" "uuid"[]) RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
  return auth.uid() = ANY(members);
end;
$$;

ALTER FUNCTION "chats"."is_member"("members" "uuid"[]) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "chats"."is_owner"("user_id" "uuid") RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
  return auth.uid() = user_id;
end;
$$;

ALTER FUNCTION "chats"."is_owner"("user_id" "uuid") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "chats"."update_last_messages"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    ts_in_milliseconds bigint;
BEGIN
    SELECT EXTRACT(epoch FROM NOW()) * 1000 INTO ts_in_milliseconds;
    UPDATE chats.rooms
    SET "updatedAt" = ts_in_milliseconds,
        "lastMessages" = jsonb_build_array(NEW)
        WHERE id = NEW."roomId";
    RETURN NEW;
END;
$$;

ALTER FUNCTION "chats"."update_last_messages"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."set_message_status_to_sent"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    NEW.status := 'sent';
    RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."set_message_status_to_sent"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "chats"."messages" (
    "id" bigint NOT NULL,
    "createdAt" bigint,
    "metadata" "jsonb",
    "duration" bigint,
    "mimeType" "text",
    "name" "text",
    "remoteId" "text",
    "repliedMessage" "jsonb",
    "roomId" bigint NOT NULL,
    "showStatus" boolean,
    "size" bigint,
    "status" "text",
    "type" "text",
    "updatedAt" bigint,
    "uri" "text",
    "waveForm" "jsonb",
    "isLoading" boolean,
    "height" double precision,
    "width" double precision,
    "previewData" "jsonb",
    "authorId" "uuid" NOT NULL,
    "text" "text"
);

ALTER TABLE "chats"."messages" OWNER TO "postgres";

ALTER TABLE "chats"."messages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "chats"."messages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "chats"."rooms" (
    "id" bigint NOT NULL,
    "imageUrl" "text",
    "metadata" "jsonb",
    "name" "text",
    "type" "text",
    "userIds" "uuid"[] NOT NULL,
    "lastMessages" "jsonb",
    "userRoles" "jsonb",
    "createdAt" bigint NOT NULL,
    "updatedAt" bigint NOT NULL
);

ALTER TABLE "chats"."rooms" OWNER TO "postgres";

ALTER TABLE "chats"."rooms" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "chats"."rooms_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "chats"."users" (
    "firstName" "text",
    "imageUrl" "text",
    "lastName" "text",
    "metadata" "jsonb",
    "role" "text",
    "id" "uuid" NOT NULL,
    "createdAt" bigint NOT NULL,
    "updatedAt" bigint NOT NULL,
    "lastSeen" bigint NOT NULL
);

ALTER TABLE "chats"."users" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."album" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "title" character varying(255),
    "user_id" integer,
    "id" integer
);

ALTER TABLE "public"."album" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."album_image" (
    "image_id" integer,
    "album_id" integer
);

ALTER TABLE "public"."album_image" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."album_image_user" (
    "image_id" integer,
    "user_id" integer
);

ALTER TABLE "public"."album_image_user" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."article" (
    "id" integer NOT NULL,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "title_ko" character varying(255),
    "title_en" character varying(255),
    "content" character varying(255),
    "comment_count" integer,
    "gallery_id" integer NOT NULL
);

ALTER TABLE "public"."article" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."article_comment" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "parent_id" integer,
    "likes" integer,
    "content" "text",
    "article_id" integer,
    "user_id" integer,
    "childrencount" integer,
    "id" integer
);

ALTER TABLE "public"."article_comment" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."article_comment_like" (
    "comment_id" integer,
    "user_id" integer
);

ALTER TABLE "public"."article_comment_like" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."article_comment_report" (
    "comment_id" integer,
    "user_id" integer
);

ALTER TABLE "public"."article_comment_report" OWNER TO "postgres";

ALTER TABLE "public"."article" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."article_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."article_image" (
    "id" integer NOT NULL,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "order" integer,
    "title_ko" character varying(255),
    "title_en" character varying(255),
    "image" character varying(255),
    "article_id" integer NOT NULL
);

ALTER TABLE "public"."article_image" OWNER TO "postgres";

ALTER TABLE "public"."article_image" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."article_image_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."article_image_user" (
    "user_id" "uuid" NOT NULL,
    "image_id" integer NOT NULL
);

ALTER TABLE "public"."article_image_user" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."banner" (
    "id" integer,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "title_ko" character varying(255),
    "title_en" character varying(255),
    "subtitle_ko" character varying(255),
    "subtitle_en" character varying(255),
    "thumbnail" character varying(255),
    "start_at" timestamp without time zone,
    "end_at" timestamp without time zone,
    "celeb_id" integer,
    "location" "text"
);

ALTER TABLE "public"."banner" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."celeb" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "name_ko" character varying(255),
    "name_en" character varying(255),
    "thumbnail" character varying(255),
    "id" integer NOT NULL
);

ALTER TABLE "public"."celeb" OWNER TO "postgres";

ALTER TABLE "public"."celeb" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."celeb_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."celeb_user" (
    "celeb_id" integer NOT NULL,
    "user_id" "uuid"
);

ALTER TABLE "public"."celeb_user" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."gallery" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "title_ko" character varying(255),
    "title_en" character varying(255),
    "celeb_id" integer NOT NULL,
    "cover" character varying(255),
    "id" integer NOT NULL
);

ALTER TABLE "public"."gallery" OWNER TO "postgres";

ALTER TABLE "public"."gallery" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."gallery_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."gallery_user" (
    "gallery_id" integer,
    "user_id" integer
);

ALTER TABLE "public"."gallery_user" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."library" (
    "id" integer,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "title" character varying(255),
    "user_id" integer
);

ALTER TABLE "public"."library" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."library_image" (
    "library_id" integer,
    "image_id" integer
);

ALTER TABLE "public"."library_image" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."mystar_group" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "image" character varying(255),
    "name_ko" character varying(255),
    "name_en" character varying(255),
    "id" integer NOT NULL
);

ALTER TABLE "public"."mystar_group" OWNER TO "postgres";

ALTER TABLE "public"."mystar_group" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."mystar_group_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."mystar_member" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "gender" character varying(255),
    "group_id" integer,
    "image" character varying(255),
    "name_ko" character varying(255),
    "name_en" character varying(255),
    "id" integer NOT NULL
);

ALTER TABLE "public"."mystar_member" OWNER TO "postgres";

ALTER TABLE "public"."mystar_member" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."mystar_member_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."point_history" (
    "id" integer,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "users_id" integer,
    "amount" integer,
    "type" "text",
    "buy_info" character varying(255),
    "point_sst_item_id" integer,
    "point_right_id" integer,
    "vote_pick_id" integer
);

ALTER TABLE "public"."point_history" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."point_sst" (
    "id" integer,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "users_id" integer,
    "amount" integer,
    "type" "text",
    "buy_info" character varying(255),
    "point_sst_item_id" integer,
    "point_right_id" integer,
    "vote_pick_id" integer
);

ALTER TABLE "public"."point_sst" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."prame-users" (
    "id" integer,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "nickname" character varying(255),
    "email" character varying(255),
    "email_verified_at" timestamp without time zone,
    "password" character varying(255),
    "point" integer,
    "profile_image" character varying(255),
    "logined_at" timestamp without time zone,
    "country_code" character varying(255)
);

ALTER TABLE "public"."prame-users" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."reward" (
    "id" integer NOT NULL,
    "created_at" timestamp(6) without time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp(6) without time zone DEFAULT "now"() NOT NULL,
    "deleted_at" timestamp(6) without time zone,
    "title_ko" character varying(255),
    "title_en" character varying(255),
    "thumbnail" character varying(255),
    "start_at" timestamp without time zone,
    "end_at" timestamp without time zone
);

ALTER TABLE "public"."reward" OWNER TO "postgres";

ALTER TABLE "public"."reward" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."reward_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user" (
    "id" integer,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "nickname" character varying(255),
    "star_candy" integer,
    "country_code" character varying(255)
);

ALTER TABLE "public"."user" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_agreement" (
    "id" integer,
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "user_id" integer,
    "terms" timestamp without time zone,
    "privacy" timestamp without time zone
);

ALTER TABLE "public"."user_agreement" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_comment_like" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "user_id" integer,
    "comment_id" integer,
    "id" integer
);

ALTER TABLE "public"."user_comment_like" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_comment_report" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "comment_id" integer,
    "user_id" integer,
    "id" integer
);

ALTER TABLE "public"."user_comment_report" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_profiles" (
    "id" "uuid" NOT NULL,
    "full_name" "text",
    "avatar_url" "text",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone,
    "star_candy" integer DEFAULT 0 NOT NULL
);

ALTER TABLE "public"."user_profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."vote" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "vote_title" character varying(255),
    "vote_category" character varying(255),
    "main_image" character varying(255),
    "wait_image" character varying(255),
    "result_image" character varying(255),
    "vote_content" character varying(255),
    "start_at" timestamp without time zone,
    "stop_at" timestamp without time zone,
    "visible_at" timestamp without time zone,
    "id" integer NOT NULL
);

ALTER TABLE "public"."vote" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."vote_comment" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "vote_id" integer,
    "user_id" integer,
    "parent_id" integer,
    "childrencount" integer,
    "likes" integer,
    "content" "text",
    "id" integer
);

ALTER TABLE "public"."vote_comment" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."vote_comment_like" (
    "comment_id" integer,
    "user_id" integer
);

ALTER TABLE "public"."vote_comment_like" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."vote_comment_report" (
    "comment_id" integer,
    "user_id" integer
);

ALTER TABLE "public"."vote_comment_report" OWNER TO "postgres";

ALTER TABLE "public"."vote" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."vote_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."vote_item" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "vote_total" integer,
    "vote_id" integer,
    "member_id" integer,
    "id" integer NOT NULL
);

ALTER TABLE ONLY "public"."vote_item" REPLICA IDENTITY FULL;

ALTER TABLE "public"."vote_item" OWNER TO "postgres";

ALTER TABLE "public"."vote_item" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."vote_item_id_seq"
    START WITH 31
    INCREMENT BY 1
    MINVALUE 31
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."vote_pick" (
    "created_at" timestamp(6) without time zone,
    "updated_at" timestamp(6) without time zone,
    "deleted_at" timestamp(6) without time zone,
    "vote_id" integer,
    "vote_item_id" integer,
    "users_id" integer,
    "point_amount" integer,
    "id" integer
);

ALTER TABLE "public"."vote_pick" OWNER TO "postgres";

ALTER TABLE ONLY "chats"."messages"
    ADD CONSTRAINT "messages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "chats"."rooms"
    ADD CONSTRAINT "rooms_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "chats"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."article"
    ADD CONSTRAINT "article_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."article_image"
    ADD CONSTRAINT "article_image_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."article_image"
    ADD CONSTRAINT "article_image_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."celeb"
    ADD CONSTRAINT "celeb_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."celeb"
    ADD CONSTRAINT "celeb_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."gallery"
    ADD CONSTRAINT "gallery_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."gallery"
    ADD CONSTRAINT "gallery_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."mystar_group"
    ADD CONSTRAINT "mystar_group_pk" UNIQUE ("id");

ALTER TABLE ONLY "public"."mystar_member"
    ADD CONSTRAINT "mystar_member_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."mystar_member"
    ADD CONSTRAINT "mystar_member_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "profiles_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."vote"
    ADD CONSTRAINT "vote_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."vote_item"
    ADD CONSTRAINT "vote_item_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."vote_item"
    ADD CONSTRAINT "vote_item_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."vote"
    ADD CONSTRAINT "vote_pkey" PRIMARY KEY ("id");

CREATE UNIQUE INDEX "vote_item_id_uindex" ON "public"."vote_item" USING "btree" ("id");

CREATE OR REPLACE TRIGGER "update_last_messages_trigger" AFTER INSERT ON "chats"."messages" FOR EACH ROW EXECUTE FUNCTION "chats"."update_last_messages"();

CREATE OR REPLACE TRIGGER "update_status_before_insert" BEFORE INSERT ON "chats"."messages" FOR EACH ROW EXECUTE FUNCTION "public"."set_message_status_to_sent"();

CREATE OR REPLACE TRIGGER "trigger_create_profiles" AFTER INSERT ON "public"."user_profiles" FOR EACH STATEMENT EXECUTE FUNCTION "public"."handle_new_user"();

ALTER TABLE ONLY "chats"."messages"
    ADD CONSTRAINT "messages_authorId_fkey" FOREIGN KEY ("authorId") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "chats"."messages"
    ADD CONSTRAINT "messages_roomId_fkey" FOREIGN KEY ("roomId") REFERENCES "chats"."rooms"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "chats"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."article"
    ADD CONSTRAINT "article_gallery_id_fkey" FOREIGN KEY ("gallery_id") REFERENCES "public"."gallery"("id");

ALTER TABLE ONLY "public"."article_image"
    ADD CONSTRAINT "article_image_article_id_fkey" FOREIGN KEY ("article_id") REFERENCES "public"."article"("id");

ALTER TABLE ONLY "public"."article_image_user"
    ADD CONSTRAINT "article_image_user_image_id_fkey" FOREIGN KEY ("image_id") REFERENCES "public"."article_image"("id");

ALTER TABLE ONLY "public"."article_image_user"
    ADD CONSTRAINT "article_image_user_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."celeb_user"
    ADD CONSTRAINT "celeb_user_celeb_id_fkey" FOREIGN KEY ("celeb_id") REFERENCES "public"."celeb"("id");

ALTER TABLE ONLY "public"."celeb_user"
    ADD CONSTRAINT "celeb_user_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."gallery"
    ADD CONSTRAINT "gallery_celeb_id_fkey" FOREIGN KEY ("celeb_id") REFERENCES "public"."celeb"("id");

ALTER TABLE ONLY "public"."mystar_member"
    ADD CONSTRAINT "mystar_member_mystar_group_id_fk" FOREIGN KEY ("group_id") REFERENCES "public"."mystar_group"("id");

ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."vote_item"
    ADD CONSTRAINT "vote_item_member_id_fkey" FOREIGN KEY ("member_id") REFERENCES "public"."mystar_member"("id");

ALTER TABLE ONLY "public"."vote_item"
    ADD CONSTRAINT "vote_item_vote_id_fkey" FOREIGN KEY ("vote_id") REFERENCES "public"."vote"("id");

CREATE POLICY "chats.messages_grant_create" ON "chats"."messages" FOR INSERT WITH CHECK ("chats"."is_chat_member"("roomId"));

CREATE POLICY "chats.messages_grant_delete" ON "chats"."messages" FOR DELETE USING ("chats"."is_chat_member"("roomId"));

CREATE POLICY "chats.messages_grant_read" ON "chats"."messages" FOR SELECT USING ("chats"."is_chat_member"("roomId"));

CREATE POLICY "chats.messages_grant_update" ON "chats"."messages" FOR UPDATE USING ("chats"."is_chat_member"("roomId")) WITH CHECK ("chats"."is_chat_member"("roomId"));

CREATE POLICY "chats.rooms_grant_create" ON "chats"."rooms" FOR INSERT WITH CHECK ("chats"."is_auth"());

CREATE POLICY "chats.rooms_grant_delete" ON "chats"."rooms" FOR DELETE USING ("chats"."is_member"("userIds"));

CREATE POLICY "chats.rooms_grant_read" ON "chats"."rooms" FOR SELECT USING ("chats"."is_member"("userIds"));

CREATE POLICY "chats.rooms_grant_update" ON "chats"."rooms" FOR UPDATE USING ("chats"."is_member"("userIds")) WITH CHECK ("chats"."is_member"("userIds"));

CREATE POLICY "chats.users_grant_create" ON "chats"."users" FOR INSERT WITH CHECK (false);

CREATE POLICY "chats.users_grant_delete" ON "chats"."users" FOR DELETE USING (false);

CREATE POLICY "chats.users_grant_read" ON "chats"."users" FOR SELECT USING ("chats"."is_auth"());

CREATE POLICY "chats.users_grant_update" ON "chats"."users" FOR UPDATE USING ("chats"."is_auth"()) WITH CHECK ("chats"."is_owner"("id"));

ALTER TABLE "chats"."messages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "chats"."rooms" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "chats"."users" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "policy_user_profiles" ON "public"."user_profiles" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

ALTER TABLE "public"."user_profiles" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "chats"."messages";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "chats"."rooms";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "chats"."users";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_profiles";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."vote_item";

GRANT USAGE ON SCHEMA "chats" TO "anon";
GRANT USAGE ON SCHEMA "chats" TO "authenticated";
GRANT USAGE ON SCHEMA "chats" TO "service_role";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."set_message_status_to_sent"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_message_status_to_sent"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_message_status_to_sent"() TO "service_role";

GRANT ALL ON TABLE "chats"."messages" TO "anon";
GRANT ALL ON TABLE "chats"."messages" TO "authenticated";
GRANT ALL ON TABLE "chats"."messages" TO "service_role";

GRANT ALL ON SEQUENCE "chats"."messages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "chats"."messages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "chats"."messages_id_seq" TO "service_role";

GRANT ALL ON TABLE "chats"."rooms" TO "anon";
GRANT ALL ON TABLE "chats"."rooms" TO "authenticated";
GRANT ALL ON TABLE "chats"."rooms" TO "service_role";

GRANT ALL ON SEQUENCE "chats"."rooms_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "chats"."rooms_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "chats"."rooms_id_seq" TO "service_role";

GRANT ALL ON TABLE "chats"."users" TO "anon";
GRANT ALL ON TABLE "chats"."users" TO "authenticated";
GRANT ALL ON TABLE "chats"."users" TO "service_role";

GRANT ALL ON TABLE "public"."album" TO "anon";
GRANT ALL ON TABLE "public"."album" TO "authenticated";
GRANT ALL ON TABLE "public"."album" TO "service_role";

GRANT ALL ON TABLE "public"."album_image" TO "anon";
GRANT ALL ON TABLE "public"."album_image" TO "authenticated";
GRANT ALL ON TABLE "public"."album_image" TO "service_role";

GRANT ALL ON TABLE "public"."album_image_user" TO "anon";
GRANT ALL ON TABLE "public"."album_image_user" TO "authenticated";
GRANT ALL ON TABLE "public"."album_image_user" TO "service_role";

GRANT ALL ON TABLE "public"."article" TO "anon";
GRANT ALL ON TABLE "public"."article" TO "authenticated";
GRANT ALL ON TABLE "public"."article" TO "service_role";

GRANT ALL ON TABLE "public"."article_comment" TO "anon";
GRANT ALL ON TABLE "public"."article_comment" TO "authenticated";
GRANT ALL ON TABLE "public"."article_comment" TO "service_role";

GRANT ALL ON TABLE "public"."article_comment_like" TO "anon";
GRANT ALL ON TABLE "public"."article_comment_like" TO "authenticated";
GRANT ALL ON TABLE "public"."article_comment_like" TO "service_role";

GRANT ALL ON TABLE "public"."article_comment_report" TO "anon";
GRANT ALL ON TABLE "public"."article_comment_report" TO "authenticated";
GRANT ALL ON TABLE "public"."article_comment_report" TO "service_role";

GRANT ALL ON SEQUENCE "public"."article_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."article_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."article_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."article_image" TO "anon";
GRANT ALL ON TABLE "public"."article_image" TO "authenticated";
GRANT ALL ON TABLE "public"."article_image" TO "service_role";

GRANT ALL ON SEQUENCE "public"."article_image_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."article_image_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."article_image_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."article_image_user" TO "anon";
GRANT ALL ON TABLE "public"."article_image_user" TO "authenticated";
GRANT ALL ON TABLE "public"."article_image_user" TO "service_role";

GRANT ALL ON TABLE "public"."banner" TO "anon";
GRANT ALL ON TABLE "public"."banner" TO "authenticated";
GRANT ALL ON TABLE "public"."banner" TO "service_role";

GRANT ALL ON TABLE "public"."celeb" TO "anon";
GRANT ALL ON TABLE "public"."celeb" TO "authenticated";
GRANT ALL ON TABLE "public"."celeb" TO "service_role";

GRANT ALL ON SEQUENCE "public"."celeb_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."celeb_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."celeb_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."celeb_user" TO "anon";
GRANT ALL ON TABLE "public"."celeb_user" TO "authenticated";
GRANT ALL ON TABLE "public"."celeb_user" TO "service_role";

GRANT ALL ON TABLE "public"."gallery" TO "anon";
GRANT ALL ON TABLE "public"."gallery" TO "authenticated";
GRANT ALL ON TABLE "public"."gallery" TO "service_role";

GRANT ALL ON SEQUENCE "public"."gallery_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."gallery_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."gallery_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."gallery_user" TO "anon";
GRANT ALL ON TABLE "public"."gallery_user" TO "authenticated";
GRANT ALL ON TABLE "public"."gallery_user" TO "service_role";

GRANT ALL ON TABLE "public"."library" TO "anon";
GRANT ALL ON TABLE "public"."library" TO "authenticated";
GRANT ALL ON TABLE "public"."library" TO "service_role";

GRANT ALL ON TABLE "public"."library_image" TO "anon";
GRANT ALL ON TABLE "public"."library_image" TO "authenticated";
GRANT ALL ON TABLE "public"."library_image" TO "service_role";

GRANT ALL ON TABLE "public"."mystar_group" TO "anon";
GRANT ALL ON TABLE "public"."mystar_group" TO "authenticated";
GRANT ALL ON TABLE "public"."mystar_group" TO "service_role";

GRANT ALL ON SEQUENCE "public"."mystar_group_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."mystar_group_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."mystar_group_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."mystar_member" TO "anon";
GRANT ALL ON TABLE "public"."mystar_member" TO "authenticated";
GRANT ALL ON TABLE "public"."mystar_member" TO "service_role";

GRANT ALL ON SEQUENCE "public"."mystar_member_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."mystar_member_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."mystar_member_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."point_history" TO "anon";
GRANT ALL ON TABLE "public"."point_history" TO "authenticated";
GRANT ALL ON TABLE "public"."point_history" TO "service_role";

GRANT ALL ON TABLE "public"."point_sst" TO "anon";
GRANT ALL ON TABLE "public"."point_sst" TO "authenticated";
GRANT ALL ON TABLE "public"."point_sst" TO "service_role";

GRANT ALL ON TABLE "public"."prame-users" TO "anon";
GRANT ALL ON TABLE "public"."prame-users" TO "authenticated";
GRANT ALL ON TABLE "public"."prame-users" TO "service_role";

GRANT ALL ON TABLE "public"."reward" TO "anon";
GRANT ALL ON TABLE "public"."reward" TO "authenticated";
GRANT ALL ON TABLE "public"."reward" TO "service_role";

GRANT ALL ON SEQUENCE "public"."reward_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reward_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reward_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user" TO "anon";
GRANT ALL ON TABLE "public"."user" TO "authenticated";
GRANT ALL ON TABLE "public"."user" TO "service_role";

GRANT ALL ON TABLE "public"."user_agreement" TO "anon";
GRANT ALL ON TABLE "public"."user_agreement" TO "authenticated";
GRANT ALL ON TABLE "public"."user_agreement" TO "service_role";

GRANT ALL ON TABLE "public"."user_comment_like" TO "anon";
GRANT ALL ON TABLE "public"."user_comment_like" TO "authenticated";
GRANT ALL ON TABLE "public"."user_comment_like" TO "service_role";

GRANT ALL ON TABLE "public"."user_comment_report" TO "anon";
GRANT ALL ON TABLE "public"."user_comment_report" TO "authenticated";
GRANT ALL ON TABLE "public"."user_comment_report" TO "service_role";

GRANT ALL ON TABLE "public"."user_profiles" TO "anon";
GRANT ALL ON TABLE "public"."user_profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."user_profiles" TO "service_role";

GRANT ALL ON TABLE "public"."vote" TO "anon";
GRANT ALL ON TABLE "public"."vote" TO "authenticated";
GRANT ALL ON TABLE "public"."vote" TO "service_role";

GRANT ALL ON TABLE "public"."vote_comment" TO "anon";
GRANT ALL ON TABLE "public"."vote_comment" TO "authenticated";
GRANT ALL ON TABLE "public"."vote_comment" TO "service_role";

GRANT ALL ON TABLE "public"."vote_comment_like" TO "anon";
GRANT ALL ON TABLE "public"."vote_comment_like" TO "authenticated";
GRANT ALL ON TABLE "public"."vote_comment_like" TO "service_role";

GRANT ALL ON TABLE "public"."vote_comment_report" TO "anon";
GRANT ALL ON TABLE "public"."vote_comment_report" TO "authenticated";
GRANT ALL ON TABLE "public"."vote_comment_report" TO "service_role";

GRANT ALL ON SEQUENCE "public"."vote_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."vote_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."vote_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."vote_item" TO "anon";
GRANT ALL ON TABLE "public"."vote_item" TO "authenticated";
GRANT ALL ON TABLE "public"."vote_item" TO "service_role";

GRANT ALL ON SEQUENCE "public"."vote_item_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."vote_item_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."vote_item_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."vote_pick" TO "anon";
GRANT ALL ON TABLE "public"."vote_pick" TO "authenticated";
GRANT ALL ON TABLE "public"."vote_pick" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "chats" GRANT ALL ON TABLES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
