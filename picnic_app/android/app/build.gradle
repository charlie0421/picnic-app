plugins {
    id "com.android.application"
    id "kotlin-android"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "dev.flutter.flutter-gradle-plugin"
}

apply plugin: 'com.google.gms.google-services'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "io.iconcasting.picnic.app"
    compileSdk flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        apiVersion = '1.7'
        languageVersion = '1.7'
        freeCompilerArgs += ["-Xskip-metadata-version-check"]
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "io.iconcasting.picnic.app"
        minSdkVersion 23
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders += ['sentryEnableCompose': 'false']

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    signingConfigs {
        release {
            if (System.getenv()["CI"]) {
                // CodeMagic CI 환경에서 환경변수 사용
                def cmKeystorePath = System.getenv()["CM_KEYSTORE_PATH"]
                def cmKeystorePassword = System.getenv()["CM_KEYSTORE_PASSWORD"]
                def cmKeyAlias = System.getenv()["CM_KEY_ALIAS"]
                def cmKeyPassword = System.getenv()["CM_KEY_PASSWORD"]
                
                if (cmKeystorePath && cmKeystorePassword && cmKeyAlias && cmKeyPassword) {
                    storeFile file(cmKeystorePath)
                    storePassword cmKeystorePassword
                    keyAlias cmKeyAlias
                    keyPassword cmKeyPassword
                } else {
                    throw new Exception("CodeMagic keystore environment variables not set properly")
                }
            } else {
                // 로컬 개발 환경에서 key.properties 파일 사용
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildFeatures {
        buildConfig true
    }
    
    buildTypes {
        release {
            // CodeMagic 환경에서는 무조건 release 서명 사용
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            }
        }
    }

    bundle {
        storeArchive {
            enable = true
        }
    }
    
    // Ensure Flutter can find the generated files
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace("app", "app")
                output.outputFileName = fileName
            }
        }
    }
}

flutter {
    source '../..'
}

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://artifact.bytedance.com/repository/pangle" }
    maven { url "https://artifact.bytedance.com/repository/pangle-global" }
    maven { url "https://jitpack.io" }
    google()
    mavenCentral()
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.tapjoy:tapjoy-android-sdk:14.4.0'
    implementation "androidx.concurrent:concurrent-futures:1.1.0"
    implementation files('libs/pincrux_offerwall.aar')
    implementation 'com.pangle.global:ads-sdk:6.5.0.5'
    implementation 'com.pangle.global:crash_monitor:1.3.8-rc.1'
    implementation 'com.pangle.global:gecko_pgl:1.0.0.1'
}