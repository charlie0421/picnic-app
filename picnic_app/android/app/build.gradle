plugins {
    id "com.android.application"
    id "kotlin-android"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "dev.flutter.flutter-gradle-plugin"
}

apply plugin: 'com.google.gms.google-services'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "io.iconcasting.picnic.app"
    compileSdk flutter.compileSdkVersion
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        apiVersion = '1.7'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "io.iconcasting.picnic.app"
        minSdk 23
        targetSdk flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

// AAB 빌드 후 Flutter와 Shorebird가 기대하는 파일들을 생성하는 태스크
tasks.register('copyAABForShorebird') {
    doLast {
        def projectRoot = project.rootDir.parentFile
        def sourceFile = file("$buildDir/outputs/bundle/release/app-release.aab")
        def targetDir = file("${projectRoot}/build/app/outputs/bundle/release")
        def flutterFile = new File(targetDir, "app.aab")
        def shorebirdFile = new File(targetDir, "app-release.aab")
        
        // 타겟 디렉토리 생성
        targetDir.mkdirs()
        
        if (sourceFile.exists()) {
            // Flutter용 app.aab 파일 생성
            flutterFile.bytes = sourceFile.bytes
            println "✅ Created app.aab for Flutter: ${flutterFile.absolutePath}"
            
            // Shorebird용 app-release.aab 파일 생성
            shorebirdFile.bytes = sourceFile.bytes
            println "✅ Created app-release.aab for Shorebird: ${shorebirdFile.absolutePath}"
        } else {
            println "⚠️ Source AAB file not found: ${sourceFile.absolutePath}"
        }
    }
}

// APK 빌드 후 Flutter가 기대하는 위치로 복사하는 태스크
tasks.register('copyAPKForFlutter') {
    doLast {
        def projectRoot = project.rootDir.parentFile
        def debugSourceFile = file("$buildDir/outputs/apk/debug/app-debug.apk")
        def releaseSourceFile = file("$buildDir/outputs/apk/release/app-release.apk")
        def debugTargetDir = file("${projectRoot}/build/app/outputs/flutter-apk")
        def releaseTargetDir = file("${projectRoot}/build/app/outputs/flutter-apk")
        
        // 타겟 디렉토리 생성
        debugTargetDir.mkdirs()
        releaseTargetDir.mkdirs()
        
        // Debug APK 복사
        if (debugSourceFile.exists()) {
            def debugTargetFile = new File(debugTargetDir, "app-debug.apk")
            debugTargetFile.bytes = debugSourceFile.bytes
            println "✅ Created app-debug.apk for Flutter: ${debugTargetFile.absolutePath}"
        }
        
        // Release APK 복사 (있는 경우)
        if (releaseSourceFile.exists()) {
            def releaseTargetFile = new File(releaseTargetDir, "app-release.apk")
            releaseTargetFile.bytes = releaseSourceFile.bytes
            println "✅ Created app-release.apk for Flutter: ${releaseTargetFile.absolutePath}"
        }
    }
}

// Flutter 빌드 완료 후 자동으로 파일명 복사 실행
afterEvaluate {
    tasks.findByName('bundleRelease')?.finalizedBy('copyAABForShorebird')
    tasks.findByName('assembleDebug')?.finalizedBy('copyAPKForFlutter')
    tasks.findByName('assembleRelease')?.finalizedBy('copyAPKForFlutter')
}

flutter {
    source '../..'
}

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://artifact.bytedance.com/repository/pangle" }
    maven { url "https://artifact.bytedance.com/repository/pangle-global" }
    maven { url "https://jitpack.io" }
    google()
    mavenCentral()
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.tapjoy:tapjoy-android-sdk:14.4.0'
    implementation "androidx.concurrent:concurrent-futures:1.1.0"
    implementation files('libs/pincrux_offerwall.aar')
    implementation 'com.pangle.global:ads-sdk:6.5.0.5'
    implementation 'com.pangle.global:crash_monitor:1.3.8-rc.1'
    implementation 'com.pangle.global:gecko_pgl:1.0.0.1'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
}