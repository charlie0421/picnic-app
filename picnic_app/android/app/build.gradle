plugins {
    id "com.android.application"
    id "kotlin-android"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "dev.flutter.flutter-gradle-plugin"
}

apply plugin: 'com.google.gms.google-services'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "io.iconcasting.picnic.app"
    compileSdk flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        apiVersion = '1.7'
        languageVersion = '1.7'
        freeCompilerArgs += ["-Xskip-metadata-version-check"]
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "io.iconcasting.picnic.app"
        minSdkVersion 23
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders += ['sentryEnableCompose': 'false']

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    signingConfigs {
        release {
            if (System.getenv()["CI"]) {
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig System.getenv()["CI"] ? signingConfigs.release : signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            }
        }
    }

    bundle {
        storeArchive {
            enable = true
        }
    }
}

flutter {
    source '../..'
}

// ✅ Flutter가 기대하는 위치로 AAB 복사
task copyAabToFlutterBuild {
    description 'Flutter가 기대하는 위치로 AAB 파일 복사'

    doLast {
        def projectRoot = project.rootProject.projectDir.parentFile
        def flutterBuildDir = new File(projectRoot, 'build/app/outputs/bundle')

        println "프로젝트 루트: ${projectRoot.absolutePath}"
        println "Flutter 빌드 디렉토리: ${flutterBuildDir.absolutePath}"

        def releaseSource = new File(project.buildDir, 'outputs/bundle/release')
        if (releaseSource.exists()) {
            def releaseTarget = new File(flutterBuildDir, 'release')
            releaseTarget.mkdirs()
            releaseSource.listFiles().findAll { it.name.endsWith('.aab') }.each { aabFile ->
                def targetFile = new File(releaseTarget, aabFile.name)
                targetFile.bytes = aabFile.bytes
                println "✓ Release 복사 완료: ${aabFile.name} -> ${targetFile.absolutePath}"
            }
        }
    }
}

// ✅ Shorebird용 .so 파일 복사
task copySoToShorebirdArtifacts {
    description = "Shorebird가 요구하는 위치로 .so 파일 복사"

    doLast {
        def srcDir = file("build/app/intermediates/merged_native_libs/release/out/lib")
        def targetDir = file("build/app/intermediates/stripped_native_libs/stripReleaseDebugSymbols/release/out/lib")
        if (srcDir.exists()) {
            copy {
                from srcDir
                into targetDir
            }
            println "✓ .so 파일 복사 완료: ${srcDir} → ${targetDir}"
        } else {
            println "⚠️ .so 파일 없음: ${srcDir}"
        }
    }
}

// ✅ Gradle 작업에 태스크 연결
afterEvaluate {
    tasks.matching { it.name.startsWith('bundle') }.configureEach {
        finalizedBy copyAabToFlutterBuild
    }
    tasks.named("mergeReleaseNativeLibs").configure {
        finalizedBy copySoToShorebirdArtifacts
    }
}

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://artifact.bytedance.com/repository/pangle" }
    maven { url "https://artifact.bytedance.com/repository/pangle-global" }
    maven { url "https://jitpack.io" }
    google()
    mavenCentral()
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.tapjoy:tapjoy-android-sdk:14.3.1'
    implementation "androidx.concurrent:concurrent-futures:1.1.0"
    implementation files('libs/pincrux_offerwall.aar')

    // Pangle SDK
    implementation 'com.pangle.global:ads-sdk:6.5.0.5'
    implementation 'com.pangle.global:crash_monitor:1.3.8-rc.1'
    implementation 'com.pangle.global:gecko_pgl:1.0.0.1'
}