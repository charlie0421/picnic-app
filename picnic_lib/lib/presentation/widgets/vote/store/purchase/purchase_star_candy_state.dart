import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:picnic_lib/core/services/purchase_service.dart';
import 'package:picnic_lib/core/utils/logger.dart';
import 'package:picnic_lib/l10n/app_localizations.dart';
import 'package:picnic_lib/services/duplicate_prevention_service.dart';
import 'package:picnic_lib/l10n.dart';
import 'package:picnic_lib/presentation/dialogs/require_login_dialog.dart';
import 'package:picnic_lib/presentation/dialogs/simple_dialog.dart';
import 'package:picnic_lib/presentation/providers/product_provider.dart';
import 'package:picnic_lib/presentation/providers/user_info_provider.dart';
import 'package:picnic_lib/presentation/widgets/error.dart';
import 'package:picnic_lib/presentation/widgets/ui/loading_overlay_widgets.dart';
import 'package:picnic_lib/presentation/widgets/vote/store/common/store_point_info.dart';
import 'package:picnic_lib/presentation/widgets/vote/store/common/usage_policy_dialog.dart';
import 'package:picnic_lib/presentation/widgets/vote/store/purchase/analytics_service.dart';
import 'package:picnic_lib/core/services/in_app_purchase_service.dart';
import 'package:picnic_lib/presentation/widgets/vote/store/purchase/purchase_star_candy.dart';
import 'package:picnic_lib/core/services/receipt_verification_service.dart';
import 'package:picnic_lib/presentation/widgets/vote/store/purchase/store_list_tile.dart';
import 'package:picnic_lib/ui/style.dart';
import 'package:shimmer/shimmer.dart';

import 'handlers/restore_purchase_handler.dart';
import 'handlers/purchase_safety_manager.dart';
import 'handlers/purchase_dialog_handler.dart';
import 'handlers/debug_dialog_handler.dart';

class PurchaseStarCandyState extends ConsumerState<PurchaseStarCandy>
    with SingleTickerProviderStateMixin {
  late final PurchaseService _purchaseService;
  late final AnimationController _rotationController;
  final GlobalKey<LoadingOverlayWithIconState> _loadingKey =
      GlobalKey<LoadingOverlayWithIconState>();

  late final RestorePurchaseHandler _restoreHandler;
  late final PurchaseSafetyManager _safetyManager;
  late final PurchaseDialogHandler _dialogHandler;
  late final DebugDialogHandler _debugHandler;
  String? _pendingProductId;
  bool _transactionsCleared = false;
  bool _isActivePurchasing = false;
  bool _isInitializing = true;
  bool _isPurchasing = false;

  @override
  void initState() {
    super.initState();
    logger.d('[PurchaseStarCandyState] initState called');

    _rotationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _purchaseService = PurchaseService(
      ref: ref,
      inAppPurchaseService: InAppPurchaseService(),
      receiptVerificationService: ReceiptVerificationService(),
      analyticsService: AnalyticsService(),
      duplicatePreventionService: DuplicatePreventionService(ref),
      onPurchaseUpdate: _onPurchaseUpdate,
    );

    _restoreHandler = RestorePurchaseHandler(
      purchaseService: _purchaseService,
      loadingKey: _loadingKey,
      context: context,
    );

    _safetyManager = PurchaseSafetyManager(
      loadingKey: _loadingKey,
      resetPurchaseState: _resetPurchaseState,
    );

    _dialogHandler = PurchaseDialogHandler(
      context: context,
      purchaseService: _purchaseService,
    );

    _debugHandler = DebugDialogHandler(
      context: context,
      purchaseService: _purchaseService,
      loadingKey: _loadingKey,
    );

    // üéØ Î≥µÏõê Ìï∏Îì§Îü¨ÏôÄ ÏïàÏ†ÑÎßù Îß§ÎãàÏ†Ä Ïó∞Í≤∞ (Ïó∞ÏÜç Íµ¨Îß§ Î≥¥Ìò∏)
    _restoreHandler.setSafetyManager(_safetyManager);

    // üéØ Ïã¨Ìîå ÌÉÄÏûÑÏïÑÏõÉ Ï≤òÎ¶¨: ÏßÅÏ†ë ÏΩúÎ∞± ÏÑ§Ï†ï
    _safetyManager.onTimeoutUIReset = () {
      if (mounted) {
        _resetPurchaseState();
        // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
        showSimpleDialog(
            content:
                'Purchase processing time exceeded.\nPlease try again later.');
      }
    };

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializePage();
    });
  }

  /// ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî (Î≥µÏõê Íµ¨Îß§ ÏòàÎ∞©Ï†Å Ï†ïÎ¶¨ Ìè¨Ìï®)
  Future<void> _initializePage() async {
    final initStartTime = DateTime.now();
    final platform = Theme.of(context).platform;
    logger.i(
        '[PurchaseStarCandyState] Starting initialization with proactive restore cleanup (${platform.name})');

    if (!mounted) return;

    try {
      _loadingKey.currentState?.show();

      await _restoreHandler.performProactiveCleanup();

      final initEndTime = DateTime.now();
      final initDuration = initEndTime.difference(initStartTime);
      logger.i(
          '[PurchaseStarCandyState] Initialization completed - Duration: ${initDuration.inMilliseconds}ms');

      if (mounted) {
        setState(() {
          _isInitializing = false;
          _transactionsCleared = true;
        });
        _loadingKey.currentState?.hide();
      }
    } catch (e) {
      logger.e('[PurchaseStarCandyState] Initialization failed: $e');
      if (mounted) {
        setState(() {
          _isInitializing = false;
          _transactionsCleared = true;
        });
        _loadingKey.currentState?.hide();
      }
    }
  }

  @override
  void dispose() {
    _restoreHandler.dispose();
    _safetyManager.disposeSafetyTimer();
    _rotationController.dispose();
    _purchaseService.inAppPurchaseService.dispose();
    super.dispose();
  }

  /// Íµ¨Îß§ Ï∑®ÏÜå Í∞êÏßÄ
  bool _isPurchaseCanceled(PurchaseDetails purchaseDetails) {
    if (purchaseDetails.status == PurchaseStatus.canceled) {
      return true;
    }

    if (purchaseDetails.status == PurchaseStatus.error) {
      final errorMessage = purchaseDetails.error?.message.toLowerCase() ?? '';
      final errorCode = purchaseDetails.error?.code ?? '';

      final cancelKeywords = [
        'cancel',
        'cancelled',
        'canceled',
        'user cancel',
        'abort',
        'dismiss',
        'authentication',
        'touch id',
        'face id',
        'biometric',
        'passcode',
        'unauthorized',
        'permission denied',
        'operation was cancelled',
        'user cancelled',
        'user denied',
        'authentication failed',
        'authentication cancelled',
        'user interaction required',
        'interaction not allowed',
        'declined',
        'rejected',
        'stopped',
        'interrupted',
        'terminated',
        'aborted',
        'transaction has been cancelled',
        'cancelled by the user',
        'purchase was cancelled',
        'user has cancelled',
        'transaction cancelled',
        'purchase cancelled',
        'payment cancelled',
        'cancelled transaction',
        'user cancellation',
        'cancelled by user'
      ];

      final cancelErrorCodes = [
        'PAYMENT_CANCELED',
        'USER_CANCELED',
        '2',
        'SKErrorPaymentCancelled',
        'BILLING_RESPONSE_USER_CANCELED',
        '-1000',
        '-1001',
        '-1002',
        '-1003',
        '-1004',
        '-1005',
        '-1006',
        '-1007',
        '-1008',
        '-1',
        '-2',
        '-3',
        '-4',
        '-5',
        '-6',
        '-7',
        '-8',
        '-9',
        '-10',
        '-11',
        '-1001',
        '2',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        '10',
        '11',
        'SKError2',
        'SKError1002',
        'LAError2',
        'LAError4',
        'LAError5',
        'LAError8',
        'storekit2_purchase_cancelled',
        'storekit2_user_cancelled',
        'storekit2_cancelled',
        'purchase_cancelled',
        'transaction_cancelled',
        'user_cancelled_purchase',
        'cancelled_by_user',
        'platform_cancelled',
        'platform_user_cancelled',
        'ios_purchase_cancelled',
        'ios_user_cancelled'
      ];

      for (final keyword in cancelKeywords) {
        if (errorMessage.contains(keyword)) {
          logger.i(
              '[PurchaseStarCandyState] Cancel keyword detected: $keyword in "$errorMessage"');
          return true;
        }
      }

      for (final code in cancelErrorCodes) {
        if (errorCode.contains(code) || errorMessage.contains(code)) {
          logger.i(
              '[PurchaseStarCandyState] Cancel error code detected: $code (errorCode: "$errorCode", errorMessage: "$errorMessage")');
          return true;
        }
      }
      logger.w(
          '''[PurchaseStarCandyState] ‚ö†Ô∏è UNDETECTED ERROR - Please check if this should be treated as cancellation:
Error Code: "$errorCode"
Error Message: "$errorMessage"
Full Error: ${purchaseDetails.error}
''');
    }

    return false;
  }

  void _onPurchaseUpdate(List<PurchaseDetails> purchaseDetailsList) async {
    final statusCounts = _getStatusCounts(purchaseDetailsList);

    logger.d('''[PurchaseStarCandyState] Purchase update received:
Total: ${purchaseDetailsList.length} | Active: $_isActivePurchasing | Cleared: $_transactionsCleared
Pending: ${statusCounts['pending']} | Restored: ${statusCounts['restored']} | Purchased: ${statusCounts['purchased']} | Error: ${statusCounts['error']} | Canceled: ${statusCounts['canceled']}''');

    try {
      for (final purchaseDetails in purchaseDetailsList) {
        await _processPurchaseDetail(purchaseDetails);
      }
    } catch (e, s) {
      logger.e('[PurchaseStarCandyState] Error handling purchase update: $e',
          error: e, stackTrace: s);
      _resetPurchaseState();
      _loadingKey.currentState?.hide();
      await _dialogHandler.showErrorDialog(
          AppLocalizations.of(context).dialog_message_purchase_failed);
      rethrow;
    }
  }

  /// ÏÉÅÌÉúÎ≥Ñ Íµ¨Îß§ Í∞úÏàò Í≥ÑÏÇ∞
  Map<String, int> _getStatusCounts(List<PurchaseDetails> purchaseDetailsList) {
    return {
      'pending': purchaseDetailsList
          .where((p) => p.status == PurchaseStatus.pending)
          .length,
      'restored': purchaseDetailsList
          .where((p) => p.status == PurchaseStatus.restored)
          .length,
      'purchased': purchaseDetailsList
          .where((p) => p.status == PurchaseStatus.purchased)
          .length,
      'error': purchaseDetailsList
          .where((p) => p.status == PurchaseStatus.error)
          .length,
      'canceled': purchaseDetailsList
          .where((p) => p.status == PurchaseStatus.canceled)
          .length,
    };
  }

  /// Í∞úÎ≥Ñ Íµ¨Îß§ ÏÉÅÏÑ∏ Ï≤òÎ¶¨
  Future<void> _processPurchaseDetail(PurchaseDetails purchaseDetails) async {
    logger.d(
        '[PurchaseStarCandyState] Processing: ${purchaseDetails.status} for ${purchaseDetails.productID}');

    if (_shouldForceCompletePending(purchaseDetails)) {
      await _forceCompletePendingPurchase(purchaseDetails);
      return;
    }

    if (purchaseDetails.status == PurchaseStatus.pending &&
        !_isActivePurchasing) {
      logger.i(
          '[PurchaseStarCandyState] Purchase pending for ${purchaseDetails.productID}');
      return;
    }

    if (_shouldIgnoreDuringInit(purchaseDetails)) {
      logger.i(
          '[PurchaseStarCandyState] Ignoring ${purchaseDetails.status} during initialization: ${purchaseDetails.productID}');
      return;
    }

    if (_shouldProcessRestored(purchaseDetails)) {
      await _processRestoredPurchase(purchaseDetails);
      return;
    }

    if (_shouldProcessActivePurchase(purchaseDetails)) {
      await _processActivePurchase(purchaseDetails);
      return;
    }

    await _processErrorAndCancel(purchaseDetails);
    if (purchaseDetails.pendingCompletePurchase) {
      await _purchaseService.inAppPurchaseService
          .completePurchase(purchaseDetails);
    }
  }

  /// Ï¥àÍ∏∞Ìôî Ï§ë pending Íµ¨Îß§ Í∞ïÏ†ú ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏
  bool _shouldForceCompletePending(PurchaseDetails purchaseDetails) {
    return !_isActivePurchasing &&
        !_transactionsCleared &&
        purchaseDetails.status == PurchaseStatus.pending;
  }

  /// Ï¥àÍ∏∞Ìôî Ï§ë Î¨¥ÏãúÌï† Íµ¨Îß§ Ïó¨Î∂Ä ÌôïÏù∏
  bool _shouldIgnoreDuringInit(PurchaseDetails purchaseDetails) {
    return !_isActivePurchasing &&
        !_transactionsCleared &&
        (purchaseDetails.status == PurchaseStatus.restored ||
            purchaseDetails.status == PurchaseStatus.purchased);
  }

  bool _shouldProcessRestored(PurchaseDetails purchaseDetails) {
    return _restoreHandler.shouldProcessRestored(purchaseDetails);
  }

  bool _shouldProcessActivePurchase(PurchaseDetails purchaseDetails) {
    final platform = Platform.isIOS ? 'iOS' : 'Android';
    logger.i('[ÌîåÎû´ÌèºÎ≥Ñ] üì± $platform ÌôúÏÑ± Íµ¨Îß§ ÌåêÎ≥Ñ: ${purchaseDetails.productID}');

    // üì± iOSÏôÄ ü§ñ Android ÏôÑÏ†Ñ Î∂ÑÎ¶¨ Ï≤òÎ¶¨
    if (Platform.isIOS) {
      return _shouldProcessActivePurchaseIOS(purchaseDetails);
    } else {
      return _shouldProcessActivePurchaseAndroid(purchaseDetails);
    }
  }

  /// üçé iOS Ï†ÑÏö© ÌôúÏÑ± Íµ¨Îß§ ÌåêÎ≥Ñ - Ïú†Ïó∞Ìïú 3Îã®Í≥Ñ Ï≤òÎ¶¨
  bool _shouldProcessActivePurchaseIOS(PurchaseDetails purchaseDetails) {
    // üçé 1Îã®Í≥Ñ: ÌòÑÏû¨ ÌôúÏÑ± Íµ¨Îß§Ïù∏ÏßÄ ÌôïÏù∏
    if (_isActivePurchasing &&
        (purchaseDetails.status == PurchaseStatus.purchased ||
            purchaseDetails.status == PurchaseStatus.restored)) {
      logger.i('[iOS] üçé 1Îã®Í≥Ñ: ÌòÑÏû¨ ÌôúÏÑ± Íµ¨Îß§ ÌôïÏù∏');
      return true;
    }

    // üçé 2Îã®Í≥Ñ: ÌÉÄÏûÑÏïÑÏõÉ ÌõÑ Îä¶ÏùÄ Íµ¨Îß§ ÏÑ±Í≥µ (iOS ÌäπÌôî)
    if (_safetyManager.isSafetyTimeoutTriggered &&
        _safetyManager.safetyTimeoutTime != null &&
        !_isActivePurchasing &&
        (purchaseDetails.status == PurchaseStatus.purchased ||
            purchaseDetails.status == PurchaseStatus.restored)) {
      final timeSinceTimeout =
          DateTime.now().difference(_safetyManager.safetyTimeoutTime!);

      if (timeSinceTimeout.inMinutes <= 2) {
        final isActual = _safetyManager.isActualPurchase(
          purchaseDetails: purchaseDetails,
          isActivePurchasing: _isActivePurchasing,
          pendingProductId: _pendingProductId,
        );

        if (isActual) {
          logger
              .w('[iOS] üçé 2Îã®Í≥Ñ: Îä¶ÏùÄ Íµ¨Îß§ ÏÑ±Í≥µ Í∞êÏßÄ (${timeSinceTimeout.inSeconds}Ï¥à)');
          return true;
        }
      }
    }

    // üçé 3Îã®Í≥Ñ: iOS ÏïàÏ†Ñ fallback - Ï†ïÏÉÅ Íµ¨Îß§Í∞Ä Ï∞®Îã®ÎêòÏßÄ ÏïäÎèÑÎ°ù!
    if (purchaseDetails.status == PurchaseStatus.purchased ||
        purchaseDetails.status == PurchaseStatus.restored) {
      final isActual = _safetyManager.isActualPurchase(
        purchaseDetails: purchaseDetails,
        isActivePurchasing: _isActivePurchasing,
        pendingProductId: _pendingProductId,
      );

      if (isActual) {
        final statusText = purchaseDetails.status == PurchaseStatus.restored
            ? 'restored‚ÜíÏ†ïÏÉÅ Íµ¨Îß§'
            : 'Ï†ïÏÉÅ Íµ¨Îß§';
        logger.i('[iOS] üçé 3Îã®Í≥Ñ: iOS ÏïàÏ†Ñ fallback - $statusText Í∞êÏßÄ, ÏòÅÏàòÏ¶ù Í≤ÄÏ¶ù ÏßÑÌñâ');
        return true;
      }
    }

    logger.w('[iOS] üçé iOS Ï∞®Îã®: ÌôúÏÑ± Íµ¨Îß§ ÏïÑÎãò');
    return false;
  }

  /// ü§ñ Android Ï†ÑÏö© ÌôúÏÑ± Íµ¨Îß§ ÌåêÎ≥Ñ - ÏóÑÍ≤©Ìïú 2Îã®Í≥Ñ Ï≤òÎ¶¨
  bool _shouldProcessActivePurchaseAndroid(PurchaseDetails purchaseDetails) {
    // ü§ñ 1Îã®Í≥Ñ: ÌòÑÏû¨ ÌôúÏÑ± Íµ¨Îß§Ïù∏ÏßÄ ÌôïÏù∏ (ÏóÑÍ≤©)
    if (_isActivePurchasing &&
        (purchaseDetails.status == PurchaseStatus.purchased ||
            purchaseDetails.status == PurchaseStatus.restored)) {
      logger.i('[Android] ü§ñ 1Îã®Í≥Ñ: ÌòÑÏû¨ ÌôúÏÑ± Íµ¨Îß§ ÌôïÏù∏');
      return true;
    }

    // ü§ñ 2Îã®Í≥Ñ: ÌÉÄÏûÑÏïÑÏõÉ ÌõÑ ÏßßÏùÄ ÏßÄÏó∞Îßå ÌóàÏö© (Android ÌäπÌôî)
    if (_safetyManager.isSafetyTimeoutTriggered &&
        _safetyManager.safetyTimeoutTime != null &&
        !_isActivePurchasing &&
        purchaseDetails.status == PurchaseStatus.purchased) {
      // restored Ï†úÏô∏
      final timeSinceTimeout =
          DateTime.now().difference(_safetyManager.safetyTimeoutTime!);

      // ü§ñ AndroidÎäî 1Î∂ÑÎßå ÌóàÏö© (Îçî ÏóÑÍ≤©)
      if (timeSinceTimeout.inMinutes <= 1) {
        final isActual = _safetyManager.isActualPurchase(
          purchaseDetails: purchaseDetails,
          isActivePurchasing: _isActivePurchasing,
          pendingProductId: _pendingProductId,
        );

        if (isActual) {
          logger
              .w('[Android] ü§ñ 2Îã®Í≥Ñ: ÏßßÏùÄ ÏßÄÏó∞ ÌóàÏö© (${timeSinceTimeout.inSeconds}Ï¥à)');
          return true;
        }
      }
    }

    // ü§ñ 3Îã®Í≥Ñ: AndroidÎäî fallback ÏóÜÏùå - ÏóÑÍ≤© Ï∞®Îã®
    logger.w('[Android] ü§ñ Android ÏóÑÍ≤© Ï∞®Îã®: ÌôúÏÑ± Íµ¨Îß§ ÏïÑÎãò');
    return false;
  }

  /// Ï¥àÍ∏∞Ìôî Ï§ë pending Íµ¨Îß§ Í∞ïÏ†ú ÏôÑÎ£å
  Future<void> _forceCompletePendingPurchase(
      PurchaseDetails purchaseDetails) async {
    logger.i(
        '[PurchaseStarCandyState] Force completing pending purchase: ${purchaseDetails.productID}');

    try {
      final startTime = DateTime.now();
      await _purchaseService.inAppPurchaseService
          .completePurchase(purchaseDetails);
      final duration = DateTime.now().difference(startTime).inMilliseconds;
      logger.i(
          '[PurchaseStarCandyState] Pending purchase completed: ${duration}ms');
    } catch (e) {
      logger.e(
          '[PurchaseStarCandyState] Failed to complete pending purchase: $e');
    }
  }

  Future<void> _processRestoredPurchase(PurchaseDetails purchaseDetails) async {
    await _restoreHandler.processRestoredPurchase(purchaseDetails);
  }

  /// ÌôúÏÑ± Íµ¨Îß§ Ï≤òÎ¶¨
  Future<void> _processActivePurchase(PurchaseDetails purchaseDetails) async {
    final isActualPurchase = _safetyManager.isActualPurchase(
      purchaseDetails: purchaseDetails,
      isActivePurchasing: _isActivePurchasing,
      pendingProductId: _pendingProductId,
    );

    final isLatePurchase = _safetyManager.isLatePurchase(_isActivePurchasing);

    logger.i(
        '[PurchaseStarCandyState] Processing active purchase: ${purchaseDetails.productID} (actual: $isActualPurchase, late: $isLatePurchase)');

    await _purchaseService.handleOptimizedPurchase(
      purchaseDetails,
      () async {
        logger.i('[PurchaseStarCandyState] Purchase successful');

        // üõ°Ô∏è Íµ¨Îß§ ÏÑ∏ÏÖò ÏôÑÎ£å Í∏∞Î°ùÏúºÎ°ú Ï§ëÎ≥µ Î∞©ÏßÄ (Ïù¥ÎØ∏ ÎÇ¥Î∂ÄÏ†ÅÏúºÎ°ú ÏïàÏ†ÑÎßù ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨Ìï®)
        _safetyManager.completePurchaseSession(purchaseDetails.productID);

        // üßπ Î™®Îì† ÌÉÄÏù¥Î®∏ ÏôÑÏ†Ñ Ï†ïÎ¶¨ (Ï†ïÏÉÅ Íµ¨Îß§ ÏôÑÎ£å Ïãú)
        _cleanupAllTimersOnSuccess(purchaseDetails.productID);

        // üßπ Íµ¨Îß§ ÏôÑÎ£å ÌõÑ ÌÅ¥Î¶∞ ÏûëÏóÖ ÏàòÌñâ (ÎèôÍ∏∞ Ï≤òÎ¶¨Î°ú ÏôÑÏ†ÑÏÑ± Î≥¥Ïû•)
        final transactionId = purchaseDetails.purchaseID ??
            '${purchaseDetails.productID}_${DateTime.now().millisecondsSinceEpoch}';

        // üßπ ÎèôÍ∏∞Î°ú ÌÅ¥Î¶∞ ÏûëÏóÖ Ïã§Ìñâ - ÏôÑÎ£åÍπåÏßÄ Í∏∞Îã§Î¶º (ÌôïÏã§ÏÑ± Ïö∞ÏÑ†)
        await _safetyManager.performPostPurchaseCleanup(
          productId: purchaseDetails.productID,
          transactionId: transactionId,
          completedPurchase: purchaseDetails,
        );

        await ref.read(userInfoProvider.notifier).getUserProfiles();

        if (mounted) {
          _resetPurchaseState();
          _loadingKey.currentState?.hide();

          if (isLatePurchase) {
            await _dialogHandler.showLatePurchaseSuccessDialog();
          } else {
            await _dialogHandler.showSuccessDialog();
          }
        }
      },
      (error) async {
        if (mounted) {
          _resetPurchaseState();
          _loadingKey.currentState?.hide();

          if (_isDuplicateError(error)) {
            await _dialogHandler.showUnexpectedDuplicateDialog();
          } else {
            logger.e('[PurchaseStarCandyState] Purchase error: $error');
            await _dialogHandler.showErrorDialog(error);
          }
        }
      },
      isActualPurchase: isActualPurchase,
    );
  }

  /// ÏóêÎü¨ Î∞è Ï∑®ÏÜå Ï≤òÎ¶¨
  Future<void> _processErrorAndCancel(PurchaseDetails purchaseDetails) async {
    if (purchaseDetails.status == PurchaseStatus.error) {
      logger.e(
          '[PurchaseStarCandyState] Purchase error: ${purchaseDetails.error?.message}');

      final isCanceled = _isPurchaseCanceled(purchaseDetails);

      if (mounted) {
        _resetPurchaseState();
        _loadingKey.currentState?.hide();

        if (!isCanceled) {
          logger.e(
              '[PurchaseStarCandyState] Actual purchase error - showing dialog');
          await _dialogHandler.showErrorDialog(
              AppLocalizations.of(context).dialog_message_purchase_failed);
        } else {
          logger.i(
              '[PurchaseStarCandyState] Purchase canceled - no error dialog');
        }
      }
    } else if (purchaseDetails.status == PurchaseStatus.canceled) {
      logger.i(
          '[PurchaseStarCandyState] Purchase canceled: ${purchaseDetails.productID}');
      if (mounted) {
        _resetPurchaseState();
        _loadingKey.currentState?.hide();
      }
    }
  }

  /// Ï§ëÎ≥µ ÏóêÎü¨ ÌôïÏù∏
  bool _isDuplicateError(String error) {
    return error.contains('StoreKit Ï∫êÏãú Î¨∏Ï†ú') ||
        error.contains('Ï§ëÎ≥µ ÏòÅÏàòÏ¶ù') ||
        error.contains('Ïù¥ÎØ∏ Ï≤òÎ¶¨Îêú Íµ¨Îß§') ||
        error.contains('Duplicate') ||
        error.toLowerCase().contains('reused');
  }

  /// üßπ Ï†ïÏÉÅ Íµ¨Îß§ ÏôÑÎ£å Ïãú Î™®Îì† ÌÉÄÏù¥Î®∏ ÏôÑÏ†Ñ Ï†ïÎ¶¨
  void _cleanupAllTimersOnSuccess(String productId) {
    logger.i('[PurchaseStarCandyState] üßπ Î™®Îì† ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨ ÏãúÏûë: $productId');

    try {
      // 1Ô∏è‚É£ PurchaseSafetyManager ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨ (Ï∂îÍ∞Ä Ï†ïÎ¶¨)
      _safetyManager.cleanupAllTimersOnSuccess();

      // 2Ô∏è‚É£ RestorePurchaseHandler ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
      _restoreHandler.cleanupTimersOnPurchaseSuccess();

      // 3Ô∏è‚É£ InAppPurchaseService ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
      _purchaseService.inAppPurchaseService
          .cleanupTimersOnPurchaseSuccess(productId);

      logger.i('[PurchaseStarCandyState] üßπ ‚úÖ Î™®Îì† ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨ ÏôÑÎ£å: $productId');
    } catch (e) {
      logger.w('[PurchaseStarCandyState] üßπ ‚ö†Ô∏è ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨ Ï§ë Í≤ΩÍ≥†: $e');
      // ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨ Ïã§Ìå®Ìï¥ÎèÑ Íµ¨Îß§Îäî Ïù¥ÎØ∏ ÏÑ±Í≥µÌñàÏúºÎØÄÎ°ú Í≥ÑÏÜç ÏßÑÌñâ
    }
  }

  void _resetPurchaseState() {
    _safetyManager.disposeSafetyTimer();
    _safetyManager.resetInternalState(reason: 'Ï†ÑÏ≤¥ ÏÉÅÌÉú Î¶¨ÏÖã'); // üö® ÎÇ¥Î∂Ä ÏÉÅÌÉúÎèÑ ÏôÑÏ†Ñ Î¶¨ÏÖã!

    setState(() {
      _isActivePurchasing = false;
      _pendingProductId = null;
      _isPurchasing = false;
    });

    _safetyManager.resetLatePurchaseSuccess();
  }

  Future<void> _handleBuyButtonPressed(
    BuildContext context,
    Map<String, dynamic> serverProduct,
    List<ProductDetails> storeProducts,
  ) async {
    // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎ•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ï≤¥ÌÅ¨
    final userInfo = ref.read(userInfoProvider);
    final isLoggedIn = userInfo.value != null;

    if (!isLoggedIn) {
      showRequireLoginDialog();
      return;
    }

    if (_isInitializing) {
      logger
          .w('[PurchaseStarCandyState] Purchase blocked during initialization');
      showSimpleDialog(
          content: AppLocalizations.of(context).purchase_initializing_message);
      return;
    }

    if (!_canPurchase()) {
      return;
    }

    // üîí Íµ¨Îß§ ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
    final confirmed = await _dialogHandler.showPurchaseConfirmDialog(
      serverProduct: serverProduct,
      storeProducts: storeProducts,
    );

    if (confirmed == true && context.mounted) {
      await _processPurchase(context, serverProduct, storeProducts);
    }
  }

  // üéØ Ïã§Ï†ú Íµ¨Îß§ Ï≤òÎ¶¨ Î°úÏßÅ
  Future<void> _processPurchase(
    BuildContext context,
    Map<String, dynamic> serverProduct,
    List<ProductDetails> storeProducts,
  ) async {
    // üõ°Ô∏è Î≥µÏõê Ï†ïÎ¶¨ ÏôÑÎ£å ÎåÄÍ∏∞ Í∞ÄÎìú
    if (!_restoreHandler.isProactiveCleanupCompleted) {
      logger.w('üõ°Ô∏è Î≥µÏõê Ï†ïÎ¶¨Í∞Ä ÏïÑÏßÅ ÏôÑÎ£åÎêòÏßÄ ÏïäÏùå - Íµ¨Îß§ Ï∞®Îã®');
      if (mounted) {
        showSimpleDialog(
          content: 'Purchase preparation in progress. Please try again later.',
        );
      }
      return;
    }

    _setPurchaseStartState(serverProduct['id']);

    try {
      logger.i(
          '[PurchaseStarCandyState] Starting purchase for: ${serverProduct['id']} (Î≥µÏõê Ï†ïÎ¶¨ ÏôÑÎ£å ÌôïÏù∏Îê®)');
      final purchaseStartTime = DateTime.now();

      if (!context.mounted) return;
      _loadingKey.currentState?.show();

      // Ï¶âÏãú Íµ¨Îß§ ÏãúÏûë
      logger.i(
          '[PurchaseStarCandyState] Starting purchase immediately - no pre-processing');
      final preparationTime = DateTime.now();
      final preparationDuration = preparationTime.difference(purchaseStartTime);
      logger.i(
          '[PurchaseStarCandyState] Purchase preparation completed - Duration: ${preparationDuration.inMilliseconds}ms');

      _isActivePurchasing = true;
      _pendingProductId = serverProduct['id'];
      _transactionsCleared = true;

      final purchaseResult = await _purchaseService.initiatePurchase(
        serverProduct['id'],
        onSuccess: () async {
          logger.i('[PurchaseStarCandyState] Purchase success callback');
          setState(() => _isPurchasing = false);
        },
        onError: (message) async {
          logger
              .e('[PurchaseStarCandyState] Purchase error callback: $message');
          _resetPurchaseState();
          if (mounted) {
            _loadingKey.currentState?.hide();
            await _dialogHandler.showErrorDialog(message);
          }
        },
      );

      await _handlePurchaseResult(purchaseResult);
    } catch (e, s) {
      logger.e('[PurchaseStarCandyState] Error starting purchase: $e',
          error: e, stackTrace: s);
      _resetPurchaseState();
      if (mounted) {
        _loadingKey.currentState?.hide();
        await _dialogHandler.showErrorDialog(
            AppLocalizations.of(context).dialog_message_purchase_failed);
      }
      rethrow;
    }
  }

  /// Íµ¨Îß§ Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
  bool _canPurchase() {
    if (_isPurchasing) {
      logger.w('[PurchaseStarCandyState] Purchase already in progress');
      showSimpleDialog(
          content: AppLocalizations.of(context).purchase_in_progress_message);
      return false;
    }

    if (!_safetyManager.canAttemptPurchase()) {
      logger.w('[PurchaseStarCandyState] Purchase cooldown active');
      showSimpleDialog(
          content: AppLocalizations.of(context).purchase_cooldown_message);
      return false;
    }

    return true;
  }

  /// Íµ¨Îß§ ÏãúÏûë ÏÉÅÌÉú ÏÑ§Ï†ï
  void _setPurchaseStartState(String productId) {
    setState(() {
      _isPurchasing = true;
    });
    // üõ°Ô∏è Íµ¨Îß§ ÏãúÎèÑ Í∏∞Î°ù Ïãú ÏÉÅÌíà IDÎèÑ Ìï®Íªò Ï†ÑÎã¨
    _safetyManager.recordPurchaseAttempt(productId: productId);
  }

  /// Íµ¨Îß§ Í≤∞Í≥º Ï≤òÎ¶¨ - Ï∑®ÏÜåÏôÄ ÏóêÎü¨Î•º Íµ¨Î∂Ñ
  Future<void> _handlePurchaseResult(
      Map<String, dynamic> purchaseResult) async {
    await _safetyManager.handlePurchaseResult(
      purchaseResult,
      _isActivePurchasing,
      (errorMessage) async {
        if (mounted) {
          await _dialogHandler.showErrorDialog(errorMessage);
        }
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎ•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í∞êÏãú
    final userInfo = ref.watch(userInfoProvider);
    final isLoggedIn = userInfo.value != null;

    return LoadingOverlayWithIcon(
      key: _loadingKey,
      iconAssetPath: 'assets/app_icon_128.png',
      enableScale: true,
      enableFade: true,
      enableRotation: false,
      minScale: 0.98,
      maxScale: 1.02,
      showProgressIndicator: false,
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 16.w),
        child: ListView(
          children: [
            if (isLoggedIn) ...[
              const SizedBox(height: 16),
              _buildHeaderSection(),
              const SizedBox(height: 8),
              StorePointInfo(
                title: AppLocalizations.of(context).label_star_candy_pouch,
                width: double.infinity,
                height: 80,
              ),
            ],
            const SizedBox(height: 12),
            const Divider(color: AppColors.grey200, height: 32),
            _buildProductsList(),
            const Divider(color: AppColors.grey200, height: 32),
            _buildFooterSection(),
            const SizedBox(height: 36),
            _buildDebugButtons(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeaderSection() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        _buildRefreshButton(),
      ],
    );
  }

  Widget _buildRefreshButton() {
    return GestureDetector(
      onTap: () {
        _rotationController.forward(from: 0);
        ref.read(userInfoProvider.notifier).getUserProfiles();
      },
      child: RotationTransition(
        turns: Tween(begin: 0.0, end: 1.0).animate(
          CurvedAnimation(parent: _rotationController, curve: Curves.easeInOut),
        ),
        child: SvgPicture.asset(
          package: 'picnic_lib',
          'assets/icons/reset_style=line.svg',
          width: 24,
          height: 24,
          colorFilter: ColorFilter.mode(AppColors.primary500, BlendMode.srcIn),
        ),
      ),
    );
  }

  Widget _buildFooterSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          AppLocalizations.of(context).text_purchase_vat_included,
          style: getTextStyle(AppTypo.caption12M, AppColors.grey600),
        ),
        const SizedBox(height: 2),
        GestureDetector(
          onTap: () => showUsagePolicyDialog(context, ref),
          child: Text.rich(
            TextSpan(
              children: [
                TextSpan(
                  text: AppLocalizations.of(context).candy_usage_policy_guide,
                  style: getTextStyle(AppTypo.caption12M, AppColors.grey600),
                ),
                const TextSpan(text: ' '),
                TextSpan(
                  text: AppLocalizations.of(context)
                      .candy_usage_policy_guide_button,
                  style: getTextStyle(AppTypo.caption12B, AppColors.grey600)
                      .copyWith(decoration: TextDecoration.underline),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildProductsList() {
    final serverProductsAsyncValue = ref.watch(serverProductsProvider);
    final storeProductsAsyncValue = ref.watch(storeProductsProvider);

    return serverProductsAsyncValue.when(
      loading: () => _buildShimmer(),
      error: (error, stackTrace) =>
          buildErrorView(context, error: error, stackTrace: stackTrace),
      data: (serverProducts) {
        return storeProductsAsyncValue.when(
          loading: () => _buildShimmer(),
          error: (error, stackTrace) =>
              Text('Error loading store products: $error'),
          data: (storeProducts) =>
              _buildProductList(serverProducts, storeProducts),
        );
      },
    );
  }

  Widget _buildShimmer() {
    return Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: ListView.separated(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        itemBuilder: (context, index) => _buildShimmerItem(),
        separatorBuilder: (context, index) =>
            const Divider(color: AppColors.grey200, height: 32),
        itemCount: 5,
      ),
    );
  }

  Widget _buildShimmerItem() {
    return ListTile(
      leading: Container(width: 48.w, height: 48, color: Colors.white),
      title: Container(height: 16, color: Colors.white),
      subtitle: Container(height: 16, color: Colors.white),
    );
  }

  Widget _buildProductList(List<Map<String, dynamic>> serverProducts,
      List<ProductDetails> storeProducts) {
    return ListView.separated(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemBuilder: (BuildContext context, int index) =>
          _buildProductItem(serverProducts[index], storeProducts),
      separatorBuilder: (BuildContext context, int index) =>
          const Divider(color: AppColors.grey200, height: 24),
      itemCount: storeProducts.length,
    );
  }

  Widget _buildProductItem(
      Map<String, dynamic> serverProduct, List<ProductDetails> storeProducts) {
    final isButtonEnabled = !_isInitializing && !_isPurchasing;
    final isCurrentProductLoading =
        _isPurchasing && _pendingProductId == serverProduct['id'];

    return StoreListTile(
      icon: Image.asset(
        package: 'picnic_lib',
        'assets/icons/store/star_${serverProduct['id'].replaceAll('STAR', '')}.png',
        width: 48.w,
        height: 48,
      ),
      title: Text(serverProduct['id'],
          style: getTextStyle(AppTypo.body16B, AppColors.grey900)),
      subtitle: Text.rich(
        TextSpan(
          children: [
            TextSpan(
              text: getLocaleTextFromJson(serverProduct['description']),
              style: getTextStyle(AppTypo.caption12B, AppColors.point900),
            ),
          ],
        ),
      ),
      isLoading: isCurrentProductLoading,
      buttonText: '${serverProduct['price']} \$',
      buttonOnPressed: isButtonEnabled
          ? () => _handleBuyButtonPressed(context, serverProduct, storeProducts)
          : null,
    );
  }

  Widget _buildDebugButtons() {
    if (!kDebugMode) return SizedBox.shrink();

    return Container(
      padding: EdgeInsets.all(16),
      margin: EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.orange.withValues(alpha: 0.1),
        border: Border.all(color: Colors.orange),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('Debug & Simulation Tools',
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
          SizedBox(height: 12),
          Container(
            padding: EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.red.withValues(alpha: 0.1),
              border: Border.all(color: Colors.red),
              borderRadius: BorderRadius.circular(6),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Force Timeout (100% Guaranteed)',
                    style: TextStyle(
                        fontWeight: FontWeight.bold, color: Colors.red[700])),
                SizedBox(height: 8),
                Text(
                    'Does not send actual purchase request, only triggers timeout after 3 seconds:',
                    style: TextStyle(fontSize: 12, color: Colors.grey[700])),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: [
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red[600]),
                      onPressed: () {
                        _purchaseService.enableForceTimeout();
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                                'Force Timeout ON - Purchase will now timeout after 3 seconds!'),
                            backgroundColor: Colors.red[600],
                          ),
                        );
                      },
                      child: Text('Force Timeout ON',
                          style: TextStyle(fontSize: 12, color: Colors.white)),
                    ),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.grey[600]),
                      onPressed: () {
                        _purchaseService.disableForceTimeout();
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                              content: Text(
                                  'Force Timeout OFF - Normal purchase process')),
                        );
                      },
                      child: Text('Force Timeout OFF',
                          style: TextStyle(fontSize: 12, color: Colors.white)),
                    ),
                  ],
                ),
              ],
            ),
          ),
          SizedBox(height: 12),
          Text('Timeout Settings',
              style: TextStyle(fontWeight: FontWeight.bold)),
          SizedBox(height: 8),
          Text('Proceed with actual purchase but adjust timeout duration:',
              style: TextStyle(fontSize: 12, color: Colors.grey[600])),
          SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 4,
            children: [
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                onPressed: () {
                  _purchaseService.setTimeoutMode('instant');
                  ScaffoldMessenger.of(context).showSnackBar(
                    // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                    SnackBar(content: Text('Instant Timeout (100ms)')),
                  );
                },
                child: Text('100ms', style: TextStyle(fontSize: 12)),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.deepOrange),
                onPressed: () {
                  _purchaseService.setTimeoutMode('ultrafast');
                  ScaffoldMessenger.of(context).showSnackBar(
                    // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                    SnackBar(content: Text('Ultra Fast Timeout (500ms)')),
                  );
                },
                child: Text('500ms', style: TextStyle(fontSize: 12)),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                onPressed: () {
                  _purchaseService.setTimeoutMode('debug');
                  ScaffoldMessenger.of(context).showSnackBar(
                    // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                    SnackBar(content: Text('Debug Timeout (3 seconds)')),
                  );
                },
                child: Text('3sec', style: TextStyle(fontSize: 12)),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
                onPressed: () {
                  _purchaseService.setTimeoutMode('normal');
                  ScaffoldMessenger.of(context).showSnackBar(
                    // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                    SnackBar(content: Text('Normal Timeout (30 seconds)')),
                  );
                },
                child: Text('30sec', style: TextStyle(fontSize: 12)),
              ),
            ],
          ),
          SizedBox(height: 12),
          Text('Purchase Delay Simulation',
              style: TextStyle(fontWeight: FontWeight.bold)),
          SizedBox(height: 8),
          Text('Delay the purchase request itself to induce timeout:',
              style: TextStyle(fontSize: 12, color: Colors.grey[600])),
          SizedBox(height: 8),
          Wrap(
            spacing: 8,
            children: [
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.purple),
                onPressed: () {
                  _purchaseService.enableSlowPurchase();
                  ScaffoldMessenger.of(context).showSnackBar(
                    // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                    SnackBar(
                        content: Text('Purchase Delay ON - 5 second delay')),
                  );
                },
                // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                child: Text('Delay ON', style: TextStyle(fontSize: 12)),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.grey),
                onPressed: () {
                  _purchaseService.disableSlowPurchase();
                  ScaffoldMessenger.of(context).showSnackBar(
                    // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                    SnackBar(content: Text('Purchase Delay OFF')),
                  );
                },
                // TODO: i18n - Íµ≠Ï†úÌôî Ï†ÅÏö© ÌïÑÏöî
                child: Text('Delay OFF', style: TextStyle(fontSize: 12)),
              ),
            ],
          ),
          SizedBox(height: 12),
          Text('Purchase State Management',
              style: TextStyle(fontWeight: FontWeight.bold)),
          SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 4,
            children: [
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.grey[400],
                ),
                onPressed: () {
                  final platform = Theme.of(context).platform;
                  final platformEmoji = platform == TargetPlatform.iOS
                      ? 'üì±'
                      : platform == TargetPlatform.android
                          ? 'ü§ñ'
                          : 'üñ•Ô∏è';

                  logger.d(
                      'Î≥µÏõê ÎîîÎ≤ÑÍ∑∏ Î≤ÑÌäº ÎàåÎ¶º ($platformEmoji ${platform.name}) - Ï°∞Ïö©Ìûà Î¨¥Ïãú');

                  if (kDebugMode) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                            '$platformEmoji ${platform.name}: Restore Ignored'),
                        duration: Duration(seconds: 1),
                      ),
                    );
                  }
                },
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.visibility_off, size: 16, color: Colors.white),
                    SizedBox(width: 4),
                    Text('Ignore Restore',
                        style: TextStyle(fontSize: 12, color: Colors.white)),
                  ],
                ),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                onPressed: _debugHandler.handleSandboxAuthReset,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.fingerprint, size: 16, color: Colors.white),
                    SizedBox(width: 4),
                    Text('Auth Reset',
                        style: TextStyle(fontSize: 12, color: Colors.white)),
                  ],
                ),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.teal),
                onPressed: _debugHandler.handleSandboxDiagnosis,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.healing, size: 16, color: Colors.white),
                    SizedBox(width: 4),
                    Text('Diagnosis',
                        style: TextStyle(fontSize: 12, color: Colors.white)),
                  ],
                ),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.purple),
                onPressed: _debugHandler.handleNuclearReset,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.dangerous, size: 16, color: Colors.white),
                    SizedBox(width: 4),
                    Text('Nuclear Reset',
                        style: TextStyle(fontSize: 12, color: Colors.white)),
                  ],
                ),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                onPressed: _debugHandler.handleCheckPendingStatus,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.analytics, size: 16, color: Colors.white),
                    SizedBox(width: 4),
                    Text('Check Pending',
                        style: TextStyle(fontSize: 12, color: Colors.white)),
                  ],
                ),
              ),
            ],
          ),
          SizedBox(height: 12),
          Text('Authentication Troubleshooting',
              style: TextStyle(fontWeight: FontWeight.bold)),
          SizedBox(height: 8),
          Text('Solve issues where authentication dialog does not appear:',
              style: TextStyle(fontSize: 12, color: Colors.grey[600])),
          SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 4,
            children: [
              ElevatedButton(
                style: ElevatedButton.styleFrom(backgroundColor: Colors.indigo),
                onPressed: _debugHandler.handleAuthenticationDiagnosis,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.search, size: 16, color: Colors.white),
                    SizedBox(width: 4),
                    Text('Auth Diagnosis',
                        style: TextStyle(fontSize: 12, color: Colors.white)),
                  ],
                ),
              ),
              ElevatedButton(
                style:
                    ElevatedButton.styleFrom(backgroundColor: Colors.red[800]),
                onPressed: _debugHandler.handleUltimateAuthReset,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.warning, size: 16, color: Colors.white),
                    SizedBox(width: 4),
                    Text('Ultimate Reset',
                        style: TextStyle(fontSize: 12, color: Colors.white)),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
