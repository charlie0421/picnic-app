# Task ID: 31
# Title: 투표 신청 비즈니스 로직 구현
# Status: pending
# Dependencies: 27
# Priority: high
# Description: 중복 방지, 투표 상태에 따른 검증, 사용자당 투표별 한 번의 신청 제한, 저장 전 데이터 검증을 포함한 투표 신청의 비즈니스 로직을 구현합니다.
# Details:
1. 중복 신청 방지 구현:
   - 신청 비즈니스 로직을 처리하기 위한 `VoteApplicationService` 서비스 클래스 생성
   - 사용자가 이미 신청했는지 확인하기 위해 저장소를 쿼리하는 `checkDuplicateApplication(UUID userId, UUID voteId)` 메서드 추가
   - 커스텀 예외(예: `DuplicateVoteApplicationException`)를 사용한 적절한 오류 처리 구현

2. 투표 상태 검증 구현:
   - 가능한 상태(DRAFT, OPEN, CLOSED 등)가 있는 `VoteStatus` 열거형 생성
   - 현재 투표 상태를 검색하는 `validateVoteStatus(UUID voteId)` 메서드 추가
   - 투표 상태가 OPEN일 때만 신청 허용
   - 유효하지 않은 상태에 대한 적절한 예외 발생(예: `VoteNotOpenException`)

3. 사용자당 투표별 한 번의 신청 로직 구현:
   - 저장소에 `findByUserIdAndVoteId(UUID userId, UUID voteId)` 메서드 확장
   - 새 신청을 처리하기 전에 서비스 계층에서 유효성 검사 추가
   - 적절한 데이터베이스 제약 조건 생성(user_id와 vote_id 조합에 대한 고유 인덱스)

4. 신청 데이터 유효성 검사 구현:
   - 입력 데이터의 유효성을 검사하는 메서드가 있는 `VoteApplicationValidator` 클래스 생성
   - 필수 필드(제목, 설명 등) 유효성 검사
   - 문자 제한 및 콘텐츠 제한 유효성 검사
   - 주입 공격을 방지하기 위한 사용자 입력 정화 구현

5. 신청 저장 로직 구현:
   - 서비스 클래스에 `createApplication(VoteApplication application)` 메서드 생성
   - 데이터베이스에 저장하기 전에 모든 유효성 검사 수행
   - 데이터 일관성을 보장하기 위한 트랜잭션 관리 구현
   - 성공/실패 정보가 포함된 적절한 응답 객체 반환

6. 오류 처리 및 로깅:
   - 모든 비즈니스 로직에 대한 포괄적인 오류 처리 구현
   - 다양한 유효성 검사 실패에 대한 커스텀 예외 클래스 생성
   - 디버깅 및 감사 목적을 위한 상세한 로깅 추가
   - UI 계층에 적절한 오류 메시지가 반환되도록 보장

# Test Strategy:
1. 단위 테스트:
   - 모의 저장소 응답으로 중복 신청 방지 로직 테스트
   - 다양한 투표 상태로 투표 상태 유효성 검사 테스트
   - 다양한 시나리오로 사용자당 한 번의 신청 로직 테스트
   - 유효하고 유효하지 않은 입력으로 데이터 유효성 검사 테스트
   - 다양한 예외 시나리오로 오류 처리 테스트

2. 통합 테스트:
   - 신청 제출부터 저장까지의 전체 흐름 테스트
   - 제약 조건을 확인하기 위한 실제 데이터베이스 상호 작용 테스트
   - 강제 실패로 트랜잭션 관리 테스트
   - 서비스 계층을 통한 적절한 오류 전파 확인

3. 엣지 케이스 테스트:
   - 동일한 사용자의 동시 신청 테스트
   - 투표 마감 시간에 정확히 신청 제출 테스트
   - 잘못된 형식이거나 악의적인 입력 데이터로 테스트
   - 매우 큰 입력 값으로 테스트

4. 성능 테스트:
   - 신청 유효성 검사 및 저장에 대한 응답 시간 측정
   - 기존 신청이 많은 상태에서 테스트
   - 인덱스가 있는 데이터베이스 쿼리 성능 확인

5. 수동 테스트:
   - 모든 비즈니스 규칙을 수동으로 확인하기 위한 테스트 하네스 생성
   - UI에 적절한 오류 메시지가 표시되는지 확인
   - 신청부터 확인까지의 전체 사용자 흐름 테스트

# Subtasks:
## 1. 중복 방지 컴포넌트 구현 [pending]
### Dependencies: None
### Description: 중복 신청 또는 투표를 방지하는 컴포넌트 생성
### Details:
동일한 사용자 또는 IP 주소에서 기존 신청이나 투표를 확인하는 로직을 개발합니다. 효율적인 중복 감지를 위한 데이터베이스 쿼리 및 캐싱 메커니즘을 구현합니다.

## 2. 투표 상태 검증 컴포넌트 개발 [pending]
### Dependencies: 31.1
### Description: 투표 상태를 검증하는 컴포넌트 생성
### Details:
투표가 여전히 열려 있는지, 닫혔는지 또는 특정 단계에 있는지 확인하는 로직을 구현합니다. 시간 기반 유효성 검사 및 상태 전환을 포함합니다.

## 3. 신청 제한 컴포넌트 생성 [pending]
### Dependencies: 31.1
### Description: 신청 제한을 적용하는 컴포넌트 구현
### Details:
사용자별, 시간 기간별 또는 다른 기준에 따라 신청 수를 추적하고 제한하는 로직을 개발합니다. 카운터 및 시간 기반 제한을 구현합니다.

## 4. 데이터 유효성 검사 컴포넌트 구현 [pending]
### Dependencies: None
### Description: 포괄적인 데이터 유효성 검사를 위한 컴포넌트 생성
### Details:
형식 검사, 범위 유효성 검사 및 데이터 무결성 확인을 포함하여 모든 사용자 제출 데이터에 대한 입력 유효성 검사 로직을 개발합니다.

## 5. 오류 처리 컴포넌트 개발 [pending]
### Dependencies: 31.1, 31.2, 31.3, 31.4
### Description: 중앙 집중식 오류 처리 및 로깅 컴포넌트 생성
### Details:
다른 모든 컴포넌트의 오류를 포착, 로깅 및 응답하는 시스템을 구현합니다. 오류 분류, 사용자 친화적인 오류 메시지 및 디버깅을 위한 상세한 로깅을 포함합니다.

