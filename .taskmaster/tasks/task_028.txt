# Task ID: 28
# Title: 아티스트 검색 기능 구현
# Status: pending
# Dependencies: 27
# Priority: medium
# Description: 사용자가 아티스트 이름이나 그룹명으로 검색할 수 있는 포괄적인 아티스트 검색 기능을 개발하고, 실시간 결과를 표시하며, 검색 API 엔드포인트를 구현하고, 검색 성능을 최적화합니다.
# Details:
1. 새로운 SearchService 클래스 생성:
   - 아티스트 이름 및 그룹명으로 검색하는 메서드 구현
   - 효율적인 쿼리를 위해 Supabase 전체 텍스트 검색 기능 활용

2. 검색 API 엔드포인트 구현:
   - 검색 요청을 처리할 새로운 컨트롤러(예: SearchController) 생성
   - API 경로 정의(예: /api/search/artists)
   - 요청 유효성 검사 및 오류 처리 구현

3. 검색 기능을 위한 UI 컴포넌트 개발:
   - 실시간 검색 기능이 있는 SearchBar 위젯 생성
   - 타이핑 중 API 호출을 최적화하기 위한 디바운싱 구현
   - 결과를 표시하기 위한 SearchResultsList 위젯 설계 및 구현

4. 실시간 검색 결과 통합:
   - 클라이언트에 즉각적인 업데이트를 푸시하기 위해 Supabase 실시간 기능 사용
   - 향상된 사용자 경험을 위한 낙관적 UI 업데이트 구현

5. 검색 성능 최적화:
   - 대용량 결과 세트에 대한 서버 측 페이지네이션 구현
   - 더 빠른 쿼리를 위한 데이터베이스 수준의 적절한 인덱싱 사용
   - 자주 검색되는 용어에 대한 캐싱 메커니즘 구현

6. 데이터 모델 업데이트:
   - 관련 검색 필드를 포함하도록 Artist 모델 수정
   - API 통신을 위한 적절한 직렬화/역직렬화 보장

7. UI에서 적절한 오류 처리 및 로딩 상태 구현

8. 사용자 행동에 대한 인사이트를 수집하기 위한 검색 쿼리 분석 추적 추가

SearchService 코드 예시:

```dart
class SearchService {
  final SupabaseClient _supabaseClient;

  SearchService(this._supabaseClient);

  Future<List<Artist>> searchArtists(String query) async {
    final response = await _supabaseClient
        .from('artists')
        .select()
        .textSearch('name', query)
        .execute();

    if (response.error != null) {
      throw Exception('Failed to search artists: ${response.error!.message}');
    }

    return (response.data as List)
        .map((json) => Artist.fromJson(json))
        .toList();
  }
}
```

전체 텍스트 검색 기능을 지원하도록 Supabase 통합을 업데이트하세요.

# Test Strategy:
1. 단위 테스트:
   - 올바른 쿼리 구성 및 결과 파싱을 보장하기 위한 SearchService 클래스 테스트 작성
   - 빈 쿼리, 특수 문자 및 긴 검색어와 같은 엣지 케이스 테스트

2. 통합 테스트:
   - 다양한 입력 시나리오로 검색 API 엔드포인트 테스트
   - 페이지네이션 및 결과 제한의 올바른 처리 확인

3. UI 테스트:
   - Flutter 위젯 테스트를 사용하여 SearchBar 및 SearchResultsList 컴포넌트의 동작 확인
   - 모의 Supabase 응답을 사용하여 실시간 업데이트 기능 테스트

4. 성능 테스트:
   - 동시 요청을 처리할 수 있는지 확인하기 위한 검색 API 부하 테스트 수행
   - 다양한 쿼리 복잡성에 대한 검색 응답 시간 측정 및 벤치마킹

5. 사용자 수용성 테스트:
   - 수동 테스트를 위한 다양한 검색 시나리오가 포함된 테스트 계획 작성
   - 검색 결과의 정확성 및 관련성 확인

6. 접근성 테스트:
   - 스크린 리더를 위한 적절한 라벨링을 포함하여 검색 기능이 접근 가능한지 확인

7. 크로스 디바이스 테스트:
   - 다양한 디바이스 크기 및 방향에서 검색 기능 테스트

8. 오류 처리:
   - 검색 실패 또는 네트워크 문제에 대해 적절한 오류 메시지가 표시되는지 확인

9. 분석 검증:
   - 검색 쿼리가 분석 시스템에서 올바르게 추적되고 있는지 확인

10. 회귀 테스트:
    - 새로운 검색 기능이 기존 기능에 부정적인 영향을 미치지 않는지 확인

# Subtasks:
## 1. 아티스트 검색을 위한 UI 컴포넌트 생성 [pending]
### Dependencies: None
### Description: 아티스트 검색 기능을 위한 프론트엔드 컴포넌트 설계 및 구현
### Details:
검색 입력 필드, 결과 표시 영역 및 로딩 인디케이터를 생성합니다. 다양한 화면 크기에 대한 반응형 디자인을 구현합니다.

## 2. 백엔드 검색 기능 구현 [pending]
### Dependencies: None
### Description: 아티스트 검색 요청을 처리하고 결과를 반환하는 서버 측 로직 개발
### Details:
아티스트 검색을 위한 API 엔드포인트 생성, 데이터베이스 쿼리 구현 및 검색 성능 최적화. 페이지네이션 및 필터링 옵션을 포함합니다.

## 3. 실시간 업데이트 통합 [pending]
### Dependencies: 28.1, 28.2
### Description: 사용자가 입력하는 동안 검색 결과에 대한 실시간 업데이트 구현
### Details:
서버에서 클라이언트로 업데이트를 푸시하기 위해 WebSocket 또는 유사한 기술을 사용합니다. API 호출을 제한하기 위해 프론트엔드에서 디바운싱을 구현합니다.

