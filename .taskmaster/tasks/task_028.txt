# Task ID: 28
# Title: 아티스트 검색 기능 구현
# Status: done
# Dependencies: 27
# Priority: medium
# Description: 사용자가 아티스트 이름이나 그룹명으로 검색할 수 있는 포괄적인 아티스트 검색 기능을 개발하고, 공통 모듈로 만들어 재사용 가능하도록 구현하며, 검색 성능을 최적화합니다.
# Details:
1. 재사용 가능한 SearchService 클래스 생성:
   - 아티스트 이름 및 그룹명을 동시에 검색하는 메서드 구현
   - 효율적인 쿼리를 위해 Supabase 전체 텍스트 검색 기능 활용
   - 다른 엔티티 검색에도 사용할 수 있는 공통 모듈로 설계

2. 검색 기능을 위한 UI 컴포넌트 개발:
   - 검색 기능이 있는 SearchBar 위젯 생성
   - 타이핑 중 검색 호출을 최적화하기 위한 디바운싱 구현
   - 결과를 표시하기 위한 SearchResultsList 위젯 설계 및 구현

3. 클라이언트 사이드 검색 성능 최적화:
   - 대용량 결과 세트에 대한 클라이언트 측 페이지네이션 구현
   - 더 빠른 쿼리를 위한 데이터베이스 수준의 적절한 인덱싱 사용
   - 자주 검색되는 용어에 대한 캐싱 메커니즘 구현

4. 데이터 모델 업데이트:
   - 관련 검색 필드를 포함하도록 Artist 모델 수정
   - 검색 결과 처리를 위한 적절한 직렬화/역직렬화 보장

5. UI에서 적절한 오류 처리 및 로딩 상태 구현

6. 사용자 행동에 대한 인사이트를 수집하기 위한 검색 쿼리 분석 추적 추가

7. 공통 검색 모듈 설계:
   - 다양한 엔티티 타입에 대한 검색을 지원하는 인터페이스 설계
   - 검색 결과 형식을 표준화하여 일관된 UI 표시 가능하도록 구현

SearchService 코드 예시:

```dart
class SearchService {
  final SupabaseClient _supabaseClient;

  SearchService(this._supabaseClient);

  Future<List<Artist>> searchArtists(String query) async {
    final response = await _supabaseClient
        .from('artists')
        .select()
        .or('name.ilike.%$query%, group_name.ilike.%$query%')
        .execute();

    if (response.error != null) {
      throw Exception('Failed to search artists: ${response.error!.message}');
    }

    return (response.data as List)
        .map((json) => Artist.fromJson(json))
        .toList();
  }
  
  // 다른 엔티티 타입에 대한 검색 메서드도 추가 가능
  Future<List<T>> searchEntities<T>(String query, String table, T Function(Map<String, dynamic>) fromJson) async {
    // 재사용 가능한 검색 로직 구현
  }
}
```

전체 텍스트 검색 기능을 지원하도록 Supabase 통합을 업데이트하세요.

# Test Strategy:
1. 단위 테스트:
   - 올바른 쿼리 구성 및 결과 파싱을 보장하기 위한 SearchService 클래스 테스트 작성
   - 빈 쿼리, 특수 문자 및 긴 검색어와 같은 엣지 케이스 테스트
   - 아티스트 이름과 그룹명 동시 검색 기능 테스트

2. 통합 테스트:
   - 다양한 입력 시나리오로 검색 기능 테스트
   - 페이지네이션 및 결과 제한의 올바른 처리 확인
   - 공통 모듈로서 다른 엔티티 검색에도 적용 가능한지 테스트

3. UI 테스트:
   - Flutter 위젯 테스트를 사용하여 SearchBar 및 SearchResultsList 컴포넌트의 동작 확인
   - 디바운싱 기능이 올바르게 작동하는지 테스트

4. 성능 테스트:
   - 다양한 크기의 데이터셋에 대한 검색 성능 측정
   - 다양한 쿼리 복잡성에 대한 검색 응답 시간 측정 및 벤치마킹
   - 캐싱 메커니즘의 효율성 테스트

5. 사용자 수용성 테스트:
   - 수동 테스트를 위한 다양한 검색 시나리오가 포함된 테스트 계획 작성
   - 검색 결과의 정확성 및 관련성 확인

6. 접근성 테스트:
   - 스크린 리더를 위한 적절한 라벨링을 포함하여 검색 기능이 접근 가능한지 확인

7. 크로스 디바이스 테스트:
   - 다양한 디바이스 크기 및 방향에서 검색 기능 테스트

8. 오류 처리:
   - 검색 실패 또는 네트워크 문제에 대해 적절한 오류 메시지가 표시되는지 확인

9. 분석 검증:
   - 검색 쿼리가 분석 시스템에서 올바르게 추적되고 있는지 확인

10. 재사용성 테스트:
    - 공통 모듈로서 다른 기능에서 검색 서비스를 재사용할 수 있는지 확인

# Subtasks:
## 1. 아티스트 검색을 위한 UI 컴포넌트 생성 [done]
### Dependencies: None
### Description: 아티스트 검색 기능을 위한 프론트엔드 컴포넌트 설계 및 구현
### Details:
검색 입력 필드, 결과 표시 영역 및 로딩 인디케이터를 생성합니다. 다양한 화면 크기에 대한 반응형 디자인을 구현합니다.
<info added on 2025-06-07T04:35:16.880Z>
아티스트 검색을 위한 UI 컴포넌트 생성 완료:

1. SearchResultsList 제네릭 위젯 생성 (picnic_lib/lib/presentation/widgets/ui/search_results_list.dart):
   - 재사용 가능한 검색 결과 목록 위젯
   - 로딩, 에러, 빈 결과 상태 처리
   - 무한 스크롤 지원 (onLoadMore 콜백)
   - SearchResultCard 기본 카드 위젯 포함

2. EnhancedSearchBox 위젯 생성 (picnic_lib/lib/presentation/common/enhanced_search_box.dart):
   - 기존 CommonSearchBox를 개선한 향상된 검색 박스
   - 디바운싱 기능 내장 (기본 300ms)
   - 검색어 클리어, 자동 포커스 등 편의 기능
   - 커스터마이징 가능한 스타일링 옵션
   - SearchState 헬퍼 클래스로 검색 상태 관리

3. ArtistSearchResultItem 전용 위젯 생성 (picnic_lib/lib/presentation/widgets/ui/artist_search_result_item.dart):
   - 아티스트 검색 결과 전용 아이템 위젯
   - 검색어 하이라이트 기능 (아티스트 이름과 그룹명 모두)
   - 북마크 버튼, 추가 정보 표시 (성별, 생년월일)
   - ArtistSearchResultsList 래퍼 위젯 포함

4. 반응형 디자인 구현:
   - flutter_screenutil 사용으로 다양한 화면 크기 대응
   - 적절한 패딩, 마진, 폰트 크기 설정

5. 접근성 고려:
   - 적절한 색상 대비
   - 터치 영역 크기 최적화
   - 스크린 리더 지원을 위한 구조화
</info added on 2025-06-07T04:35:16.880Z>

## 2. 공통 검색 서비스 구현 [done]
### Dependencies: None
### Description: 아티스트 이름과 그룹명을 동시에 검색하고 재사용 가능한 공통 검색 모듈 개발
### Details:
아티스트 검색을 위한 로직 구현, 데이터베이스 쿼리 최적화 및 검색 성능 개선. 다른 엔티티 타입에도 적용 가능한 공통 인터페이스 설계. 페이지네이션 및 필터링 옵션을 포함합니다.
<info added on 2025-06-07T04:32:54.204Z>
공통 검색 서비스 구현을 완료했습니다:

1. SearchService 클래스를 picnic_lib/lib/core/services/search_service.dart에 생성했습니다:
   - searchArtists 메서드로 아티스트 이름과 그룹명을 동시에 검색할 수 있습니다
   - searchEntities 제네릭 메서드를 통해 다른 엔티티 타입에서도 재사용 가능합니다
   - 캐싱, 유효성 검사, 쿼리 정규화를 위한 유틸리티 메서드를 포함했습니다

2. 기존 vote_artist_list_provider.dart를 업데이트했습니다:
   - SearchService를 import하여 활용
   - fetchArtists 메서드에서 새로운 SearchService.searchArtists 메서드 사용
   - 아티스트 이름과 그룹명을 함께 검색하도록 개선했습니다

3. 검색 쿼리를 개선했습니다:
   - 기존: 아티스트 이름만 검색 (name->>ko.ilike.%$query% 등)
   - 개선: 아티스트 이름 + 그룹명 검색 (artist_group.name->>ko.ilike.%$query% 추가)

4. 재사용성을 확보했습니다:
   - 제네릭 searchEntities 메서드로 다른 엔티티 검색에도 활용 가능
   - 캐시 키 생성, 쿼리 유효성 검사 등 공통 기능 제공
</info added on 2025-06-07T04:32:54.204Z>

## 3. 클라이언트 사이드 검색 최적화 [done]
### Dependencies: 28.1, 28.2
### Description: 사용자 입력에 따른 효율적인 검색 처리 구현
### Details:
검색 호출을 최적화하기 위한 디바운싱 구현. 클라이언트 측 캐싱 메커니즘 구현. 검색 결과의 효율적인 렌더링 및 페이지네이션 처리.
<info added on 2025-06-07T04:37:20.099Z>
# 클라이언트 사이드 검색 최적화 구현 완료

## 캐싱 시스템
- SearchCacheService 구현 (picnic_lib/lib/core/services/search_cache_service.dart)
  - LRU(Least Recently Used) 캐시 알고리즘 적용
  - 메모리 기반 캐싱으로 빠른 검색 결과 제공
  - 최대 100개 항목 저장, 기본 5분 만료 시간 설정
  - 캐시 통계, 패턴 기반 삭제, 만료 항목 정리 기능 추가

## 검색 서비스 개선
- SearchService에 캐싱 기능 통합
  - searchArtists 메서드에 useCache 파라미터 추가
  - 캐시 키 생성 및 조회/저장 로직 구현
  - 캐시 무효화, 정리, 통계 조회 메서드 추가
  - 인기 검색어 프리로딩 기능 구현

## 기존 코드 통합
- vote_artist_list_provider 업데이트로 캐싱 기능 활성화
- 검색 성능 최적화를 통한 사용자 경험 개선

## 성능 최적화 세부 구현
- 디바운싱: EnhancedSearchBox 컴포넌트에 300ms 기본 디바운싱 적용
- 캐싱: 검색 결과 메모리 캐시로 반복 검색 최적화
- 페이지네이션: 무한 스크롤 지원으로 대용량 결과 처리
- 프리로딩: 인기 검색어 미리 캐시 로드

## 메모리 관리
- LRU 알고리즘으로 메모리 사용량 제한
- 만료된 캐시 자동 정리 메커니즘
- 캐시 통계 모니터링 기능 추가
</info added on 2025-06-07T04:37:20.099Z>

## 4. 검색 모듈 재사용성 테스트 [done]
### Dependencies: 28.2
### Description: 개발된 검색 모듈이 다른 기능에서도 재사용 가능한지 검증
### Details:
다양한 엔티티 타입(예: 앨범, 곡 등)에 대한 검색 기능 테스트. 공통 인터페이스의 확장성 및 유연성 검증. 다른 화면에서 검색 모듈 통합 테스트.
<info added on 2025-06-07T04:39:48.715Z>
검색 모듈 재사용성 테스트 완료:

1. 보드 검색에 SearchService 적용:
   - boards_provider.dart에서 기존 직접 쿼리를 SearchService.searchEntities로 교체
   - 아티스트 검색과 동일한 패턴으로 보드 검색 구현
   - additionalFilters 기능으로 보드별 특수 조건 (status='approved', artist_id≠0) 적용

2. SearchService 기능 확장:
   - searchEntities 메서드에 additionalFilters 파라미터 추가
   - 다양한 필터 조건 지원 (eq, neq_, not_, in 등)
   - 캐싱 기능을 제네릭 검색에도 적용

3. 재사용성 검증:
   - 아티스트 검색: 이름 + 그룹명 검색, 북마크 제외 기능
   - 보드 검색: 이름 검색, 상태 필터링, 아티스트 조인
   - 동일한 SearchService로 서로 다른 엔티티 타입 처리 성공

4. 단위 테스트 작성 (picnic_lib/test/core/services/search_service_test.dart):
   - 캐시 키 생성 일관성 테스트
   - 쿼리 유효성 검사 테스트
   - 쿼리 정규화 기능 테스트
   - 캐시 관리 메서드 테스트
   - 다양한 엔티티 타입 파라미터 검증
   - 에러 처리 시나리오 테스트

5. 확장성 확인:
   - 제네릭 타입 지원으로 모든 모델 타입 처리 가능
   - 추가 필터 조건으로 복잡한 쿼리 지원
   - 캐싱 시스템으로 성능 최적화
   - 일관된 API로 개발자 경험 향상

검색 모듈이 성공적으로 재사용 가능한 공통 모듈로 구현되었음을 확인했습니다.
</info added on 2025-06-07T04:39:48.715Z>

