# Task ID: 39
# Title: 투표 신청 다이얼로그 데이터베이스 마이그레이션 실행 및 오류 해결
# Status: pending
# Dependencies: 27
# Priority: high
# Description: PostgreSQL 데이터베이스에 vote_requests 테이블을 생성하는 마이그레이션을 실행하여 투표 신청 다이얼로그에서 발생하는 "relation does not exist" 오류를 해결합니다. 또한 하드코딩된 상태 데이터를 실제 데이터베이스 연동으로 변경하고 개발 중 발생하는 키보드 이벤트 처리 오류에 대한 해결책도 포함합니다. 다이얼로그 UI 개선 및 최적화를 통해 사용자 경험을 향상시킵니다.
# Details:
1. 마이그레이션 파일 검증 및 실행 (완료):
   - vote_request_schema.sql 마이그레이션 실행 완료
   - vote_requests 테이블 생성됨
   - vote_request_users 테이블 생성됨
   - 필요한 인덱스, RLS 정책, 권한 설정 적용됨

2. 마이그레이션 후 테이블 검증:
   - 테이블이 올바르게 생성되었는지 확인하는 SQL 쿼리 작성
   ```sql
   SELECT * FROM information_schema.tables WHERE table_name = 'vote_requests';
   SELECT * FROM information_schema.tables WHERE table_name = 'vote_request_users';
   ```
   - 테이블 구조 확인
   ```sql
   \d vote_requests
   \d vote_request_users
   ```
   - 인덱스 및 RLS 정책 확인
   ```sql
   SELECT * FROM pg_indexes WHERE tablename = 'vote_requests';
   SELECT * FROM pg_policies WHERE tablename = 'vote_requests';
   ```

3. 애플리케이션 코드 수정 (완료):
   - VoteRequestRepository 클래스에 다음 메서드 추가됨:
     - `getArtistApplicationCount()`: 아티스트별 신청 수 조회
     - `getUserApplicationStatus()`: 사용자의 특정 아티스트 신청 상태 조회
     - `getCurrentUserApplications()`: 현재 사용자의 투표별 모든 신청 내역
   - 하드코딩된 상태 데이터를 실제 데이터베이스 연동으로 변경 완료
     - 기존: `['대기중', '승인됨', '거절됨'][(artistName.hashCode % 3)]` (하드코딩)
     - 변경: 실제 데이터베이스에서 상태 조회 및 한글 변환

4. UI 개선 (완료):
   - 현재 신청 리스트: 사용자의 실제 신청 내역 표시
   - 상태별 색상 코딩 (대기중: 오렌지, 승인: 초록, 거절: 빨강 등)
   - 신청 날짜 표시
   - 검색 결과: 실제 아티스트별 신청 수/상태 표시
   - 다이얼로그 크기 확대: 높이 600h → 700h (100h 증가)
   - 패딩 조정: vertical 24h → 16h (더 넓은 화면 활용)
   - 검색 결과 제한 확대: 10개 → 50개 (5배 증가)

5. 데이터 로딩 최적화 (완료):
   - 초기 로딩 시 사용자 신청 내역 조회
   - 검색 시 각 아티스트별 실시간 데이터 조회
   - 오류 처리 및 기본값 설정

6. 오류 처리 개선:
   - 테이블이 존재하지 않을 때 더 명확한 오류 메시지를 제공하도록 코드 수정
   - 개발 환경에서 자동으로 마이그레이션을 확인하고 필요시 실행하는 메커니즘 구현 검토

7. 투표 신청 다이얼로그 테스트:
   - 마이그레이션 후 투표 신청 다이얼로그가 정상적으로 작동하는지 확인
   - 데이터 저장 및 조회 기능 테스트
   - 실제 데이터베이스 연동 후 상태 표시 확인

8. 키보드 이벤트 처리 오류 해결:
   - 개발 중 발생하는 KeyUpEvent 및 HardwareKeyboard assertion 실패 문제 해결
   - Backspace 키 이벤트 처리 시 physical key 상태 불일치 문제 해결
   
   a. 즉시 해결책 적용:
      - Hot Restart 수행 (`R` 키)
      - 앱 완전 종료 후 재시작
      - 텍스트 필드 포커스 해제 후 재시도
   
   b. 근본적 해결책 구현:
      - Flutter clean 실행: `flutter clean && flutter pub get`
      - IDE 재시작 (VS Code/Android Studio)
      - 필요시 Flutter SDK 업데이트 검토
   
   c. 임시 회피 방법 문서화:
      - Backspace 대신 텍스트 선택 후 삭제
      - 소프트웨어 키보드 사용
      - 다른 텍스트 필드로 포커스 이동

9. 신청 버튼 노출 조건 개선 (완료):
   - 신청 버튼이 숨겨지는 경우:
     * 거절됨 상태
     * 이미 vote_item에 등록된 경우 ("이미 등록됨" 표시)
     * 내가 이미 신청한 경우 (대기중, 승인됨, 진행중)
   - 신청 버튼이 표시되는 경우: "신청 가능" 상태일 때만

10. vote_item 등록 상태 확인 기능 (완료):
    - `_checkIfArtistInVoteItems()` 메서드 구현
    - vote_items 테이블에서 아티스트 등록 여부 실시간 확인
    - `_artistAlreadyInVote` Map으로 상태 관리

11. 상태별 시각적 개선 (완료):
    - 색상 코딩: 각 상태별 고유 색상과 테두리
      * 이미 등록됨: 파란색
      * 대기중: 오렌지색
      * 승인됨: 초록색
      * 거절됨: 빨간색
      * 진행중: 프라이머리 색상
    - 버튼 텍스트: 상태에 맞는 적절한 텍스트 표시
    - 비활성화 버튼: 신청 불가능한 경우 회색 비활성화 버튼

# Test Strategy:
1. 마이그레이션 실행 검증 (완료):
   - 마이그레이션 스크립트가 성공적으로 실행됨
   - vote_requests 및 vote_request_users 테이블이 생성됨
   - 필요한 인덱스, RLS 정책, 권한 설정이 적용됨

2. 테이블 구조 검증:
   - 테이블이 올바르게 생성되었는지 확인
   ```sql
   SELECT EXISTS (
     SELECT FROM information_schema.tables 
     WHERE table_schema = 'public' AND table_name = 'vote_requests'
   );
   SELECT EXISTS (
     SELECT FROM information_schema.tables 
     WHERE table_schema = 'public' AND table_name = 'vote_request_users'
   );
   ```
   - 테이블 구조가 예상대로인지 확인 (모든 필요한 컬럼이 존재하는지)
   - RLS 정책이 올바르게 적용되었는지 확인

3. 데이터베이스 연동 테스트:
   - 추가된 VoteRequestRepository 메서드 테스트:
     a. `getArtistApplicationCount()`: 아티스트별 신청 수가 정확히 반환되는지 확인
     b. `getUserApplicationStatus()`: 사용자의 신청 상태가 올바르게 조회되는지 확인
     c. `getCurrentUserApplications()`: 현재 사용자의 모든 신청 내역이 정확히 조회되는지 확인
   - 하드코딩 제거 확인: 실제 데이터베이스 값이 UI에 반영되는지 검증

4. UI 개선 테스트:
   - 상태별 색상 코딩이 올바르게 적용되는지 확인
   - 신청 날짜가 정확히 표시되는지 확인
   - 검색 결과에 실제 아티스트별 신청 수와 상태가 정확히 표시되는지 확인
   - 다이얼로그 크기가 700h로 정확히 확대되었는지 확인
   - 패딩이 16h로 조정되어 화면이 효율적으로 활용되는지 확인
   - 검색 결과가 50개까지 표시되는지 확인

5. 애플리케이션 테스트:
   - 개발 환경에서 투표 신청 다이얼로그를 열고 이전에 발생했던 오류가 해결되었는지 확인
   - 다음 시나리오를 테스트:
     a. 투표 신청 다이얼로그 열기
     b. 필요한 정보 입력
     c. 신청 제출
     d. 신청 내역 조회
     e. 상태 변경 시 UI 업데이트 확인

6. 데이터 무결성 테스트:
   - 투표 신청 데이터가 올바르게 저장되는지 확인
   - 중복 신청 방지 로직이 제대로 작동하는지 확인
   - 필수 필드 누락 시 적절한 오류 메시지가 표시되는지 확인

7. 데이터 로딩 최적화 테스트:
   - 초기 로딩 성능 측정
   - 검색 시 응답 시간 측정
   - 오류 상황에서 기본값이 올바르게 적용되는지 확인

8. 오류 처리 테스트:
   - 데이터베이스 연결 문제 시뮬레이션하여 오류 처리가 적절한지 확인
   - 네트워크 지연 상황에서의 동작 테스트

9. 회귀 테스트:
   - 투표 신청 관련 다른 기능들이 정상적으로 작동하는지 확인
   - 특히 Task 27에서 구현된 VoteRequest 및 VoteRequestUser 모델과의 통합이 올바르게 작동하는지 확인

10. 키보드 이벤트 처리 오류 테스트:
    - 각 해결책 적용 후 키보드 이벤트 처리가 정상화되었는지 확인
    - 특히 Backspace 키 사용 시 발생하는 문제가 해결되었는지 테스트
    - 다양한 텍스트 입력 필드에서 키보드 이벤트 테스트
    - 개발 환경과 실제 배포 환경에서의 차이점 확인
    - 다른 키보드 관련 기능에 영향이 없는지 확인

11. 신청 버튼 노출 조건 테스트:
    - 다양한 상태(거절됨, 이미 등록됨, 대기중, 승인됨, 진행중)에서 신청 버튼이 적절히 표시/숨겨지는지 확인
    - "신청 가능" 상태에서만 신청 버튼이 활성화되는지 확인

12. vote_item 등록 상태 확인 기능 테스트:
    - `_checkIfArtistInVoteItems()` 메서드가 정확히 작동하는지 확인
    - vote_items 테이블에 아티스트가 등록된 경우와 등록되지 않은 경우 모두 테스트
    - `_artistAlreadyInVote` Map이 상태를 올바르게 관리하는지 확인

13. 상태별 시각적 표현 테스트:
    - 각 상태별 색상 코딩이 디자인 명세에 맞게 적용되는지 확인
    - 버튼 텍스트가 상태에 맞게 표시되는지 확인
    - 비활성화 버튼이 회색으로 표시되는지 확인

# Subtasks:
## 39.1. 마이그레이션 파일 검증 및 실행 [done]
### Dependencies: None
### Description: 
### Details:


## 39.2. 테이블 생성 확인 및 애플리케이션 코드 수정 [done]
### Dependencies: None
### Description: 
### Details:


## 39.3. 투표 신청 다이얼로그 테스트 [pending]
### Dependencies: None
### Description: 
### Details:


## 39.4. 키보드 이벤트 처리 오류 해결 방법 구현 [pending]
### Dependencies: None
### Description: 
### Details:


## 39.5. 키보드 이벤트 오류 해결책 문서화 [pending]
### Dependencies: None
### Description: 
### Details:


## 39.6. RLS 정책 및 권한 설정 검증 [pending]
### Dependencies: None
### Description: 
### Details:


## 39.7. vote_request_users 테이블 연동 테스트 [pending]
### Dependencies: None
### Description: 
### Details:


## 39.8. UI 상태 표시 개선 및 색상 코딩 검증 [done]
### Dependencies: None
### Description: 
### Details:


## 39.9. 데이터 로딩 최적화 성능 테스트 [pending]
### Dependencies: None
### Description: 
### Details:


## 39.10. VoteRequestRepository 추가 메서드 단위 테스트 [pending]
### Dependencies: None
### Description: 
### Details:


## 39.11. 다이얼로그 크기 및 패딩 조정 구현 [done]
### Dependencies: None
### Description: 
### Details:


## 39.12. 검색 결과 제한 확대 (10개→50개) 구현 [done]
### Dependencies: None
### Description: 
### Details:


## 39.13. 신청 버튼 노출 조건 개선 구현 [done]
### Dependencies: None
### Description: 
### Details:


## 39.14. vote_item 등록 상태 확인 기능 구현 [done]
### Dependencies: None
### Description: 
### Details:


## 39.15. 상태별 시각적 개선 테스트 [pending]
### Dependencies: None
### Description: 
### Details:


## 40.9. 신청 가능 상태 텍스트 제거 및 UI 간소화 [done]
### Dependencies: None
### Description: 투표 신청 다이얼로그에서 불필요한 "신청 가능" 상태 텍스트를 제거하고 신청 버튼만 조건부 표시하도록 UI를 간소화합니다.
### Details:
사용자 피드백을 반영하여 불필요한 상태 텍스트 표시를 제거하고 더 직관적인 UI로 개선

## 41.9. 다이얼로그 크기 확대 및 화면 활용 최적화 [done]
### Dependencies: None
### Description: 투표 신청 다이얼로그의 크기를 화면의 95%까지 확대하여 더 많은 정보를 한 번에 볼 수 있도록 개선합니다.
### Details:
사용자 피드백을 반영하여 다이얼로그 크기를 화면을 거의 채울 정도로 크게 만듦

