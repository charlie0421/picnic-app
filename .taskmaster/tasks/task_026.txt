# Task ID: 26
# Title: 투표 후보 신청을 위한 데이터베이스 스키마 설계 및 마이그레이션 생성
# Status: done
# Dependencies: None
# Priority: high
# Description: 투표 후보 신청 기능을 위한 데이터베이스 스키마를 설계하고 구현합니다. 필요한 테이블, 관계, 인덱스, 제약조건 및 행 수준 보안(RLS) 정책 생성을 포함합니다.
# Details:
1. 'vote_applications' 테이블 생성:
   - 필드: id (UUID, 기본 키), vote_id (votes 테이블에 대한 외래 키), title, description, created_at, updated_at
   - votes 테이블을 참조하는 외래 키 제약조건 추가
   - 성능을 위해 vote_id에 인덱스 생성

2. 'vote_application_users' 테이블 생성:
   - 필드: id (UUID, 기본 키), vote_application_id (vote_applications 테이블에 대한 외래 키), user_id (users 테이블에 대한 외래 키), status (열거형: pending, approved, rejected), created_at, updated_at
   - vote_applications 및 users 테이블을 참조하는 외래 키 제약조건 추가
   - 고유성 및 성능을 위해 (vote_application_id, user_id)에 복합 인덱스 생성

3. 필요한 인덱스 및 제약조건 추가:
   - 중복 신청을 방지하기 위해 vote_application_users 테이블의 (vote_id, user_id)에 고유 제약조건 생성
   - 유효한 값을 보장하기 위해 status 필드에 체크 제약조건 추가

4. RLS 정책 구현:
   - vote_applications 테이블에 대해:
     * 모든 인증된 사용자에게 읽기 액세스 권한 부여
     * 투표 생성자 또는 관리자에게만 쓰기 액세스 권한 부여
   - vote_application_users 테이블에 대해:
     * 투표 생성자, 관리자 및 신청 사용자에게 읽기 액세스 권한 부여
     * 투표 생성자 또는 관리자에게만 쓰기 액세스 권한 부여

5. 마이그레이션 파일 생성:
   - Supabase CLI를 사용하여 마이그레이션 파일 생성
   - 테이블 생성, 인덱스, 제약조건 및 RLS 정책에 대한 SQL 명령 구현
   - 프로덕션에 적용하기 전에 개발 환경에서 마이그레이션 테스트

6. API 및 백엔드 서비스 업데이트:
   - 새 테이블과 상호 작용하기 위해 기존 API 엔드포인트 수정 또는 새 엔드포인트 생성
   - 데이터베이스 작업에 대한 적절한 오류 처리 및 유효성 검사 보장

7. 스키마 변경 문서화:
   - 새 테이블 구조 및 관계로 프로젝트 문서 업데이트
   - 새 테이블에 대한 일반적인 쿼리 및 작업 예제 제공

# Test Strategy:
1. 단위 테스트:
   - 두 개의 새 테이블에 대한 데이터베이스 작업(CRUD)에 대한 단위 테스트 작성
   - 제약조건 위반 테스트(예: 중복 신청, 유효하지 않은 상태 값)
   - 외래 키 관계가 올바르게 적용되는지 확인

2. 통합 테스트:
   - 새 테이블과 상호 작용하는 API 엔드포인트 테스트
   - 관련 테이블(votes, vote_applications, vote_application_users) 간의 데이터 무결성 확인

3. RLS 정책 테스트:
   - 다양한 사용자 역할(관리자, 투표 생성자, 일반 사용자)에 대한 테스트 케이스 생성
   - 각 역할에 대해 읽기 및 쓰기 권한이 올바르게 적용되는지 확인
   - 엣지 케이스 테스트(예: 사용자가 다른 사용자의 신청을 수정하려고 시도)

4. 마이그레이션 테스트:
   - 테스트 데이터베이스에 마이그레이션을 적용하고 모든 테이블, 인덱스 및 제약조건이 올바르게 생성되었는지 확인
   - 롤백을 수행하고 데이터베이스가 이전 상태로 돌아가는지 확인

5. 성능 테스트:
   - 특히 새 테이블과 기존 테이블 간의 JOIN을 포함하는 작업에 대한 쿼리 성능 테스트 수행
   - 쿼리 실행 계획을 분석하여 인덱스 효과 확인

6. 데이터 무결성 테스트:
   - 참조 무결성을 보장하기 위해 연쇄 삭제 및 업데이트 테스트
   - 제약조건이 유효하지 않은 데이터 삽입을 방지하는지 확인

7. API 및 서비스 테스트:
   - 새 스키마와 상호 작용하는 모든 API 엔드포인트 및 서비스 테스트
   - 입력 데이터의 적절한 오류 처리 및 유효성 검사 확인

8. 사용자 수용 테스트:
   - 새 스키마로 테스트 환경을 만들고 이해관계자가 기능이 요구 사항을 충족하는지 확인
   - 투표 후보 신청 프로세스를 종단간 테스트

# Subtasks:
## 1. 데이터베이스 테이블 및 관계 정의 [done]
### Dependencies: None
### Description: 모든 필요한 테이블과 그 관계에 대한 포괄적인 스키마 설계 생성
### Details:
모든 필요한 테이블을 식별하고, 기본 키와 외래 키를 정의하며, 테이블 간의 관계를 설정합니다. 데이터 유형, 제약조건 및 정규화 원칙을 고려하세요.
<info added on 2025-06-06T16:06:40.609Z>
# 데이터베이스 스키마 설계

## 기존 데이터베이스 구조
- vote: 투표 정보 (id, vote_title, vote_category, start_at, stop_at 등)
- vote_item: 투표 항목 (id, vote_id, member_id, vote_total)
- vote_pick: 사용자 투표 선택 (id, vote_id, vote_item_id, users_id, point_amount)
- vote_comment: 투표 댓글
- mystar_member: 아티스트/멤버 정보 (id, name_ko, name_en, group_id, gender, image)
- mystar_group: 그룹 정보 (id, name_ko, name_en, image)

## 투표 후보 신청을 위한 새 테이블 설계

### vote_applications 테이블
- id (UUID, 기본 키)
- vote_id (integer, votes 테이블 외래 키)
- title (varchar(255), 신청 제목)
- description (text, 신청 설명)
- status (varchar(50), 신청 상태: pending, approved, rejected)
- created_at (timestamp)
- updated_at (timestamp)

### vote_application_users 테이블
- id (UUID, 기본 키)
- vote_application_id (UUID, vote_applications 테이블 외래 키)
- user_id (UUID, auth.users 테이블 외래 키)
- artist_name (varchar(255), 신청한 아티스트명)
- artist_group (varchar(255), 아티스트 그룹명, nullable)
- reason (text, 신청 이유)
- status (varchar(50), 신청 상태: pending, approved, rejected)
- created_at (timestamp)
- updated_at (timestamp)

## 관계 설정
- vote_applications.vote_id → vote.id (외래 키)
- vote_application_users.vote_application_id → vote_applications.id (외래 키)
- vote_application_users.user_id → auth.users.id (외래 키)

## 제약조건
- (vote_id, user_id) 복합 고유 제약조건으로 중복 신청 방지
- status 필드에 체크 제약조건 (pending, approved, rejected만 허용)
</info added on 2025-06-06T16:06:40.609Z>

## 2. 데이터베이스 인덱스 구현 [done]
### Dependencies: 26.1
### Description: 쿼리 성능을 최적화하기 위한 적절한 인덱스 설계 및 생성
### Details:
일반적인 쿼리 패턴을 분석하고 자주 액세스하는 열에 인덱스를 생성합니다. 다중 열 쿼리에 대한 복합 인덱스를 고려하고 읽기 및 쓰기 성능 간의 적절한 균형을 보장합니다.
<info added on 2025-06-06T16:07:17.874Z>
## 성능 최적화를 위한 인덱스 전략

### vote_applications 테이블 인덱스:
1. 기본 키 인덱스: id (UUID) - 자동 생성
2. 외래 키 인덱스: vote_id - 특정 투표의 신청 목록 조회 최적화
3. 상태별 조회 인덱스: status - 상태별 신청 필터링 최적화
4. 복합 인덱스: (vote_id, status) - 특정 투표의 특정 상태 신청 조회 최적화
5. 시간순 정렬 인덱스: created_at - 신청 시간순 정렬 최적화

### vote_application_users 테이블 인덱스:
1. 기본 키 인덱스: id (UUID) - 자동 생성
2. 외래 키 인덱스: vote_application_id - 특정 신청의 사용자 목록 조회
3. 외래 키 인덱스: user_id - 특정 사용자의 신청 목록 조회
4. 복합 고유 인덱스: (vote_application_id, user_id) - 중복 신청 방지 및 조회 최적화
5. 아티스트명 검색 인덱스: artist_name - 아티스트명으로 검색 최적화
6. 복합 인덱스: (user_id, status) - 사용자별 상태별 신청 조회 최적화
7. 시간순 정렬 인덱스: created_at - 신청 시간순 정렬 최적화

### 추가 고려사항:
- 부분 인덱스: status가 'pending'인 경우만 인덱싱하여 공간 절약
- 텍스트 검색 인덱스: artist_name에 대한 GIN 인덱스로 부분 문자열 검색 지원
- 복합 인덱스 순서: 선택도가 높은 컬럼을 앞에 배치
</info added on 2025-06-06T16:07:17.874Z>

## 3. 행 수준 보안(RLS) 정책 설정 [done]
### Dependencies: 26.1
### Description: 행 수준에서 데이터 액세스 제어를 보장하기 위한 RLS 정책 구현
### Details:
액세스 제어가 필요한 각 테이블에 대한 RLS 정책을 정의합니다. 사용자 액세스 권한을 결정하는 함수를 만들고 관련 테이블에 적용합니다. 적절한 데이터 격리를 보장하기 위해 정책을 철저히 테스트합니다.
<info added on 2025-06-06T16:07:49.665Z>
## 행 수준 보안(RLS) 정책 설계

### vote_applications 테이블 RLS 정책:

1. **읽기 정책 (SELECT)**:
   - 모든 인증된 사용자가 승인된 신청(status = 'approved') 조회 가능
   - 투표 생성자는 해당 투표의 모든 신청 조회 가능
   - 관리자는 모든 신청 조회 가능

2. **생성 정책 (INSERT)**:
   - 인증된 사용자만 신청 생성 가능
   - 투표가 신청 가능한 상태(예: 진행 중 또는 예정)일 때만 생성 가능

3. **수정 정책 (UPDATE)**:
   - 투표 생성자만 신청 상태 변경 가능
   - 관리자는 모든 신청 수정 가능

4. **삭제 정책 (DELETE)**:
   - 투표 생성자와 관리자만 삭제 가능

### vote_application_users 테이블 RLS 정책:

1. **읽기 정책 (SELECT)**:
   - 사용자는 자신의 신청만 조회 가능
   - 투표 생성자는 해당 투표의 모든 사용자 신청 조회 가능
   - 관리자는 모든 사용자 신청 조회 가능

2. **생성 정책 (INSERT)**:
   - 인증된 사용자만 자신의 신청 생성 가능
   - 동일한 투표에 대한 중복 신청 방지

3. **수정 정책 (UPDATE)**:
   - 사용자는 자신의 신청만 수정 가능 (pending 상태일 때만)
   - 투표 생성자는 신청 상태 변경 가능
   - 관리자는 모든 신청 수정 가능

4. **삭제 정책 (DELETE)**:
   - 사용자는 자신의 신청만 삭제 가능 (pending 상태일 때만)
   - 투표 생성자와 관리자는 모든 신청 삭제 가능

### 보안 함수 정의:
- is_vote_creator(vote_id): 현재 사용자가 투표 생성자인지 확인
- is_admin(): 현재 사용자가 관리자인지 확인
- is_vote_application_open(vote_id): 투표가 신청 가능한 상태인지 확인
</info added on 2025-06-06T16:07:49.665Z>

## 4. 데이터베이스 마이그레이션 스크립트 생성 [done]
### Dependencies: 26.1, 26.2, 26.3
### Description: 스키마 변경 및 보안 정책을 적용하기 위한 마이그레이션 스크립트 개발
### Details:
테이블 생성, 인덱스 추가 및 RLS 정책 구현을 위한 SQL 스크립트를 작성합니다. 스크립트가 멱등성을 가지고 오류 없이 여러 번 실행될 수 있도록 합니다. 각 마이그레이션에 대한 롤백 스크립트를 포함합니다.
<info added on 2025-06-06T16:14:42.231Z>
# 마이그레이션 스크립트 생성 및 적용 완료

## 완료된 작업:
1. **테이블명 변경**: 사용자 제안에 따라 더 명확한 이름으로 변경
   - `vote_applications` → `vote_item_requests`
   - `vote_application_users` → `vote_item_request_users`

2. **마이그레이션 파일 생성**: `20250606160810_vote_application_schema.sql`
   - 두 개의 새 테이블 생성 (vote_item_requests, vote_item_request_users)
   - 모든 필요한 제약조건 및 외래 키 설정
   - 성능 최적화를 위한 인덱스 생성
   - 아티스트명 검색을 위한 GIN 인덱스 포함

3. **보안 함수 구현**:
   - `is_vote_creator()`: 투표 생성자 확인
   - `is_admin()`: 관리자 권한 확인  
   - `is_vote_item_request_open()`: 투표 신청 가능 상태 확인

4. **RLS 정책 설정**:
   - 각 테이블별 CRUD 작업에 대한 세밀한 권한 제어
   - 사용자별, 역할별 데이터 접근 제한
   - 보안 함수를 활용한 동적 권한 검증

5. **데이터베이스 적용 완료**:
   - Supabase 원격 데이터베이스에 성공적으로 마이그레이션 적용
   - 모든 테이블, 인덱스, 함수, RLS 정책이 정상 생성됨

## 생성된 테이블 구조:
- **vote_item_requests**: 투표별 아이템 신청 관리
- **vote_item_request_users**: 사용자별 아티스트 신청 상세 정보
</info added on 2025-06-06T16:14:42.231Z>

## 5. 데이터베이스 변경사항을 API와 통합 [done]
### Dependencies: 26.4
### Description: 새 데이터베이스 스키마 및 보안 정책과 함께 작동하도록 API 엔드포인트 업데이트
### Details:
새 테이블 구조 및 관계에 맞게 기존 API 엔드포인트를 수정합니다. 업데이트된 스키마에 필요한 새 엔드포인트를 구현합니다. 모든 API 호출이 RLS 정책을 존중하고 사용자 권한에 따라 적절한 데이터를 반환하는지 확인합니다.
<info added on 2025-06-06T16:17:48.656Z>
## 완료된 작업:
1. **새로운 Edge Function 생성**: `vote-item-request`
   - 투표 아이템 신청을 위한 RESTful API 엔드포인트 구현
   - 파일 위치: `supabase/functions/vote-item-request/index.ts`

2. **API 엔드포인트 구현**:
   - `POST /vote-item-request`: 새 아이템 신청 생성
   - `GET /vote-item-request`: 모든 승인된 신청 조회
   - `GET /vote-item-request/{id}`: 특정 신청 조회
   - `GET /vote-item-request/vote/{vote_id}`: 특정 투표의 모든 신청 조회
   - `GET /vote-item-request/user/{user_id}`: 특정 사용자의 모든 신청 조회
   - `PUT /vote-item-request/{id}`: 신청 상태 업데이트 (관리자용)
   - `DELETE /vote-item-request/{id}`: 신청 삭제

3. **보안 및 인증**:
   - Supabase Auth를 통한 사용자 인증 확인
   - RLS 정책과 연동하여 데이터 접근 제어
   - CORS 헤더 설정으로 브라우저 호환성 확보

4. **데이터 검증 및 오류 처리**:
   - 필수 필드 검증 (vote_id, title, artist_name)
   - 투표 존재 여부 확인
   - 트랜잭션 롤백 처리 (신청 생성 실패 시)
   - 상세한 오류 메시지 및 HTTP 상태 코드 반환

5. **데이터베이스 연동**:
   - 새로 생성된 `vote_item_requests` 및 `vote_item_request_users` 테이블과 완전 연동
   - JOIN 쿼리를 통한 관련 데이터 조회 (투표 정보, 사용자 정보 포함)
   - 적절한 정렬 및 필터링 적용

API가 새로운 데이터베이스 스키마와 완전히 통합되어 투표 아이템 신청 기능을 위한 백엔드 인프라가 구축되었습니다.
</info added on 2025-06-06T16:17:48.656Z>

## 6. 작업 제목 한글 번역 적용 [done]
### Dependencies: None
### Description: 작업 제목을 한글로 번역하여 문서 및 UI에 적용
### Details:
영문 제목 'Design Database Schema and Create Migration for Vote Candidate Application'을 한글로 '투표 후보 신청을 위한 데이터베이스 스키마 설계 및 마이그레이션 생성'으로 번역하여 프로젝트 문서, UI 및 관련 자료에 적용합니다. 이 번역은 내부 참조용으로만 사용하고 시스템 내 실제 ID는 변경하지 않습니다.
<info added on 2025-06-06T16:18:17.144Z>
## 완료된 작업:
1. **작업 제목 번역**: 
   - 영문: "Design Database Schema and Create Migration for Vote Candidate Application"
   - 한글: "투표 후보 신청을 위한 데이터베이스 스키마 설계 및 마이그레이션 생성"

2. **테이블명 한글화 반영**:
   - 사용자 제안에 따라 `applications` → `item_requests`로 변경
   - 최종 테이블명: `vote_item_requests`, `vote_item_request_users`
   - 마이그레이션 파일 내 주석도 "투표 아이템 신청"으로 업데이트

3. **문서 및 코드 주석 한글화**:
   - 마이그레이션 파일 내 모든 주석을 한글로 작성
   - API 함수 내 주석도 한글로 작성
   - 완료 메시지: "투표 아이템 신청 스키마 마이그레이션이 성공적으로 완료되었습니다."

4. **프로젝트 문서 일관성**:
   - 모든 관련 문서에서 일관된 한글 용어 사용
   - "투표 후보 신청" → "투표 아이템 신청"으로 용어 통일
   - 기술 문서와 사용자 대면 UI에서 동일한 용어 사용

한글 번역이 모든 관련 파일과 문서에 일관되게 적용되어 한국어 사용자를 위한 명확한 용어 체계가 구축되었습니다.
</info added on 2025-06-06T16:18:17.144Z>

