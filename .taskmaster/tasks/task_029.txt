# Task ID: 29
# Title: 투표 상세 페이지에 신청 버튼 추가
# Status: pending
# Dependencies: 27
# Priority: high
# Description: 예정된 투표와 진행 중인 투표에만 나타나는 신청 버튼을 투표 상세 페이지에 구현하고, 인증되지 않은 사용자를 위한 로그인 연동 기능을 포함합니다.
# Details:
1. UI 구현:
   - 투표 상세 페이지에 신청 버튼 추가
   - 투표 상태가 '예정됨' 또는 '진행 중'일 때만 버튼 표시
   - 투표 상태가 '완료됨'일 때는 버튼을 완전히 숨김
   - 기존 디자인 시스템에 맞게 버튼 스타일링
   - 기존 UI 레이아웃 내에 버튼을 적절히 배치

2. 조건부 렌더링 로직:
   - 투표 상태에 따른 조건부 렌더링 구현
   - 버튼 가시성을 결정하는 getter 또는 계산된 속성 추가
   - 투표 상태 변경 시 적절한 반응성 보장

3. 인증 통합:
   - 신청 처리 전 사용자 인증 상태 확인
   - 사용자가 로그인하지 않은 경우 로그인 흐름 트리거
   - 로그인 성공 후 투표 상세 페이지로 복귀
   - 로그인 완료 후 사용자의 신청 의도 유지

4. 신청 제출:
   - 버튼 클릭 핸들러를 VoteApplicationRepository에 연결
   - 제출 중 로딩 상태 표시
   - 성공 및 오류 상태 적절히 처리
   - 기존 신청 확인을 통한 중복 신청 방지

5. UI 피드백:
   - 성공적인 신청 후 적절한 성공 메시지 표시
   - 실패한 신청에 대한 오류 메시지 표시
   - 사용자의 신청 상태를 반영하도록 UI 업데이트

6. UI 수정:
   - 새 버튼을 수용하도록 기존 투표 상세 페이지 레이아웃 조정
   - 추가된 버튼으로 반응형 디자인이 올바르게 작동하는지 확인
   - 새 UI 요소에 대한 접근성 표준 유지

# Test Strategy:
1. 단위 테스트:
   - 다양한 투표 상태에 대한 조건부 렌더링 로직 테스트
   - 인증 확인 기능 검증
   - 신청 제출 로직 및 오류 처리 테스트

2. 통합 테스트:
   - 예정된 투표와 진행 중인 투표에만 버튼이 나타나는지 확인
   - 완료된 투표에서는 버튼이 숨겨지는지 확인
   - 인증되지 않은 사용자가 버튼을 클릭할 때 로그인 흐름 통합 테스트
   - 인증 후 신청 제출이 올바르게 작동하는지 확인

3. UI 테스트:
   - 다양한 화면 크기에서 버튼 스타일링 및 위치 확인
   - 접근성 준수 확인(대비, 탭 대상, 스크린 리더 지원)
   - 다양한 상태(로딩, 성공, 오류)에 대한 UI 피드백 테스트

4. 사용자 흐름 테스트:
   - 투표 보기에서 성공적인 신청까지의 전체 사용자 여정 테스트
   - 로그인 및 반환 흐름이 사용자 컨텍스트를 유지하는지 확인
   - 오류 시나리오 및 복구 경로 테스트

5. 엣지 케이스:
   - 사용자가 이미 신청한 경우의 동작 테스트
   - 제출 중 네트워크 오류 처리 확인
   - 사용자가 페이지에 있는 동안 투표 상태가 변경될 때의 동작 테스트

# Subtasks:
## 1. 신청 버튼 UI 구현 [done]
### Dependencies: None
### Description: 투표 상세 페이지에 신청 버튼의 사용자 인터페이스 설계 및 구현
### Details:
시각적으로 매력적이고 사용자 친화적인 버튼 디자인 생성, 투표 상세 페이지에 적절한 배치 보장, 다양한 화면 크기에 대한 반응형 동작 구현
<info added on 2025-06-09T09:53:24.623Z>
## 분석 및 구현 계획

### 페이지 분석
- 투표 상세 페이지(vote_detail_page.dart) 구조 분석 완료
- 투표 상태 조건부 렌더링 로직 파악:
  - isEnded: 투표 종료 상태 
  - isUpcoming: 투표 예정 상태
  - 신청 버튼은 !isEnded && !isUpcoming 조건에서만 표시되어야 함

### 코드 분석
- `_buildVoteInfo` 메소드에서 투표 정보를 렌더링하는 구조 확인
- 현재 `isEnded` 조건에서 ShareSection을 표시하는 로직 존재
- 신청 버튼 배치 위치: 투표 정보 섹션 하단이 적합

### 구현 단계
1. 신청 버튼 위젯 생성
2. 조건부 렌더링 로직 추가 (!isEnded && !isUpcoming)
3. 기존 UI 레이아웃에 적절한 배치
4. 디자인 가이드라인에 맞는 스타일링 적용
</info added on 2025-06-09T09:53:24.623Z>
<info added on 2025-06-09T09:55:49.264Z>
## 다국어 키 정의 완료

### 신청 버튼용 다국어 키:
- 키: `button_apply_for_vote`
- 영어: "Apply for Vote"
- 한국어: "투표 신청하기"
- 일본어: "投票に申請する"

### 구현 완료 사항:
1. ✅ 신청 버튼 UI 구현 완료
2. ✅ 조건부 렌더링 로직 추가 (!isEnded && !isUpcoming)
3. ✅ 기존 UI 레이아웃에 적절한 배치
4. ✅ 스타일링 적용 (그라데이션, 그림자, 패딩 등)
5. ✅ 인증 상태 확인 로직 구현
6. ✅ 로그인 다이얼로그 연동

### 버튼 스타일:
- 그라데이션 배경 (commonGradient 사용)
- 24px 둥근 모서리
- 그림자 효과
- 48px 높이
- 전체 너비에서 32px 수평 패딩

### 동작:
- 로그인된 사용자: 임시 메시지 표시 (추후 신청 다이얼로그로 교체 예정)
- 미로그인 사용자: 로그인 다이얼로그 표시
</info added on 2025-06-09T09:55:49.264Z>
<info added on 2025-06-09T09:58:31.252Z>
## 조건부 렌더링 수정 완료

### 수정된 조건부 렌더링:
- **이전**: `!isEnded && !isUpcoming` (진행 중인 투표만)
- **현재**: `!isEnded` (예정된 투표 + 진행 중인 투표)

### 수정 이유:
- 요구사항: "예정된 투표와 진행 중인 투표에만 신청 버튼 표시"
- 이전 코드는 예정된 투표(isUpcoming=true)를 제외하고 있었음
- 수정 후: 종료되지 않은 모든 투표(예정 + 진행 중)에서 신청 버튼 표시

### 최종 조건부 로직:
```dart
if (!isEnded && !_isSaving) // 예정된 투표 + 진행 중인 투표
```

### 빌드 테스트:
- ✅ Flutter analyze 통과 (문법 오류 없음)
- 🔄 APK 빌드 진행 중 (백그라운드)

### Crowdin 다국어 키:
- **키**: `button_apply_for_vote`
- **한국어**: "투표 신청하기"
- **영어**: "Apply for Vote"  
- **일본어**: "投票に申請する"
</info added on 2025-06-09T09:58:31.252Z>

## 2. 신청 버튼 로직 통합 [pending]
### Dependencies: 29.1
### Description: 신청 버튼 기능을 위한 백엔드 로직 및 프론트엔드 통합 구현
### Details:
버튼을 적절한 API 엔드포인트에 연결, 사용자 상호작용 처리, 오류 처리 구현, 신청 상태에 따른 UI 업데이트

