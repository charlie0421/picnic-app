# Task ID: 37
# Title: 통합 로깅 시스템 도입 (AppLogger)
# Status: pending
# Dependencies: None
# Priority: medium
# Description: 앱 전반에 걸쳐 사용할 수 있는 통합 로깅 시스템을 구현합니다. 디버그, 정보, 경고, 오류 레벨의 로그를 지원하고, 개발 환경에서는 콘솔 출력, 프로덕션 환경에서는 외부 로깅 서비스 연동을 포함합니다.
# Details:
1. 로깅 시스템 아키텍처 설계:
   - 확장 가능한 로거 인터페이스 정의
   - 다양한 로그 레벨 지원 (debug, info, warning, error, fatal)
   - 환경별 로깅 전략 구현 (개발/스테이징/프로덕션)
   - 로그 필터링 및 포맷팅 기능

2. AppLogger 클래스 구현:
   - 싱글톤 패턴으로 전역 접근 가능한 로거 인스턴스
   - 다중 로깅 백엔드 지원 (콘솔, 파일, 외부 서비스)
   - 로그 레벨별 활성화/비활성화 설정
   - 컨텍스트 정보 자동 포함 (타임스탬프, 로그 레벨, 클래스명 등)

3. 로깅 백엔드 구현:
   - ConsoleLogger: 개발 환경용 콘솔 출력
   - FileLogger: 로컬 파일 저장 (로그 로테이션 포함)
   - RemoteLogger: 외부 로깅 서비스 연동 (Firebase Crashlytics, Sentry 등)
   - NetworkLogger: API 요청/응답 로깅 전용

4. 환경별 설정 관리:
   - 개발 환경: 모든 레벨 콘솔 출력
   - 스테이징 환경: info 이상 + 파일 저장
   - 프로덕션 환경: warning 이상 + 외부 서비스 전송
   - 사용자별 로그 레벨 동적 조정 기능

5. 성능 최적화:
   - 로그 메시지 지연 평가 (lazy evaluation)
   - 배치 로깅으로 성능 향상
   - 메모리 사용량 제한 및 순환 버퍼
   - 비동기 로깅 처리

6. 보안 및 프라이버시:
   - 민감한 정보 자동 마스킹 (이메일, 전화번호, 비밀번호 등)
   - 로그 암호화 옵션
   - GDPR 준수를 위한 개인정보 로깅 제한
   - 로그 보관 기간 관리

7. 모니터링 및 알림:
   - 중요한 오류 발생 시 실시간 알림
   - 로그 집계 및 분석 기능
   - 성능 메트릭 로깅
   - 앱 크래시 자동 보고

8. 개발자 도구:
   - 로그 뷰어 UI (디버그 모드)
   - 로그 필터링 및 검색 기능
   - 로그 익스포트 기능
   - 개발 중 로그 레벨 실시간 조정

# Test Strategy:
1. 단위 테스트:
   - AppLogger 클래스의 모든 메서드 테스트
   - 로그 레벨별 필터링 로직 검증
   - 각 로깅 백엔드의 독립적 테스트
   - 에러 상황에서의 로거 안정성 테스트

2. 통합 테스트:
   - 여러 백엔드 동시 사용 시나리오 테스트
   - 환경별 설정 적용 검증
   - 로그 포맷팅 및 필터링 통합 테스트
   - 비동기 로깅 처리 검증

3. 성능 테스트:
   - 대량 로그 생성 시 성능 측정
   - 메모리 사용량 모니터링
   - 로그 배치 처리 효율성 검증
   - 앱 전체 성능에 미치는 영향 측정

4. 보안 테스트:
   - 민감한 정보 마스킹 기능 검증
   - 로그 암호화 테스트
   - 무단 접근 방지 테스트
   - 로그 데이터 유출 방지 검증

5. 실제 환경 테스트:
   - 각 환경에서 로깅 설정 검증
   - 외부 서비스 연동 테스트
   - 장기간 운영 시 안정성 테스트
   - 로그 로테이션 및 정리 기능 테스트

6. 사용성 테스트:
   - 개발자 친화적인 API 검증
   - 로그 뷰어 UI 사용성 테스트
   - 문서화 및 예제 코드 검증
   - 다양한 사용 시나리오 테스트

# Subtasks:
## 1. 로깅 시스템 기본 구조 설계 [pending]
### Dependencies: None
### Description: 로깅 시스템의 전체 아키텍처와 인터페이스를 설계합니다
### Details:
로거 인터페이스, 로그 레벨 정의, 백엔드 추상화 클래스 설계

## 2. AppLogger 핵심 클래스 구현 [pending]
### Dependencies: 37.1
### Description: 중앙 집중식 로깅을 위한 AppLogger 클래스를 구현합니다
### Details:
싱글톤 패턴, 로그 레벨 관리, 백엔드 등록 및 관리 기능 구현

## 3. 콘솔 및 파일 로깅 백엔드 구현 [pending]
### Dependencies: 37.2
### Description: 개발 환경용 콘솔 로깅과 파일 저장 백엔드를 구현합니다
### Details:
ConsoleLogger, FileLogger 구현, 로그 로테이션 및 포맷팅 기능

## 4. 외부 로깅 서비스 연동 [pending]
### Dependencies: 37.3
### Description: Firebase Crashlytics, Sentry 등 외부 로깅 서비스와 연동합니다
### Details:
RemoteLogger 구현, 비동기 전송, 재시도 로직, 오프라인 대응

## 5. 환경별 설정 및 보안 기능 구현 [pending]
### Dependencies: 37.4
### Description: 환경별 로깅 설정과 보안 기능을 구현합니다
### Details:
환경별 설정 관리, 민감정보 마스킹, 로그 암호화, 개인정보 보호

## 6. 성능 최적화 및 개발자 도구 [pending]
### Dependencies: 37.5
### Description: 로깅 시스템의 성능을 최적화하고 개발자 도구를 구현합니다
### Details:
배치 로깅, 메모리 관리, 로그 뷰어 UI, 개발 도구 통합

## 7. 기존 로깅 코드 마이그레이션 [pending]
### Dependencies: 37.2, 37.3
### Description: 기존 프로젝트의 로깅 코드를 새로운 통합 AppLogger 시스템으로 마이그레이션합니다
### Details:
1. 기존 로깅 시스템 분석:
   - picnic_lib/core/utils/logger.dart (357줄, 고급 기능 포함)
   - ttja_app/core/utils/logger.dart (42줄, 기본 기능)
   - 코드베이스 전반의 로깅 호출 패턴 분석
   - 현재 사용 중인 로그 레벨 및 포맷 파악

2. 마이그레이션 전략 수립:
   - 기존 로거의 고급 기능(LongMessagePrinter, 스택 트레이스 등) 보존 여부 결정
   - 호환성 레이어 구현 vs 직접 마이그레이션 방식 선택
   - 단계별 마이그레이션 계획 수립 (파일별, 모듈별)
   - 롤백 계획 및 안전 장치 마련

3. 기존 로거 기능 분석 및 통합:
   - picnic_lib 로거의 고급 기능들:
     - LongMessagePrinter의 스택 트레이스 개선
     - PostgreSQL 에러 파싱
     - JSON 데이터 추출
     - 호출자 정보 자동 포함
     - 스로틀링 로직
   - ttja_app 로거의 단순한 구조
   - 두 시스템의 장점을 새 AppLogger에 통합

4. 코드베이스 스캔 및 변경 지점 식별:
   - 자동화된 스크립트로 모든 로깅 호출 검색
   - 패턴별 분류:
     - logger.i/e/w/d() 패턴 (picnic_lib)
     - Logger.i/e/w() 패턴 (ttja_app)
     - 직접 print() 호출
     - 기타 커스텀 로깅
   - 파일별 변경 우선순위 설정

5. 호환성 어댑터 구현:
   - 기존 API와 호환되는 래퍼 클래스들:
     - PicnicLibLoggerAdapter
     - TtjaAppLoggerAdapter
   - 기존 코드 수정 최소화
   - 점진적 마이그레이션 지원

6. 배치 마이그레이션 도구 개발:
   - 자동 코드 변환 스크립트
   - import 문 자동 교체
   - 로깅 호출 패턴 자동 변환
   - 변환 결과 검증 도구

7. 핵심 모듈 우선 마이그레이션:
   - 우선순위 높은 파일들:
     - app.dart (picnic_app, ttja_app)
     - 핵심 서비스 클래스들
     - 자주 사용되는 유틸리티들
   - 단계별 테스트 및 검증

8. 레거시 로거 단계적 제거:
   - 새 AppLogger로 완전 전환 후
   - 기존 logger.dart 파일들 deprecation
   - 호환성 어댑터 제거 계획
   - 코드 정리 및 불필요한 의존성 제거

9. 마이그레이션 검증:
   - 로그 출력 동등성 확인
   - 성능 비교 테스트
   - 기존 기능 회귀 테스트
   - 새로운 기능 추가 검증

