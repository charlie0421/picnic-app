# Task ID: 30
# Title: 아티스트 신청 페이지 UI 구현
# Status: pending
# Dependencies: 28, 29
# Priority: high
# Description: 기존 신청 내역, 아티스트 검색 기능, 신청 버튼을 포함하는 다이얼로그 또는 바텀시트 형태의 반응형 아티스트 신청 페이지 UI를 개발합니다.
# Details:
1. UI 컴포넌트 구조:
   - 다양한 화면 크기에 적응하는 반응형 다이얼로그 또는 바텀시트 컴포넌트 생성
   - 상단, 중간, 하단의 세 가지 구분된 섹션 구현
   - 콘텐츠 오버플로우에 대한 적절한 스크롤 동작 보장

2. 상단 섹션 - 기존 신청 내역:
   - 현재 투표에 대한 기존 아티스트 신청 목록 표시
   - 각 항목에 대해 아티스트 이름, 신청 날짜 및 상태 표시
   - 신청 내역이 없을 때 빈 상태 UI 구현
   - VoteApplicationRepository를 사용하여 신청 데이터 가져오기

3. 중간 섹션 - 아티스트 검색:
   - 작업 #28의 아티스트 검색 기능 통합
   - 적절한 스타일링이 적용된 검색 입력 필드 생성
   - 아티스트 정보가 포함된 스크롤 가능한 목록에 검색 결과 표시
   - 검색 결과에서 아티스트를 선택하는 메커니즘 구현
   - 검색 작업에 대한 로딩 상태 및 오류 처리 추가

4. 하단 섹션 - 신청 버튼:
   - 신청 제출 버튼 구현
   - 유효한 아티스트 선택에 따라 버튼 활성화/비활성화
   - 제출 중 적절한 로딩 상태 추가
   - 제출 후 확인 또는 오류 메시지 표시

5. 반응형 디자인 구현:
   - MediaQuery를 사용하여 화면 크기를 감지하고 레이아웃 조정
   - 모바일: 전체 너비 디자인의 바텀시트 사용
   - 태블릿/데스크톱: 적절한 너비 제약이 있는 중앙 정렬 다이얼로그 사용
   - 다양한 화면 크기에서 적절한 간격과 타이포그래피 보장
   - 다양한 기기 크기에서 테스트하여 반응형 동작 확인

6. 상태 관리:
   - 신청 양식에 대한 적절한 상태 관리 구현
   - 선택된 아티스트, 양식 유효성 검사 상태 및 제출 상태 추적
   - 로딩 및 오류 상태 적절히 처리

7. 백엔드 통합:
   - 새 신청서 제출을 위해 VoteApplicationRepository에 연결
   - API 호출에 대한 적절한 오류 처리 구현
   - 제출 성공 또는 실패에 따라 UI 업데이트

# Test Strategy:
1. UI 컴포넌트 테스트:
   - 컴포넌트가 큰 화면에서는 다이얼로그로, 모바일에서는 바텀시트로 올바르게 렌더링되는지 확인
   - 세 섹션(상단, 중간, 하단)이 올바르게 표시되는지 테스트
   - 콘텐츠가 사용 가능한 공간을 초과할 때 스크롤이 올바르게 작동하는지 확인

2. 기존 신청 내역 표시 테스트:
   - 모의 데이터를 사용하여 기존 신청 내역이 올바르게 표시되는지 테스트
   - 신청 내역이 없을 때 빈 상태가 표시되는지 확인
   - 신청 세부 정보(아티스트 이름, 날짜, 상태)가 올바르게 형식화되었는지 확인

3. 아티스트 검색 테스트:
   - 검색 입력 필드가 사용자 입력을 올바르게 수락하는지 확인
   - 다양한 검색어로 검색 기능 테스트
   - 검색 결과가 올바르게 표시되는지 확인
   - 검색 결과에서 아티스트 선택 테스트
   - 오류 상태 및 로딩 표시기가 예상대로 작동하는지 확인

4. 신청 버튼 테스트:
   - 아티스트가 선택되지 않았을 때 버튼이 비활성화되는지 확인
   - 유효한 아티스트가 선택되었을 때 버튼이 활성화되는지 테스트
   - 제출 중에 로딩 상태가 표시되는지 확인
   - 신청 제출에 대한 성공 및 오류 시나리오 테스트

5. 반응형 디자인 테스트:
   - 여러 기기 크기(모바일, 태블릿, 데스크톱)에서 테스트
   - 화면 크기에 따라 레이아웃이 적절하게 조정되는지 확인
   - 모든 요소가 다양한 기기에서 접근 가능하고 사용 가능한지 확인
   - 모바일 기기에서 방향 변경(세로/가로) 테스트

6. 통합 테스트:
   - 신청 페이지 열기부터 성공적인 제출까지의 전체 흐름 테스트
   - VoteApplicationRepository와의 통합 확인
   - 다양한 API 실패 시나리오에 대한 오류 처리 테스트

7. 접근성 테스트:
   - 키보드 탐색을 위한 적절한 포커스 관리 확인
   - 스크린 리더로 테스트하여 모든 요소가 올바르게 안내되는지 확인
   - 색상 대비가 접근성 표준을 충족하는지 확인

# Subtasks:
## 1. 기존 신청 내역 컴포넌트 구현 [pending]
### Dependencies: None
### Description: 기존 아티스트 신청 내역을 표시하는 컴포넌트 생성
### Details:
아티스트 이름, 신청 날짜, 상태 등 관련 세부 정보를 포함하여 기존 아티스트 신청 내역을 나열하는 재사용 가능한 컴포넌트를 설계하고 구현합니다. 쉬운 가독성을 위한 적절한 스타일링과 레이아웃을 보장합니다.

## 2. 아티스트 검색 기능 개발 [pending]
### Dependencies: 30.1
### Description: 특정 아티스트 신청을 찾기 위한 검색 컴포넌트 생성
### Details:
사용자가 특정 아티스트 신청을 검색할 수 있도록 필터링 기능이 있는 검색 바 컴포넌트를 구현합니다. 아티스트 이름, 신청 날짜 또는 상태별로 검색하는 옵션을 포함합니다.

## 3. 신청 양식 설계 및 구현 [pending]
### Dependencies: None
### Description: 새로운 아티스트 신청을 위한 양식 컴포넌트 생성
### Details:
아티스트 정보, 포트폴리오 링크 및 기타 관련 세부 정보를 위한 필드가 있는 종합적인 신청 양식 컴포넌트를 개발합니다. 양식 유효성 검사 및 제출 기능을 구현합니다.

## 4. 반응형 디자인 구현 [pending]
### Dependencies: 30.1, 30.2, 30.3
### Description: 전체 아티스트 신청 페이지가 반응형이 되도록 보장
### Details:
모든 컴포넌트에 반응형 디자인 원칙을 적용하여 다양한 화면 크기와 기기에서 적절한 레이아웃과 기능을 보장합니다. 데스크톱, 태블릿 및 모바일에서 최적의 사용자 경험을 위해 테스트하고 필요에 따라 조정합니다.

