---
name: 리소스 컴포넌트 표준화
description: 기존 리소스 컴포넌트의 코드 스타일을 표준화하는 가이드
pattern: app/**/*.tsx
---

# 리소스 컴포넌트 표준화 가이드

기존에 작성된 리소스 컴포넌트를 표준화된 코드 스타일로 변환하기 위한 가이드입니다.

## 리팩토링 지침

모든 리소스 컴포넌트에 다음 규칙을 적용합니다:

### 1. 모든 페이지 공통 사항

- `AuthorizePage` 컴포넌트로 감싸기
- 리소스 이름 명시 (useTable, useForm, useShow 등에서)
- `useResource` 훅 활용 및 title 적용
- 불필요한 import 제거 및 import 정리
- 가독성을 위한 적절한 공백 추가
- 모든 따옴표를 쌍따옴표(`"`)로 통일
- UI 컴포넌트 import 방식 통일 (`@/components/ui` 경로에서 가져오기)

### 2. 리스트 페이지 (`page.tsx`)

```tsx
'use client';

import { CreateButton, DateField, List, useTable } from '@refinedev/antd';
import { Table, Input, Space } from 'antd';
import { useNavigation, useResource } from '@refinedev/core';
import { useState } from 'react';
import { AuthorizePage } from '@/components/auth/AuthorizePage';

export default function ResourceList() {
  const [searchTerm, setSearchTerm] = useState<string>('');
  const { show } = useNavigation();
  const { resource } = useResource();

  const { tableProps } = useTable({
    resource: 'resource_name', // 리소스명 명시
    syncWithLocation: true,
    sorters: {
      initial: [{ field: 'id', order: 'desc' }],
    },
    meta: {
      search: searchTerm
        ? { query: searchTerm, fields: ['field.ko', 'field.en'] }
        : undefined,
    },
  });

  // 검색 핸들러
  const handleSearch = (value: string) => {
    setSearchTerm(value);
  };

  return (
    <AuthorizePage resource="resource_name" action="list">
      <List 
        breadcrumb={false}
        headerButtons={<CreateButton />}
        title={resource?.meta?.list?.label}
      >
        {/* 리스트 컴포넌트 내용 */}
      </List>
    </AuthorizePage>
  );
}
```

### 3. 생성 페이지 (`create/page.tsx`)

```tsx
'use client';

import { Create, useForm } from '@refinedev/antd';
import { Form, message } from 'antd';
import { useResource } from '@refinedev/core';
import { AuthorizePage } from '@/components/auth/AuthorizePage';

export default function ResourceCreate() {
  const [messageApi, contextHolder] = message.useMessage();
  const { resource } = useResource();

  const { formProps, saveButtonProps } = useForm({
    resource: 'resource_name', // 리소스명 명시
    warnWhenUnsavedChanges: true,
    redirect: 'list',
    onMutationSuccess: () => {
      messageApi.success('리소스가 성공적으로 생성되었습니다');
    },
  });

  return (
    <AuthorizePage resource="resource_name" action="create">
      <Create
        breadcrumb={false}
        title={resource?.meta?.create?.label}
        saveButtonProps={saveButtonProps}
      >
        {contextHolder}
        <Form {...formProps} layout="vertical">
          {/* 폼 컴포넌트 내용 */}
        </Form>
      </Create>
    </AuthorizePage>
  );
}
```

### 4. 수정 페이지 (`edit/[id]/page.tsx`)

```tsx
'use client';

import { Edit, useForm } from '@refinedev/antd';
import { Form, message } from 'antd';
import { useParams } from 'next/navigation';
import { useResource } from '@refinedev/core';
import { AuthorizePage } from '@/components/auth/AuthorizePage';

export default function ResourceEdit() {
  const params = useParams();
  const id = params.id as string;
  const [messageApi, contextHolder] = message.useMessage();
  const { resource } = useResource();

  const { formProps, saveButtonProps } = useForm({
    resource: 'resource_name', // 리소스명 명시
    id,
    warnWhenUnsavedChanges: true,
    redirect: 'list',
    onMutationSuccess: () => {
      messageApi.success('리소스가 성공적으로 수정되었습니다');
    },
  });

  return (
    <AuthorizePage resource="resource_name" action="edit">
      <Edit
        breadcrumb={false}
        title={resource?.meta?.edit?.label}
        saveButtonProps={saveButtonProps}
      >
        {contextHolder}
        <Form {...formProps} layout="vertical">
          {/* 폼 컴포넌트 내용 */}
        </Form>
      </Edit>
    </AuthorizePage>
  );
}
```

### 5. 상세 페이지 (`show/[id]/page.tsx`)

```tsx
'use client';

import { useShow, useResource } from '@refinedev/core';
import { Show, DateField } from '@refinedev/antd';
import { theme, Typography } from 'antd';
import { AuthorizePage } from '@/components/auth/AuthorizePage';
import { getCardStyle, getSectionStyle, getTitleStyle } from '@/lib/ui';

const { Title } = Typography;

export default function ResourceShow() {
  const { queryResult } = useShow({ resource: 'resource_name' }); // 리소스명 명시
  const { data, isLoading } = queryResult;
  const record = data?.data;
  const { resource } = useResource();
  
  const { token } = theme.useToken();

  return (
    <AuthorizePage resource="resource_name" action="show">
      <Show
        breadcrumb={false}
        title={resource?.meta?.show?.label}
        isLoading={isLoading}
      >
        {/* 상세 정보 컴포넌트 내용 */}
      </Show>
    </AuthorizePage>
  );
}
```

## 자동화 프롬프트

Cursor AI를 통해 기존 리소스 컴포넌트를 표준화하려면 다음 프롬프트를 사용하세요:

```
app/[리소스명]/[페이지타입]/page.tsx 파일을 표준 코드 스타일로 리팩토링해주세요:

1. AuthorizePage 컴포넌트로 감싸기
2. resource 이름 명시 (useTable, useForm, useShow 등에서)
3. useResource 훅 사용 및 title 적용
4. 불필요한 import 제거 및 import 정리
5. 가독성을 위한 적절한 공백 추가
6. 따옴표를 쌍따옴표로 통일
7. UI 컴포넌트 import 방식 통일
``` 