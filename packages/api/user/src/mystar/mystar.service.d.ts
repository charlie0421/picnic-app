/// <reference types="multer" />
import { IPaginationOptions } from 'nestjs-typeorm-paginate';
import { Connection, Repository } from 'typeorm';
import { MystarGroup } from '../../../libs/entities/src/entities/mystar-group.entity';
import { MystarMember } from '../../../libs/entities/src/entities/mystar-member.entity';
import { MystarFollower } from '../../../libs/entities/src/entities/mystar-follower.entity';
import { MystarReply } from '../../../libs/entities/src/entities/mystar-reply.entity';
import { MystarPick } from '../../../libs/entities/src/entities/mystar-pick.entity';
import { MystarArticlesPaginationDto, MystarFollowerDetailDto, MystarFollowerReplyMainDto } from './dto/mystar-follower.dto';
import { MystarGroupDto, MystarGroupMainDto } from './dto/mystar-group.dto';
import { MystarMemberDto } from './dto/mystar-member.dto';
import { MystarPickListDto } from './dto/mystar-pick-list.dto';
import { MystarArtistDto, MystarArtistMainDto } from './dto/mystar-artist.dto';
import { MystarPickDto } from './dto/mystar-pick.dto';
import { User } from '../../../libs/entities/src/entities/user.entity';
import { S3Service } from '../s3/s3.service';
import { ConfigService } from '@nestjs/config';
export declare class MystarService {
    private mystarGroupRepository;
    private mystarMemberRepository;
    private mystarFollowerRepository;
    private mystarReplyRepository;
    private mystarPickRepository;
    private usersRepository;
    private readonly s3Service;
    private readonly configService;
    private connection;
    constructor(mystarGroupRepository: Repository<MystarGroup>, mystarMemberRepository: Repository<MystarMember>, mystarFollowerRepository: Repository<MystarFollower>, mystarReplyRepository: Repository<MystarReply>, mystarPickRepository: Repository<MystarPick>, usersRepository: Repository<User>, s3Service: S3Service, configService: ConfigService, connection: Connection);
    findAll(options: IPaginationOptions, sort: string, order: 'ASC' | 'DESC'): Promise<MystarGroupMainDto>;
    getGroupsByName(options: IPaginationOptions, name: string, sort: string, order: 'ASC' | 'DESC'): Promise<MystarGroupMainDto>;
    getGroupsByNameDeprecated(name: string): Promise<MystarGroupDto[]>;
    getGroupMemberList(id: number): MystarMemberDto;
    getArtists(options: IPaginationOptions, gender: string, sort: string, order: 'ASC' | 'DESC'): Promise<MystarArtistMainDto>;
    getArtistsByName(options: IPaginationOptions, name: string, gender: string, sort: string, order: 'ASC' | 'DESC'): Promise<MystarArtistMainDto>;
    getArtist(artistId: number): Promise<MystarArtistDto>;
    getArtistsByNameDeprecated(gender: string, name: string): Promise<MystarArtistDto[]>;
    getAllArticlesPagination(mystarMemberId: number, options: IPaginationOptions, sort: string, order: 'ASC' | 'DESC'): Promise<MystarArticlesPaginationDto>;
    getMyArticlesPagination(userId: number, mystarMemberId: number, options: IPaginationOptions, sort: string, order: 'ASC' | 'DESC'): Promise<MystarArticlesPaginationDto>;
    getFollowerDetail(articleId: number): Promise<MystarFollowerDetailDto>;
    getFollowerReplyList(articleId: number, options: IPaginationOptions, sort: string, order: 'ASC' | 'DESC'): Promise<MystarFollowerReplyMainDto>;
    createArticle(userId: number, artistId: number, title: string, contents: string, image?: string, videoPath?: string): Promise<MystarFollower>;
    updateArticle(articleId: number, title?: string, contents?: string, image?: string, videoPath?: string): Promise<void>;
    isArticleMine(userId: number, articleId: number): Promise<boolean>;
    uploadArticleImageByArtistId(image: Express.Multer.File, artistId: number): Promise<string>;
    private getArticle;
    uploadArticleImageByArticleId(image: Express.Multer.File, articleId: number): Promise<string>;
    deleteArticle(articleId: number): Promise<void>;
    getMystarPickList(id: number): Promise<MystarPickListDto[]>;
    isAlreadyPicked(userId: number, artistId: number): Promise<boolean>;
    hasAvailableMystarSlot(userId: number): Promise<boolean>;
    followArtist(userId: number, artistId: number): Promise<MystarPickDto>;
    validateThereAreAllMystarPicks(mystarPickIds: number[]): Promise<void>;
    validateUserOwnsMystarPicks(userId: number, mystarPickIds: number[]): Promise<void>;
    unfollowArtists(mystarPickIds: number[]): Promise<void>;
}
