# Picnic Flutter 앱 개선 PRD (제품 요구사항 문서)

## 개요
Picnic은 소셜 콘텐츠 플랫폼으로 투표, 사진 공유, 커뮤니티 활동 및 소설 읽기 기능을 통합한 Flutter 앱입니다. 현재 코드베이스는 picnic_app 및 ttja_app을 포함하고 있으며, 공통 라이브러리 코드는 picnic_lib에 포함되어 있습니다. 아래 요구사항은 앱의 성능, 안정성, 사용자 경험 및 개발 프로세스를 개선하기 위해 식별된 필요 항목들입니다.

## 핵심 목표
1. 앱 성능 최적화 및 안정성 개선
2. 사용자 경험 향상
3. 코드 구조 및 품질 개선
4. 테스트 자동화 강화
5. 모바일 전용 앱으로 전환 (웹 지원 중단)
6. Supabase 직접 통합 및 기능 확장
7. 글로벌 사용자 확장을 위한 소셜 로그인 강화

## 상세 요구사항

### 1. 앱 성능 최적화
- **메모리 사용량 최적화**: 대용량 이미지 처리 시 메모리 누수 감지 및 해결
- **앱 시작 시간 개선**: 초기화 프로세스 최적화 및 시작 시간 측정/개선
- **애니메이션 프레임 드롭 감소**: 특히 스크롤 및 전환 애니메이션 최적화
- **네트워크 효율성 개선**: 데이터 요청 캐싱 및 중복 요청 방지
- **배터리 사용량 최적화**: 백그라운드 작업 및 GPS/블루투스 사용 효율화
- **웹 관련 코드 제거**: 웹 지원 중단에 따른 불필요한 코드 및 조건문 제거

### 2. 사용자 경험 개선
- **오프라인 모드 강화**: 네트워크 오류 시 사용자 경험 개선 및 데이터 일관성 유지
- **다국어 지원 개선**: 번역 키 관리 최적화 및 잘못된 번역 수정
- **접근성 개선**: 스크린 리더 호환성 및 키보드 탐색 지원 강화
- **다크 모드 개선**: 모든 화면에서 다크 모드 지원 완성
- **푸시 알림 시스템 개선**: 사용자 맞춤형 알림 설정 및 관리 기능
- **실시간 기능 강화**: Supabase 실시간 구독을 활용한 채팅, 알림, 투표/댓글 업데이트 구현
- **위챗 로그인 통합**: 중국 사용자를 위한 위챗 소셜 로그인 기능 구현

### 3. 코드 품질 개선
- **코드 중복 제거**: picnic_app과 ttja_app 간 중복 코드 통합
- **코드 아키텍처 재구성**: 관심사 분리 및 모듈화 강화
- **에러 처리 일관성 확보**: 전역 에러 처리 시스템 구현
- **코드 문서화 개선**: 주요 클래스 및 함수에 표준 문서 주석 추가
- **상태 관리 최적화**: Provider/Riverpod 사용 패턴 표준화
- **Supabase 통합 최적화**: 불필요한 래퍼 제거 및 Supabase SDK 직접 활용

### 4. 테스트 자동화 강화
- **단위 테스트 커버리지 확대**: 핵심 비즈니스 로직 테스트 커버리지 80% 이상 달성
- **UI 테스트 자동화**: 주요 사용자 흐름에 대한 자동화된 UI 테스트 구현
- **기기별 호환성 테스트**: 다양한 기기 해상도 및 OS 버전 호환성 테스트 자동화
- **성능 테스트 프레임워크**: 성능 회귀 테스트 자동화
- **테스트 데이터 관리**: 테스트를 위한 모의 데이터 생성 및 관리 시스템

### 5. 모바일 전용 최적화
- **iOS 및 Android 전용 기능 강화**: 모바일 플랫폼별 네이티브 기능 최적화
- **모바일 화면 최적화**: 다양한 모바일 화면 크기 최적화 및 반응형 설계
- **모바일 제스처 향상**: 직관적인 제스처 컨트롤 및 햅틱 피드백 개선
- **웹 관련 코드 제거**: 웹 전용 UI 컴포넌트, 조건문 및 초기화 코드 제거
- **모바일 성능 최적화**: 모바일 기기에 특화된 성능 최적화 구현

### 6. Supabase 통합 및 활용
- **Supabase 직접 참조**: 데이터 접근 계층 리팩토링으로 Supabase SDK 직접 활용
- **실시간 기능 확장**: Supabase 실시간 구독으로 채팅, 알림, 실시간 업데이트 구현
- **Edge Functions 활용**: 서버리스 기능으로 복잡한 데이터 처리 및 API 통합 구현
- **오프라인 데이터 동기화**: 향상된 로컬 캐싱 및 데이터 동기화 메커니즘 구현
- **Supabase 보안 강화**: Row Level Security 및 적절한 권한 관리 구현

### 7. 소셜 로그인 및 인증 개선
- **위챗 로그인 통합**: 위챗 SDK 통합 및 인증 플로우 구현
- **Supabase 인증 연동**: 위챗 로그인을 Supabase 인증 시스템과 연동
- **사용자 프로필 동기화**: 위챗 API를 통해 사용자 프로필 정보 동기화
- **중국 규제 준수**: 중국 내 사용자 데이터 및 개인정보 보호 규정 준수
- **다양한 소셜 로그인 통합**: 기존 소셜 로그인 방식의 개선 및 최적화

### 8. 보안 강화
- **데이터 암호화 개선**: 민감한 사용자 데이터 암호화 강화
- **인증 시스템 개선**: OAuth 2.0 및 소셜 로그인 보안 향상
- **앱 무결성 검증**: 앱 변조 방지 및 탐지 시스템 구현
- **권한 관리 최적화**: 최소 권한 원칙에 따른 접근 권한 관리
- **가상 기기 탐지 개선**: 가상 기기 탐지 알고리즘 정확도 향상

### 9. 개발 프로세스 개선
- **CI/CD 파이프라인 최적화**: 빌드 및 테스트 자동화 개선
- **코드 품질 검사 자동화**: 정적 분석 도구 및 코드 품질 기준 강화
- **버전 관리 전략 개선**: 브랜치 관리 및 릴리스 프로세스 최적화
- **개발 문서 통합**: 개발자 가이드 및 API 문서 통합 시스템 구축
- **의존성 관리 개선**: 외부 라이브러리 의존성 관리 및 업데이트 전략

## 타임라인 및 우선순위
- **1단계 (즉시)**: 웹 관련 코드 제거, 앱 성능 최적화, 메모리 누수 해결, 앱 시작 시간 개선
- **2단계 (1-2개월)**: Supabase 직접 통합, 위챗 로그인 구현, 코드 품질 개선, 테스트 자동화 강화
- **3단계 (3-4개월)**: Supabase 실시간 기능 및 Edge Functions 구현, 사용자 경험 개선
- **4단계 (5-6개월)**: 보안 강화, 개발 프로세스 최적화

## 성공 지표
- 앱 시작 시간 30% 감소
- 메모리 사용량 20% 감소
- 테스트 커버리지 80% 이상 달성
- 사용자 세션 길이 15% 증가
- 앱 충돌률 50% 감소
- 배터리 사용량 25% 감소
- 오프라인 사용성 개선으로 사용자 만족도 증가
- Supabase 직접 통합으로 코드 복잡성 25% 감소
- 실시간 기능으로 사용자 참여도 20% 증가
- 위챗 로그인 통합으로 중국 사용자 수 35% 증가 