workflows:
  # =================== PICNIC APP iOS ===================
  picnic-app-ios:
    name: Picnic App - iOS
    instance_type: mac_mini_m2
    max_build_duration: 120
    integrations:
      app_store_connect: codemagic-picnic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: io.iconcasting.picnic.app
      groups:
        - app_store_connect
        - shorebird-config
        - picnic_env
      flutter: 3.32.5
      vars:
        APP_NAME: "picnic_app"
        BUNDLE_ID: "io.iconcasting.picnic.app"
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: 'picnic-v*'
          include: true
      cancel_previous_builds: true
    scripts:
      - name: Get Flutter packages and prepare iOS
        script: |
          cd picnic_app
          echo "=== Flutter 패키지 설치 ==="
          flutter packages pub get
          
          echo "=== Flutter iOS 설정 생성 (Generated.xcconfig 파일 생성) ==="
          flutter precache --ios
          flutter build ios --config-only
          
          echo "=== Generated.xcconfig 파일 확인 ==="
          ls -la ios/Flutter/Generated.xcconfig || echo "⚠️ Generated.xcconfig 파일이 아직 생성되지 않음"

      - name: Install CocoaPods dependencies
        script: |
          cd picnic_app
          
          echo "=== Generated.xcconfig 파일 확인 ==="
          if [ ! -f "ios/Flutter/Generated.xcconfig" ]; then
            echo "⚠️ Generated.xcconfig 파일이 없음 - Flutter 설정 재생성"
            flutter build ios --config-only
          fi
          
          echo "✅ Generated.xcconfig 파일 존재 확인:"
          ls -la ios/Flutter/Generated.xcconfig
          
          echo "=== CocoaPods 설치 시작 ==="
          cd ios
          pod install

      - name: Install Shorebird CLI
        script: |
          echo "=== Shorebird CLI 설치 시작 ==="
          
          # 기존 Shorebird 설치 강제 제거 (충돌 방지)
          echo "🧹 기존 Shorebird 설치 정리 중..."
          if [ -d "$HOME/.shorebird" ]; then
            rm -rf "$HOME/.shorebird"
            echo "✅ 기존 Shorebird 디렉토리 제거 완료"
          fi
          
          # 최신 안정 버전 사용 (v1.6.49)
          echo "🔧 Shorebird v1.6.49 최신 안정 버전 설치 중..."
          
          # 공식 GitHub 설치 스크립트 사용 (가장 안정적)
          echo "📥 공식 설치 스크립트로 최신 Shorebird 설치..."
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          
          export PATH="$HOME/.shorebird/bin:$PATH"
          
          echo "=== Shorebird 설치 확인 ==="
          if command -v shorebird >/dev/null 2>&1; then
            shorebird --version
            echo "✅ Shorebird 설치 및 설정 완료"
          else
            echo "❌ Shorebird 설치 실패"
            exit 1
          fi

      - name: Verify iOS Signing Configuration
        script: |
          echo "=== iOS 서명 환경 확인 ==="
          echo "DEVELOPMENT_TEAM: ${DEVELOPMENT_TEAM:-'24SL34R9HR'}"
          
          # Distribution Certificate 정보 확인
          DIST_CERT_INFO=$(security find-identity -v -p codesigning | grep -i distribution | head -1)
          if [ -n "$DIST_CERT_INFO" ]; then
            echo "✅ Distribution 인증서: $DIST_CERT_INFO"
          else
            echo "❌ Distribution 인증서를 찾을 수 없음"
            echo "사용 가능한 인증서들:"
            security find-identity -v -p codesigning
            exit 1
          fi
          
          # Provisioning Profile 정보 확인
          PROFILE_COUNT=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" 2>/dev/null | wc -l)
          echo "설치된 프로비저닝 프로파일 개수: $PROFILE_COUNT개"
          
          if [ "$PROFILE_COUNT" -gt 0 ]; then
            echo "✅ 프로비저닝 프로파일 목록:"
            find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" 2>/dev/null | while read profile; do
              PROFILE_NAME=$(security cms -D -i "$profile" 2>/dev/null | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | tr -d '\n')
              echo "  - $(basename "$profile" .mobileprovision): $PROFILE_NAME"
              
              # 프로비저닝 프로파일의 Entitlements 확인
              if [[ "$PROFILE_NAME" == *"picnic"* ]]; then
                echo "    🔍 Picnic 프로파일 Entitlements 확인 중..."
                ENTITLEMENTS=$(security cms -D -i "$profile" 2>/dev/null | grep -A 20 "<key>Entitlements</key>" | grep -E "(aps-environment|com.apple.developer.associated-domains|com.apple.developer.applesignin)")
                if [ -n "$ENTITLEMENTS" ]; then
                  echo "    ✅ 필요한 Entitlements 발견:"
                  echo "$ENTITLEMENTS" | head -5
                else
                  echo "    ⚠️ 필요한 Entitlements가 누락됨 (Associated Domains, Push Notifications, Sign in with Apple)"
                fi
              fi
            done
          else
            echo "❌ 프로비저닝 프로파일을 찾을 수 없음"
            exit 1
          fi

      - name: Configure Xcode Project Signing Strategy
        script: |
          cd picnic_app/ios
          
          echo "=== Xcode 프로젝트 Manual Distribution Signing 설정 ==="
          
          # Manual Signing 강제 설정 (CodeMagic Integration 사용)
          echo "📝 Manual Distribution Signing 활성화..."
          sed -i '' "s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_STYLE = \"\";/CODE_SIGN_STYLE = Manual;/g" Runner.xcodeproj/project.pbxproj
          
          # Development Team 설정 (필수)
          sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"24SL34R9HR\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = 24SL34R9HR;/DEVELOPMENT_TEAM = \"24SL34R9HR\";/g" Runner.xcodeproj/project.pbxproj
          
          # Distribution 인증서 및 프로파일 강제 설정
          echo "📝 Distribution 인증서 및 프로파일 강제 설정..."
          sed -i '' "s/CODE_SIGN_IDENTITY = \"\"/CODE_SIGN_IDENTITY = \"Apple Distribution\"/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_IDENTITY = \"Apple Development\"/CODE_SIGN_IDENTITY = \"Apple Distribution\"/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/\"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]\" = \"iPhone Developer\"/\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\" = \"Apple Distribution\"/g" Runner.xcodeproj/project.pbxproj
          
          # 프로비저닝 프로파일 설정 (성공했던 설정)
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"\"/PROVISIONING_PROFILE_SPECIFIER = \"picnic_app_profile_2025\"/g" Runner.xcodeproj/project.pbxproj
          
          # PROVISIONING_PROFILE_SPECIFIER 추가 (존재하지 않는 경우)
          if ! grep -q "PROVISIONING_PROFILE_SPECIFIER" Runner.xcodeproj/project.pbxproj; then
            sed -i '' '/DEVELOPMENT_TEAM = /a\
                PROVISIONING_PROFILE_SPECIFIER = "picnic_app_profile_2025";' Runner.xcodeproj/project.pbxproj
          fi
          
          # Archive 빌드가 Release 구성을 사용하도록 강제
          if [ -f "Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme" ]; then
            echo "📝 Archive 스킴 Release 구성 강제..."
            sed -i '' 's/buildConfiguration = \"Debug\"/buildConfiguration = \"Release\"/g' Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme
          fi
          
          # Development 관련 설정 완전 제거
          sed -i '' "/CODE_SIGN_IDENTITY.*=.*iPhone Developer/d" Runner.xcodeproj/project.pbxproj
          sed -i '' "/CODE_SIGN_IDENTITY.*=.*Apple Development/d" Runner.xcodeproj/project.pbxproj
          sed -i '' "/PROVISIONING_PROFILE_SPECIFIER.*=.*Development/d" Runner.xcodeproj/project.pbxproj
          
          # 추가 강력 설정 - perl을 사용한 더 정확한 치환
          echo "📝 추가 강력 설정 적용..."
          perl -i -pe 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' Runner.xcodeproj/project.pbxproj
          perl -i -pe 's/CODE_SIGN_STYLE = "Automatic";/CODE_SIGN_STYLE = Manual;/g' Runner.xcodeproj/project.pbxproj
          perl -i -pe 's/CODE_SIGN_IDENTITY = "";/CODE_SIGN_IDENTITY = "Apple Distribution";/g' Runner.xcodeproj/project.pbxproj
          perl -i -pe 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "picnic_app_profile_2025";/g' Runner.xcodeproj/project.pbxproj
          perl -i -pe 's/PROVISIONING_PROFILE_SPECIFIER = "match AppStore.*";/PROVISIONING_PROFILE_SPECIFIER = "picnic_app_profile_2025";/g' Runner.xcodeproj/project.pbxproj
          
          # Debug 구성도 Manual로 변경 (혹시 모를 경우를 위해)
          perl -i -pe '/Debug.*= {/,/};/{
            s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g;
            s/CODE_SIGN_IDENTITY = "";/CODE_SIGN_IDENTITY = "Apple Distribution";/g;
          }' Runner.xcodeproj/project.pbxproj
          
          echo "📋 설정 후 확인:"
          grep -n "CODE_SIGN_STYLE\|Apple Distribution\|picnic_app_profile_2025" Runner.xcodeproj/project.pbxproj | head -10
          
          echo "✅ Manual Distribution Signing 강력 설정 완료"
          echo "- CODE_SIGN_STYLE: Manual (강제)"
          echo "- DEVELOPMENT_TEAM: 24SL34R9HR"
          echo "- CODE_SIGN_IDENTITY: Apple Distribution (강제)"
          echo "- PROVISIONING_PROFILE_SPECIFIER: picnic_app_profile_2025 (성공했던 설정)"

      - name: Build iOS IPA for App Store
        script: |
          cd picnic_app

          echo "=== iOS IPA 빌드 시작 ==="
          echo "🎯 App Store Connect 업로드를 위한 IPA 파일 생성"
          echo ""

          echo "=== iOS 서명 환경 최종 확인 ==="
          echo "✅ Manual Distribution Signing 설정 완료"
          echo "✅ Bundle ID: io.iconcasting.picnic.app"
          echo "✅ Distribution Type: App Store"
          echo "✅ Development Team: 24SL34R9HR"
          echo "✅ CODE_SIGN_IDENTITY: Apple Distribution"
          echo "✅ PROVISIONING_PROFILE_SPECIFIER: picnic_app_profile_2025"

          echo "=== Flutter 빌드 준비 ==="
          flutter clean
          flutter pub get

          echo "=== iOS IPA 빌드 실행 ==="
          echo "🚀 Flutter로 iOS IPA 빌드 시작..."
          flutter build ipa \
            --release \
            --dart-define=ENVIRONMENT=prod \
            --export-options-plist=ios/ExportOptions.plist
          
          BUILD_EXIT_CODE=$?
          
          # IPA 파일 생성 확인
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "=== iOS IPA 빌드 성공 ==="
            echo "✅ IPA 파일이 성공적으로 생성되었습니다"
            
            # IPA 파일 위치 확인
            if [ -f "build/ios/ipa/picnic_app.ipa" ]; then
              IPA_SIZE=$(stat -f%z "build/ios/ipa/picnic_app.ipa" 2>/dev/null || echo "unknown")
              echo "📦 IPA 파일: build/ios/ipa/picnic_app.ipa ($IPA_SIZE bytes)"
            else
              echo "🔍 IPA 파일 위치 확인 중..."
              find build/ios -name "*.ipa" -type f | head -5
            fi
          else
            echo "=== iOS IPA 빌드 실패 ==="
            echo "❌ IPA 빌드에 실패했습니다 (종료 코드: $BUILD_EXIT_CODE)"
            exit 1
          fi

      - name: Shorebird iOS Release (Optional)
        script: |
          export PATH="$HOME/.shorebird/bin:$PATH"
          cd picnic_app

          echo "=== Shorebird iOS 릴리즈 (선택사항) ==="
          echo "🎯 패치 시스템을 위한 Shorebird 릴리즈 업로드"
          echo ""

          echo "=== Shorebird 버전 확인 ==="
          shorebird --version

          echo "=== Shorebird 인증 확인 ==="
          if [ -z "$SHOREBIRD_TOKEN" ]; then
            echo "❌ SHOREBIRD_TOKEN 환경변수가 설정되지 않았습니다"
            echo "⚠️ Shorebird 릴리즈를 건너뜁니다"
            exit 0
          else
            echo "✅ SHOREBIRD_TOKEN 환경변수가 설정되었습니다"
          fi

          echo "=== Shorebird 캐시 정리 및 환경 준비 ==="
          shorebird cache clean
          flutter clean
          flutter pub get

          echo "=== Shorebird iOS 릴리즈 실행 ==="
          echo "🚀 Shorebird로 iOS 릴리즈 업로드..."
          RELEASE_RESULT=$(shorebird release ios \
            --dart-define=ENVIRONMENT=prod \
            --flutter-version=latest 2>&1)
          RELEASE_EXIT_CODE=$?
          
          echo "릴리즈 결과:"
          echo "$RELEASE_RESULT"
          
          # 릴리즈 결과 확인
          if [ $RELEASE_EXIT_CODE -eq 0 ]; then
            if echo "$RELEASE_RESULT" | grep -i "successfully\|completed\|deployed\|published\|release.*created"; then
              echo "=== Shorebird iOS 릴리즈 성공 ==="
              echo "✅ iOS 앱이 Shorebird에 성공적으로 업로드되었습니다"
              echo "🎯 이제 패치 워크플로우를 사용할 수 있습니다"
            else
              echo "=== Shorebird iOS 릴리즈 불완전 ==="
              echo "⚠️ 릴리즈 결과가 불분명하지만 계속 진행합니다"
            fi
          else
            echo "=== Shorebird iOS 릴리즈 실패 ==="
            echo "❌ iOS 릴리즈에 실패했지만 IPA는 생성되어 계속 진행합니다"
            echo "🔍 실패 원인: $RELEASE_RESULT"
          fi

          echo "=== 최종 결과 ==="
          echo "✅ iOS IPA 빌드 완료, Shorebird 릴리즈는 선택사항입니다"

    artifacts:
      # IPA 파일과 관련 아티팩트
      - picnic_app/build/ios/ipa/*.ipa
      - picnic_app/build/ios/archive/*.xcarchive
      - picnic_app/shorebird.yaml
      - picnic_app/flutter_drive.log
      - picnic_app/build/ios/**/Runner.app

    publishing:
      # 하이브리드 배포: TestFlight + Shorebird 모두 사용
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
      slack:
        channel: '#codemagic-picnic'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      email:
        recipients:
          - ironlove77@gmail.com
        notify:
          success: true
          failure: true

  # =================== PICNIC APP Android ===================
  picnic-app-android:
    name: Picnic App - Android
    instance_type: mac_mini_m2
    max_build_duration: 120
    environment:
      android_signing:
        - picnic_keystore
      groups:
        - google_play
        - picnic_env
      flutter: 3.32.5
      java: 17
      vars:
        PATH: $PATH:$HOME/.shorebird/bin
        APP_NAME: "picnic_app"
        # CodeMagic이 android_signing을 인식하도록 강제 설정
        FLUTTER_BUILD_MODE: "release"
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - $HOME/.android/build-cache
        - $HOME/Library/Caches/CocoaPods
        - picnic_app/.dart_tool
        - picnic_app/android/.gradle
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: 'picnic-v*'
          include: true
      cancel_previous_builds: true
    scripts:
      - name: Flutter Environment Setup
        script: |
          cd picnic_app
          echo "=== Flutter 환경 준비 ==="
          echo "🎯 자동화된 AAB 이중 생성 시스템 포함"
          echo ""
          echo "📝 자동화 시스템 개요:"
          echo "- build.gradle에 copyAABForShorebird 태스크 내장"
          echo "- Flutter와 Shorebird 모두 지원하는 이중 AAB 파일 생성"
          echo "- 수동 복사 없이 완전 자동화됨"
          echo ""
          
          echo "=== Flutter 버전 확인 ==="
          flutter --version
          
          echo "=== Flutter 패키지 설치 ==="
          flutter packages pub get

      - name: Verify Keystore Configuration
        script: |
          echo "=== 키스토어 환경 변수 확인 ==="
          echo "CM_KEYSTORE_PATH: ${CM_KEYSTORE_PATH:-'미설정'}"
          echo "CM_KEYSTORE_PASSWORD: ${CM_KEYSTORE_PASSWORD:-'미설정'}"
          echo "CM_KEY_ALIAS: ${CM_KEY_ALIAS:-'미설정'}"
          echo "CM_KEY_PASSWORD: ${CM_KEY_PASSWORD:-'미설정'}"
          
          if [ -z "$CM_KEYSTORE_PATH" ] || [ -z "$CM_KEYSTORE_PASSWORD" ] || [ -z "$CM_KEY_ALIAS" ] || [ -z "$CM_KEY_PASSWORD" ]; then
            echo "❌ 키스토어 환경 변수가 올바르게 설정되지 않았습니다"
            echo "CodeMagic 대시보드에서 'picnic_keystore' 그룹 설정을 확인해주세요"
            exit 1
          fi
          
          if [ -f "$CM_KEYSTORE_PATH" ]; then
            echo "✅ 키스토어 파일 존재: $CM_KEYSTORE_PATH"
            # 키스토어 정보 확인
            keytool -list -v -keystore "$CM_KEYSTORE_PATH" -alias "$CM_KEY_ALIAS" -storepass "$CM_KEYSTORE_PASSWORD" | grep -E "(SHA1|SHA256|Subject|Issuer)" || echo "키스토어 정보 확인 실패"
          else
            echo "❌ 키스토어 파일을 찾을 수 없습니다: $CM_KEYSTORE_PATH"
            exit 1
          fi

      - name: Build Android App Bundle (Flutter Standard)
        script: |
          cd picnic_app
          
          echo "=== 표준 Flutter Android 빌드 시작 ==="
          echo "🎯 Shorebird 비활성화, 기존 Flutter 빌드 방식 사용"
          echo ""

          echo "=== Android 서명 환경 확인 ==="
          echo "✅ Android Signing 설정 완료"
          echo "✅ 키스토어 경로: $CM_KEYSTORE_PATH"
          echo "✅ 키 별칭: $CM_KEY_ALIAS"
          echo "✅ 서명 검증 완료"

          echo "=== Gradle 메모리 최적화 설정 ==="
          mkdir -p $HOME/.gradle
          echo "org.gradle.jvmargs=-Xmx6144m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.daemon=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.caching=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.parallel=false" >> $HOME/.gradle/gradle.properties
          echo "android.enableJetifier=true" >> $HOME/.gradle/gradle.properties
          echo "android.useAndroidX=true" >> $HOME/.gradle/gradle.properties
          echo "android.enableR8.fullMode=false" >> $HOME/.gradle/gradle.properties
          echo "android.useFullClasspathForDexingTransform=true" >> $HOME/.gradle/gradle.properties
          echo "android.defaults.buildfeatures.buildconfig=true" >> $HOME/.gradle/gradle.properties

          echo "=== Flutter 빌드 준비 ==="
          flutter clean
          flutter pub get

          echo "=== Flutter Android App Bundle 빌드 ==="
          echo "🚀 표준 Flutter 빌드로 AAB 생성..."
          
          flutter build appbundle \
            --release \
            --dart-define=ENVIRONMENT=prod
          
          BUILD_EXIT_CODE=$?
          
          # AAB 파일 존재 확인 (Flutter exit code보다 우선)
          echo "🔍 AAB 파일 생성 여부 확인..."
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            AAB_SIZE=$(stat -f%z "build/app/outputs/bundle/release/app-release.aab" 2>/dev/null || echo "unknown")
            echo "=== Flutter Android 빌드 성공 (AAB 파일 기준) ==="
            echo "✅ AAB 파일이 성공적으로 생성되었습니다"
            echo "📦 AAB 파일: build/app/outputs/bundle/release/app-release.aab ($AAB_SIZE bytes)"
            
            if [ $BUILD_EXIT_CODE -ne 0 ]; then
              echo "⚠️ Flutter는 debug symbol strip에서 실패했지만, AAB 파일이 정상 생성되어 성공 처리합니다"
            fi
            
            # 추가 AAB 파일 위치 확인
            echo "🔍 다른 위치의 AAB 파일들:"
            find build/ -name "*.aab" -type f | while read aab_file; do
              aab_size=$(stat -f%z "$aab_file" 2>/dev/null || echo "unknown")
              echo "  ✅ $aab_file ($aab_size bytes)"
            done
            
          elif [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "=== Flutter Android 빌드 성공 ==="
            echo "✅ Flutter 빌드가 성공적으로 완료되었습니다"
            
            # AAB 파일 찾기 시도
            echo "🔍 AAB 파일 위치 확인 중..."
            find build/ -name "*.aab" -type f | head -5
          else
            echo "=== Flutter Android 빌드 실패 ==="
            echo "❌ AAB 빌드 실패 (종료 코드: $BUILD_EXIT_CODE)"
            
            echo "🔍 마지막 빌드 로그 확인 중..."
            if [ -f "build/app/reports/lint-results.html" ]; then
              echo "📄 Lint 보고서가 생성됨"
            fi
            
            echo "💡 일반적인 해결 방법:"
            echo "1. flutter clean && flutter pub get 후 재시도"
            echo "2. Android NDK/SDK 버전 확인"
            echo "3. Gradle 캐시 정리: rm -rf ~/.gradle/caches"
            echo "4. MultiDex 설정 확인"
            
            exit 1
          fi

          echo "=== 최종 결과 ==="
          echo "✅ 표준 Flutter Android 빌드 완료!"
          echo "🎯 Shorebird 없이 안정적인 빌드 환경 사용"

      - name: Verify AAB Output
        script: |
          cd picnic_app
          echo "=== AAB 출력 확인 ==="
          echo "🎯 자동화 태스크로 생성된 AAB 파일들 확인"
          echo ""
          
          echo "📝 자동화 시스템 설명:"
          echo "- build.gradle의 copyAABForShorebird 태스크가 자동으로 실행됨"
          echo "- Gradle이 app-release.aab를 생성하고 Flutter용 app.aab도 자동 복사"
          echo "- Flutter와 Shorebird 모두 지원하는 이중 파일 시스템"
          echo ""
          
          # Flutter가 기대하는 위치의 app.aab 확인
          if [ -f "build/app/outputs/bundle/release/app.aab" ]; then
            APP_AAB_SIZE=$(stat -f%z "build/app/outputs/bundle/release/app.aab" 2>/dev/null || echo "unknown")
            echo "✅ Flutter용 AAB 파일: build/app/outputs/bundle/release/app.aab (${APP_AAB_SIZE} bytes)"
          else
            echo "⚠️ Flutter용 app.aab 파일을 찾을 수 없음"
          fi
          
          # Shorebird/Gradle이 생성하는 app-release.aab 확인
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            APP_RELEASE_AAB_SIZE=$(stat -f%z "build/app/outputs/bundle/release/app-release.aab" 2>/dev/null || echo "unknown")
            echo "✅ Shorebird/Gradle용 AAB 파일: build/app/outputs/bundle/release/app-release.aab (${APP_RELEASE_AAB_SIZE} bytes)"
          else
            echo "⚠️ Shorebird용 app-release.aab 파일을 찾을 수 없음"
          fi
          
          # 원본 Gradle 출력 위치 확인
          if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            GRADLE_AAB_SIZE=$(stat -f%z "android/app/build/outputs/bundle/release/app-release.aab" 2>/dev/null || echo "unknown")
            echo "✅ Gradle 원본 AAB 파일: android/app/build/outputs/bundle/release/app-release.aab (${GRADLE_AAB_SIZE} bytes)"
          else
            echo "⚠️ Gradle 원본 AAB 파일을 찾을 수 없음"
          fi
          
          echo ""
          echo "🔍 모든 AAB 파일 위치:"
          find . -name "*.aab" -type f 2>/dev/null | while read aab_file; do
            aab_size=$(stat -f%z "$aab_file" 2>/dev/null || echo "unknown")
            echo "  📦 $aab_file (${aab_size} bytes)"
          done
          
          echo ""
          # 최소 하나의 AAB 파일이 있는지 확인
          AAB_COUNT=$(find . -name "*.aab" -type f 2>/dev/null | wc -l)
          if [ "$AAB_COUNT" -gt 0 ]; then
            echo "✅ 자동화 시스템 성공: ${AAB_COUNT}개의 AAB 파일이 생성되었습니다"
            echo "🎯 Flutter와 Shorebird 모두 지원 가능"
          else
            echo "❌ AAB 파일이 전혀 생성되지 않았습니다"
            echo "🔍 자동화 태스크 실행 여부를 확인하세요"
            exit 1
          fi

    artifacts:
      # Google Play 배포용 AAB 파일 (중복 제거하여 단일 파일만)
      - picnic_app/build/app/outputs/bundle/release/app-release.aab  # 메인 배포용
      - picnic_app/build/**/outputs/**/*.apk
      - picnic_app/flutter_drive.log
      - picnic_app/build/app/outputs/**/mapping.txt

    publishing:
      # 조건부 Google Play 배포 (환경변수로 제어)
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: true
      slack:
        channel: '#codemagic-picnic'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      email:
        recipients:
          - ironlove77@gmail.com
        notify:
          success: true
          failure: true

  # =================== PICNIC APP iOS Patch (Shorebird) ===================
  picnic-app-patch-ios:
    name: Picnic App - iOS Patch (Shorebird)
    instance_type: mac_mini_m2
    max_build_duration: 60
    integrations:
      app_store_connect: codemagic-picnic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: io.iconcasting.picnic.app
      groups:
        - app_store_connect
        - shorebird-config
        - picnic_env
      flutter: 3.32.5
      vars:
        APP_NAME: "picnic_app"
        BUNDLE_ID: "io.iconcasting.picnic.app"
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: 'picnic-patch-*'
          include: true
      cancel_previous_builds: true
    scripts:
      - name: Install Shorebird CLI
        script: |
          echo "=== Shorebird CLI 설치 시작 ==="
          
          # 기존 Shorebird 설치 강제 제거 (충돌 방지)
          echo "🧹 기존 Shorebird 설치 정리 중..."
          if [ -d "$HOME/.shorebird" ]; then
            rm -rf "$HOME/.shorebird"
            echo "✅ 기존 Shorebird 디렉토리 제거 완료"
          fi
          
          # 최신 안정 버전 사용 (v1.6.49)
          echo "🔧 Shorebird v1.6.49 최신 안정 버전 설치 중..."
          
          # 공식 GitHub 설치 스크립트 사용 (가장 안정적)
          echo "📥 공식 설치 스크립트로 최신 Shorebird 설치..."
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          
          export PATH="$HOME/.shorebird/bin:$PATH"
          
          echo "=== Shorebird 설치 확인 ==="
          if command -v shorebird >/dev/null 2>&1; then
            shorebird --version
            echo "✅ Shorebird 설치 및 설정 완료"
          else
            echo "❌ Shorebird 설치 실패"
            exit 1
          fi
          
          # PATH 설정을 환경 파일로 저장 (다음 단계에서 사용)
          echo "export PATH=\"$HOME/.shorebird/bin:\$PATH\"" > /tmp/shorebird_env.sh
          echo "✅ Shorebird CLI 설치 및 환경 설정 완료"

      - name: Get Flutter packages and prepare iOS
        script: |
          cd picnic_app
          echo "=== Flutter 패키지 설치 ==="
          flutter packages pub get
          
          echo "=== Flutter iOS 설정 생성 ==="
          flutter precache --ios
          flutter build ios --config-only

      - name: Install CocoaPods dependencies
        script: |
          cd picnic_app
          
          echo "=== Generated.xcconfig 파일 확인 ==="
          if [ ! -f "ios/Flutter/Generated.xcconfig" ]; then
            echo "⚠️ Generated.xcconfig 파일이 없음 - Flutter 설정 재생성"
            flutter build ios --config-only
          fi
          
          echo "✅ Generated.xcconfig 파일 존재 확인:"
          ls -la ios/Flutter/Generated.xcconfig
          
          echo "=== CocoaPods 설치 시작 ==="
          cd ios
          pod install

      - name: Install Shorebird CLI
        script: |
          echo "=== Shorebird CLI 설치 시작 ==="
          
          # 기존 Shorebird 설치 강제 제거 (충돌 방지)
          echo "🧹 기존 Shorebird 설치 정리 중..."
          if [ -d "$HOME/.shorebird" ]; then
            rm -rf "$HOME/.shorebird"
            echo "✅ 기존 Shorebird 디렉토리 제거 완료"
          fi
          
          # 최신 안정 버전 사용 (v1.6.49)
          echo "🔧 Shorebird v1.6.49 최신 안정 버전 설치 중..."
          
          # 공식 GitHub 설치 스크립트 사용 (가장 안정적)
          echo "📥 공식 설치 스크립트로 최신 Shorebird 설치..."
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          
          export PATH="$HOME/.shorebird/bin:$PATH"
          
          echo "=== Shorebird 설치 확인 ==="
          if command -v shorebird >/dev/null 2>&1; then
            shorebird --version
            echo "✅ Shorebird 설치 및 설정 완료"
          else
            echo "❌ Shorebird 설치 실패"
            exit 1
          fi

      - name: Verify iOS Signing Configuration
        script: |
          echo "=== iOS 서명 환경 확인 ==="
          echo "DEVELOPMENT_TEAM: ${DEVELOPMENT_TEAM:-'24SL34R9HR'}"
          
          # Distribution Certificate 정보 확인
          DIST_CERT_INFO=$(security find-identity -v -p codesigning | grep -i distribution | head -1)
          if [ -n "$DIST_CERT_INFO" ]; then
            echo "✅ Distribution 인증서: $DIST_CERT_INFO"
          else
            echo "❌ Distribution 인증서를 찾을 수 없음"
            echo "사용 가능한 인증서들:"
            security find-identity -v -p codesigning
            exit 1
          fi
          
          # Provisioning Profile 정보 확인
          PROFILE_COUNT=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" 2>/dev/null | wc -l)
          echo "설치된 프로비저닝 프로파일 개수: $PROFILE_COUNT개"
          
          if [ "$PROFILE_COUNT" -gt 0 ]; then
            echo "✅ 프로비저닝 프로파일 목록:"
            find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" 2>/dev/null | while read profile; do
              PROFILE_NAME=$(security cms -D -i "$profile" 2>/dev/null | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | tr -d '\n')
              echo "  - $(basename "$profile" .mobileprovision): $PROFILE_NAME"
              
              # 프로비저닝 프로파일의 Entitlements 확인
              if [[ "$PROFILE_NAME" == *"picnic"* ]]; then
                echo "    🔍 Picnic 프로파일 Entitlements 확인 중..."
                ENTITLEMENTS=$(security cms -D -i "$profile" 2>/dev/null | grep -A 20 "<key>Entitlements</key>" | grep -E "(aps-environment|com.apple.developer.associated-domains|com.apple.developer.applesignin)")
                if [ -n "$ENTITLEMENTS" ]; then
                  echo "    ✅ 필요한 Entitlements 발견:"
                  echo "$ENTITLEMENTS" | head -5
                else
                  echo "    ⚠️ 필요한 Entitlements가 누락됨 (Associated Domains, Push Notifications, Sign in with Apple)"
                fi
              fi
            done
          else
            echo "❌ 프로비저닝 프로파일을 찾을 수 없음"
            exit 1
          fi

      - name: Configure Xcode Project Signing Strategy
        script: |
          cd picnic_app/ios
          
          echo "=== Xcode 프로젝트 Automatic Signing 설정 (패치용) ==="
          
          # Automatic Signing 강제 설정 (CodeMagic App Store Connect Integration 사용)
          echo "📝 Automatic Signing 활성화..."
          sed -i '' "s/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_STYLE = \"\";/CODE_SIGN_STYLE = Automatic;/g" Runner.xcodeproj/project.pbxproj
          
          # Development Team 설정 (필수)
          sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"24SL34R9HR\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = 24SL34R9HR;/DEVELOPMENT_TEAM = \"24SL34R9HR\";/g" Runner.xcodeproj/project.pbxproj
          
          # Manual 프로비저닝 프로파일 설정 제거 (Automatic과 충돌 방지)
          echo "🧹 Manual 프로비저닝 프로파일 설정 제거..."
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"picnic_app_profile_2025\";/PROVISIONING_PROFILE_SPECIFIER = \"\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = picnic_app_profile_2025;/PROVISIONING_PROFILE_SPECIFIER = \"\";/g" Runner.xcodeproj/project.pbxproj
          
          # CODE_SIGN_IDENTITY를 비워서 Automatic이 자동으로 선택하도록 함
          echo "🔄 CODE_SIGN_IDENTITY 자동 설정으로 변경..."
          sed -i '' "s/CODE_SIGN_IDENTITY = \"Apple Distribution\";/CODE_SIGN_IDENTITY = \"\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_IDENTITY = \"Apple Development\";/CODE_SIGN_IDENTITY = \"\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/\"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]\" = \"Apple Distribution\";/\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\" = \"\";/g" Runner.xcodeproj/project.pbxproj
          
          # 추가 강력 설정 - perl을 사용한 더 정확한 치환
          echo "📝 추가 Automatic Signing 강력 설정..."
          perl -i -pe 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' Runner.xcodeproj/project.pbxproj
          perl -i -pe 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = Automatic;/g' Runner.xcodeproj/project.pbxproj
          perl -i -pe 's/PROVISIONING_PROFILE_SPECIFIER = "picnic_app_profile_2025";/PROVISIONING_PROFILE_SPECIFIER = "";/g' Runner.xcodeproj/project.pbxproj
          perl -i -pe 's/CODE_SIGN_IDENTITY = "Apple Distribution";/CODE_SIGN_IDENTITY = "";/g' Runner.xcodeproj/project.pbxproj
          
          echo "📋 설정 후 확인:"
          grep -n "CODE_SIGN_STYLE\|DEVELOPMENT_TEAM\|PROVISIONING_PROFILE_SPECIFIER" Runner.xcodeproj/project.pbxproj | head -10
          
          echo "✅ Automatic Signing 설정 완료 (패치용)"
          echo "- CODE_SIGN_STYLE: Automatic (CodeMagic Integration 사용)"
          echo "- DEVELOPMENT_TEAM: 24SL34R9HR"
          echo "- CODE_SIGN_IDENTITY: \"\" (자동 선택)"
          echo "- PROVISIONING_PROFILE_SPECIFIER: \"\" (자동 선택)"

      - name: Shorebird iOS Patch
        script: |
          cd picnic_app
          
          # 환경 파일에서 PATH 설정 로드
          if [ -f "/tmp/shorebird_env.sh" ]; then
            source /tmp/shorebird_env.sh
          fi
          
          # PATH를 명시적으로 설정
          export PATH="$HOME/.shorebird/bin:$PATH"
          
          # Shorebird CLI 존재 확인
          if [ ! -f "$HOME/.shorebird/bin/shorebird" ]; then
            echo "❌ Shorebird CLI가 설치되지 않았습니다"
            echo "설치 단계를 다시 확인해주세요"
            exit 1
          fi

          echo "=== Shorebird iOS 패치 시작 ==="
          echo "Shorebird 버전 확인:"
          "$HOME/.shorebird/bin/shorebird" --version || {
            echo "⚠️ 직접 경로로 Shorebird 실행 실패, PATH 확인 중..."
            echo "PATH: $PATH"
            echo "which shorebird: $(which shorebird || echo 'not found')"
            echo "Shorebird 파일 확인: $(ls -la $HOME/.shorebird/bin/shorebird 2>/dev/null || echo 'not found')"
            exit 1
          }

          echo "=== Shorebird 인증 확인 ==="
          if [ -z "$SHOREBIRD_TOKEN" ]; then
            echo "❌ SHOREBIRD_TOKEN 환경변수가 설정되지 않았습니다"
            exit 1
          else
            echo "✅ SHOREBIRD_TOKEN 환경변수가 설정되었습니다"
          fi

          echo "=== Shorebird CLI 상태 확인 ==="
          echo "Shorebird 버전:"
          "$HOME/.shorebird/bin/shorebird" --version 2>/dev/null || echo "Shorebird 버전 확인 실패"

          echo "=== Shorebird iOS 패치 준비 (단순화) ==="
          # Shorebird 캐시 정리만 수행
          "$HOME/.shorebird/bin/shorebird" cache clean
          flutter clean
          flutter pub get
          echo "🎯 Shorebird가 iOS 패치 빌드를 자체적으로 처리합니다"

          echo "=== Shorebird iOS 패치 생성 및 배포 ==="
          # 패치 생성 (가장 최신 릴리즈에 대한 패치)
          echo "🚀 iOS 패치 생성 시작 (자동 Flutter 버전 감지)..."
          PATCH_RESULT=$("$HOME/.shorebird/bin/shorebird" patch ios \
            --release-version=latest \
            --no-confirm \
            --dart-define=ENVIRONMENT=prod)
          PATCH_EXIT_CODE=$?
          
          echo "패치 결과 출력:"
          echo "$PATCH_RESULT"
          
          # 패치 결과 확인 및 적절한 처리
          if [ $PATCH_EXIT_CODE -eq 0 ]; then
            if echo "$PATCH_RESULT" | grep -i "successfully\|completed\|deployed\|published patch"; then
              echo "=== Shorebird iOS 패치 성공 ==="
              echo "✅ iOS 패치가 Shorebird를 통해 성공적으로 배포되었습니다"
              echo "🚀 사용자들은 앱을 재시작하면 자동으로 패치가 적용됩니다"
              
              # 패치 정보 추출 및 표시
              if echo "$PATCH_RESULT" | grep -i "published patch"; then
                echo ""
                echo "📱 패치 배포 정보:"
                echo "$PATCH_RESULT" | grep -A 5 -i "ready to publish\|published patch" | tail -6
              fi
            else
              echo "=== Shorebird iOS 패치 불완전 ==="
              echo "⚠️ 패치 명령어는 성공했지만 결과가 불분명합니다"
              echo "패치 결과를 다시 확인해주세요"
              exit 1
            fi
          else
            echo "=== Shorebird iOS 패치 실패 ==="
            echo "❌ iOS 패치 생성/배포에 실패했습니다 (종료 코드: $PATCH_EXIT_CODE)"
            
            # 실패 원인 분석
            if echo "$PATCH_RESULT" | grep -i "no.*account\|profile"; then
              echo "🔍 서명 관련 문제로 보입니다:"
              echo "- CodeMagic iOS 서명 설정을 확인하세요"
              echo "- Apple Developer 계정 연결 상태를 확인하세요"
              echo "- 프로비저닝 프로파일 유효성을 확인하세요"
            elif echo "$PATCH_RESULT" | grep -i "flutter.*build.*fail"; then
              echo "🔍 Flutter 빌드 문제로 보입니다:"
              echo "- Flutter 버전 호환성을 확인하세요"
              echo "- 의존성 패키지들을 확인하세요"
            elif echo "$PATCH_RESULT" | grep -i "no.*release"; then
              echo "🔍 기존 릴리즈가 없는 문제로 보입니다"
            fi
            
            exit 1
          fi

    artifacts:
      - picnic_app/flutter_drive.log

    publishing:
      slack:
        channel: '#codemagic-picnic'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      email:
        recipients:
          - ironlove77@gmail.com
        notify:
          success: true
          failure: true

  # =================== PICNIC APP Android Patch (Flutter Standard) ===================
  picnic-app-patch-android-standard:
    name: Picnic App - Android Patch (Flutter Standard)
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      android_signing:
        - picnic_keystore
      groups:
        - shorebird-config
        - picnic_env
      flutter: 3.32.5
      java: 17
      vars:
        PATH: $PATH:$HOME/.shorebird/bin
        APP_NAME: "picnic_app"
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - $HOME/.android/build-cache
        - picnic_app/.dart_tool
        - picnic_app/android/.gradle
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: 'picnic-patch-*'
          include: true
      cancel_previous_builds: true
    scripts:
      - name: Build Android App Bundle (Flutter Standard)
        script: |
          cd picnic_app
          
          echo "=== 표준 Flutter Android 빌드 시작 ==="
          echo "🎯 Shorebird 비활성화, 기존 Flutter 빌드 방식 사용"
          echo ""

          echo "=== Android 서명 환경 확인 ==="
          echo "✅ Android Signing 설정 완료"
          echo "✅ 키스토어 경로: $CM_KEYSTORE_PATH"
          echo "✅ 키 별칭: $CM_KEY_ALIAS"
          echo "✅ 서명 검증 완료"

          echo "=== Gradle 메모리 최적화 설정 ==="
          mkdir -p $HOME/.gradle
          echo "org.gradle.jvmargs=-Xmx6144m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.daemon=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.caching=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.parallel=false" >> $HOME/.gradle/gradle.properties
          echo "android.enableJetifier=true" >> $HOME/.gradle/gradle.properties
          echo "android.useAndroidX=true" >> $HOME/.gradle/gradle.properties
          echo "android.enableR8.fullMode=false" >> $HOME/.gradle/gradle.properties
          echo "android.useFullClasspathForDexingTransform=true" >> $HOME/.gradle/gradle.properties
          echo "android.defaults.buildfeatures.buildconfig=true" >> $HOME/.gradle/gradle.properties

          echo "=== Flutter 빌드 준비 ==="
          flutter clean
          flutter pub get

          echo "=== Flutter Android App Bundle 빌드 ==="
          echo "🚀 표준 Flutter 빌드로 AAB 생성..."
          
          flutter build appbundle \
            --release \
            --dart-define=ENVIRONMENT=prod
          
          BUILD_EXIT_CODE=$?
          
          # AAB 파일 존재 확인 (Flutter exit code보다 우선)
          echo "🔍 AAB 파일 생성 여부 확인..."
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            AAB_SIZE=$(stat -f%z "build/app/outputs/bundle/release/app-release.aab" 2>/dev/null || echo "unknown")
            echo "=== Flutter Android 빌드 성공 (AAB 파일 기준) ==="
            echo "✅ AAB 파일이 성공적으로 생성되었습니다"
            echo "📦 AAB 파일: build/app/outputs/bundle/release/app-release.aab ($AAB_SIZE bytes)"
            
            if [ $BUILD_EXIT_CODE -ne 0 ]; then
              echo "⚠️ Flutter는 debug symbol strip에서 실패했지만, AAB 파일이 정상 생성되어 성공 처리합니다"
            fi
            
            # 추가 AAB 파일 위치 확인
            echo "🔍 다른 위치의 AAB 파일들:"
            find build/ -name "*.aab" -type f | while read aab_file; do
              aab_size=$(stat -f%z "$aab_file" 2>/dev/null || echo "unknown")
              echo "  ✅ $aab_file ($aab_size bytes)"
            done
            
          elif [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "=== Flutter Android 빌드 성공 ==="
            echo "✅ Flutter 빌드가 성공적으로 완료되었습니다"
            
            # AAB 파일 찾기 시도
            echo "🔍 AAB 파일 위치 확인 중..."
            find build/ -name "*.aab" -type f | head -5
          else
            echo "=== Flutter Android 빌드 실패 ==="
            echo "❌ AAB 빌드 실패 (종료 코드: $BUILD_EXIT_CODE)"
            
            echo "🔍 마지막 빌드 로그 확인 중..."
            if [ -f "build/app/reports/lint-results.html" ]; then
              echo "📄 Lint 보고서가 생성됨"
            fi
            
            echo "💡 일반적인 해결 방법:"
            echo "1. flutter clean && flutter pub get 후 재시도"
            echo "2. Android NDK/SDK 버전 확인"
            echo "3. Gradle 캐시 정리: rm -rf ~/.gradle/caches"
            echo "4. MultiDex 설정 확인"
            
            exit 1
          fi

          echo "=== 최종 결과 ==="
          echo "✅ 표준 Flutter Android 빌드 완료!"
          echo "🎯 Shorebird 없이 안정적인 빌드 환경 사용"

    artifacts:
      - picnic_app/flutter_drive.log

    publishing:
      slack:
        channel: '#codemagic-picnic'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      email:
        recipients:
          - ironlove77@gmail.com
        notify:
          success: true
          failure: true