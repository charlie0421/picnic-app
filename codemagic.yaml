workflows:
  picnic-app-android:
    name: Picnic App - Android
    instance_type: mac_mini_m2
    max_build_duration: 120
    environment:
      android_signing:
        - picnic_keystore
      groups:
        - google_play
        - shorebird-config
        - picnic_env
      flutter: 3.32.4
      java: 17
      vars:
        PATH: $PATH:$HOME/.shorebird/bin
        APP_NAME: "picnic_app"
        # CodeMagic이 android_signing을 인식하도록 강제 설정
        FLUTTER_BUILD_MODE: "release"
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - $HOME/.android/build-cache
        - $HOME/Library/Caches/CocoaPods
        - picnic_app/.dart_tool
        - picnic_app/android/.gradle
    triggering:
      events:
        - push
        - tag
      # production 브랜치 푸시 및 태그로 트리거
      branch_patterns:
        - pattern: 'production'
          include: true
      tag_patterns:
        - pattern: 'picnic-v*'
          include: true
      cancel_previous_builds: true
    scripts:
      - name: Install Shorebird CLI
        script: |
          echo "=== Shorebird CLI 설치 시작 ==="
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          export PATH="$HOME/.shorebird/bin:$PATH"
          shorebird --version || echo "Shorebird 설치 실패"

      - name: Get Flutter packages
        script: |
          cd picnic_app
          flutter packages pub get

      - name: Verify Keystore Configuration
        script: |
          echo "=== 키스토어 환경 변수 확인 ==="
          echo "CM_KEYSTORE_PATH: ${CM_KEYSTORE_PATH:-'미설정'}"
          echo "CM_KEYSTORE_PASSWORD: ${CM_KEYSTORE_PASSWORD:-'미설정'}"
          echo "CM_KEY_ALIAS: ${CM_KEY_ALIAS:-'미설정'}"
          echo "CM_KEY_PASSWORD: ${CM_KEY_PASSWORD:-'미설정'}"
          
          if [ -z "$CM_KEYSTORE_PATH" ] || [ -z "$CM_KEYSTORE_PASSWORD" ] || [ -z "$CM_KEY_ALIAS" ] || [ -z "$CM_KEY_PASSWORD" ]; then
            echo "❌ 키스토어 환경 변수가 올바르게 설정되지 않았습니다"
            echo "CodeMagic 대시보드에서 'picnic_keystore' 그룹 설정을 확인해주세요"
            exit 1
          fi
          
          if [ -f "$CM_KEYSTORE_PATH" ]; then
            echo "✅ 키스토어 파일 존재: $CM_KEYSTORE_PATH"
            # 키스토어 정보 확인
            keytool -list -v -keystore "$CM_KEYSTORE_PATH" -alias "$CM_KEY_ALIAS" -storepass "$CM_KEYSTORE_PASSWORD" | grep -E "(SHA1|SHA256|Subject|Issuer)" || echo "키스토어 정보 확인 실패"
          else
            echo "❌ 키스토어 파일을 찾을 수 없습니다: $CM_KEYSTORE_PATH"
            exit 1
          fi

      - name: Build AAB and APK for Distribution
        script: |
          cd picnic_app
          
          echo "=== Gradle 메모리 설정 최적화 (Java Heap Space 에러 해결) ==="
          mkdir -p $HOME/.gradle
          # 메모리를 6GB로 증가하고 메모리 관련 옵션 최적화
          echo "org.gradle.jvmargs=-Xmx6144m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.daemon=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.caching=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.parallel=false" >> $HOME/.gradle/gradle.properties
          echo "android.enableJetifier=true" >> $HOME/.gradle/gradle.properties
          echo "android.useAndroidX=true" >> $HOME/.gradle/gradle.properties
          
          # Shorebird PATH 설정
          export PATH="$HOME/.shorebird/bin:$PATH"
          
          # 깨끗한 빌드 환경
          flutter clean
          flutter pub get

          echo "=== 빌드 경로 미리 설정 ==="
          # Flutter가 예상하는 경로에 디렉토리 미리 생성
          mkdir -p build/app/outputs/bundle/release/
          mkdir -p build/app/outputs/apk/release/
          mkdir -p build/app/outputs/flutter-apk/

          echo "=== 서명 설정 확인 ==="
          echo "키스토어 경로: $CM_KEYSTORE_PATH"
          echo "키 별칭: $CM_KEY_ALIAS"

          echo "=== AAB 빌드 시작 (서명 적용) ==="
          flutter build appbundle \
            --release \
            --dart-define=ENVIRONMENT=prod

          echo "=== APK 빌드 시작 (서명 적용) ==="
          flutter build apk \
            --release \
            --dart-define=ENVIRONMENT=prod

          echo "=== 빌드 결과 확인 및 경로 동기화 ==="
          # 실제 생성된 파일을 Flutter가 찾는 경로로 복사
          if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            # AAB 서명 검증
            if jarsigner -verify "android/app/build/outputs/bundle/release/app-release.aab" > /dev/null 2>&1; then
              cp android/app/build/outputs/bundle/release/app-release.aab build/app/outputs/bundle/release/
              AAB_SIZE=$(du -h android/app/build/outputs/bundle/release/app-release.aab | cut -f1)
              echo "✅ 서명된 AAB 파일을 올바른 경로로 복사됨 (크기: $AAB_SIZE)"
              
              # 서명 정보 출력
              echo "📋 AAB 서명 정보:"
              jarsigner -verify -verbose -certs "android/app/build/outputs/bundle/release/app-release.aab" | grep -E "(Certificate|Subject|Issuer)" | head -5
            else
              echo "❌ AAB 파일이 서명되지 않았습니다!"
              exit 1
            fi
          else
            echo "❌ AAB 파일을 찾을 수 없습니다"
            echo "=== 빌드 디렉토리 구조 확인 ==="
            find . -name "*.aab" 2>/dev/null | head -5
            find build/ -type f -name "*" 2>/dev/null | grep -E "\.(aab|apk)$" | head -5
            find android/ -type f -name "*" 2>/dev/null | grep -E "\.(aab|apk)$" | head -5
            exit 1
          fi
          
          # 2. APK 빌드
          echo "=== 2️⃣ APK 빌드 시작 ==="
          flutter build apk --release --dart-define=ENVIRONMENT=prod --build-number=$BUILD_NUMBER
          
          # APK 빌드 결과 확인
          echo "=== APK 빌드 결과 확인 ==="
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            APK_SIZE=$(du -h "build/app/outputs/flutter-apk/app-release.apk" | cut -f1)
            echo "✅ APK 빌드 성공: build/app/outputs/flutter-apk/app-release.apk (크기: $APK_SIZE)"
          elif [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            # 경로 수정
            mkdir -p build/app/outputs/flutter-apk/
            mkdir -p build/app/outputs/apk/release/
            cp android/app/build/outputs/apk/release/app-release.apk build/app/outputs/flutter-apk/
            cp android/app/build/outputs/apk/release/app-release.apk build/app/outputs/apk/release/
            APK_SIZE=$(du -h "build/app/outputs/flutter-apk/app-release.apk" | cut -f1)
            echo "✅ APK 빌드 성공 (경로 수정): build/app/outputs/flutter-apk/app-release.apk (크기: $APK_SIZE)"
          else
            echo "❌ APK 파일을 찾을 수 없습니다"
            find . -name "*.apk" 2>/dev/null | head -5
            exit 1
          fi
          
          # 3. Shorebird 빌드
          echo "=== 3️⃣ Shorebird 빌드 시작 ==="
          if [ -z "$SHOREBIRD_TOKEN" ]; then
            echo "❌ SHOREBIRD_TOKEN 환경변수가 설정되지 않았습니다"
            exit 1
          fi

          echo "=== Shorebird 빌드 시작 ==="
          shorebird release android --flutter-version 3.32.0 --dart-define=ENVIRONMENT=prod

          echo "=== 빌드 결과 확인 및 경로 설정 ==="
          # 모든 빌드 결과 파일 찾기
          echo "📁 생성된 모든 AAB 파일:"
          find . -name "*.aab" -type f 2>/dev/null || echo "AAB 파일 없음"
          
          echo "📁 생성된 모든 APK 파일:"
          find . -name "*.apk" -type f 2>/dev/null || echo "APK 파일 없음"

          # artifacts가 찾을 수 있도록 디렉토리 생성 및 파일 복사
          mkdir -p build/app/outputs/bundle/release/
          mkdir -p build/app/outputs/apk/release/
          mkdir -p build/app/outputs/flutter-apk/

          # AAB 파일 복사 (서명된 파일만)
          AAB_FILES=$(find . -name "*.aab" -type f 2>/dev/null)
          if [ -n "$AAB_FILES" ]; then
            for aab in $AAB_FILES; do
              echo "🔍 AAB 파일 검사: $aab"
              # AAB 파일 서명 상태 확인
              if jarsigner -verify "$aab" > /dev/null 2>&1; then
                # 파일명을 app-release.aab로 통일하여 복사
                cp "$aab" build/app/outputs/bundle/release/app-release.aab
                echo "✅ 서명된 AAB 복사됨: $aab → build/app/outputs/bundle/release/app-release.aab"
                
                # 서명 정보 출력
                echo "📋 AAB 서명 정보:"
                jarsigner -verify -verbose -certs "$aab" | grep -E "(Certificate|Subject|Issuer)" | head -3
              else
                echo "⚠️ 서명되지 않은 AAB 파일 건너뜀: $aab (Google Play 업로드 불가)"
              fi
            done
          else
            echo "❌ AAB 파일을 찾을 수 없습니다"
          fi

          # APK 파일 복사 (서명된 파일만)
          APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
          if [ -n "$APK_FILES" ]; then
            for apk in $APK_FILES; do
              echo "🔍 APK 파일 검사: $apk"
              if jarsigner -verify "$apk" > /dev/null 2>&1; then
                cp "$apk" build/app/outputs/apk/release/app-release.apk
                cp "$apk" build/app/outputs/flutter-apk/app-release.apk
                echo "✅ 서명된 APK 복사됨: $apk → app-release.apk"
              else
                echo "⚠️ 서명되지 않은 APK 파일 건너뜀: $apk"
              fi
            done
          else
            echo "❌ APK 파일을 찾을 수 없습니다"
          fi

          echo "=== Artifact 정리 완료 ==="

    artifacts:
      - picnic_app/build/app/outputs/bundle/release/app-release.aab
      - picnic_app/build/app/outputs/apk/release/app-release.apk
      - picnic_app/build/app/outputs/flutter-apk/app-release.apk
      - picnic_app/build/**/outputs/**/mapping.txt
      - picnic_app/flutter_drive.log

    publishing:
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: true
      slack:
        channel: '#codemagic-picnic'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      email:
        recipients:
          - ironlove77@gmail.com
        notify:
          success: true
          failure: true

  # =================== PICNIC APP iOS ===================
  picnic-app-ios:
    name: Picnic App - iOS
    instance_type: mac_mini_m2
    max_build_duration: 120
    integrations:
      app_store_connect: codemagic-picnic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: io.iconcasting.picnic.app
      groups:
        - app_store_connect
        - shorebird-config
        - picnic_env
      flutter: 3.32.4
      vars:
        APP_NAME: "picnic_app"
        BUNDLE_ID: "io.iconcasting.picnic.app"
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: 'production'
          include: true
      tag_patterns:
        - pattern: 'picnic-v*'
          include: true
      cancel_previous_builds: true
    scripts:
      - name: Get Flutter packages and prepare iOS
        script: |
          cd picnic_app
          echo "=== Flutter 패키지 설치 ==="
          flutter packages pub get
          
          echo "=== Flutter iOS 설정 생성 (Generated.xcconfig 파일 생성) ==="
          flutter precache --ios
          flutter build ios --config-only
          
          echo "=== Generated.xcconfig 파일 확인 ==="
          ls -la ios/Flutter/Generated.xcconfig || echo "⚠️ Generated.xcconfig 파일이 아직 생성되지 않음"

      - name: Install CocoaPods dependencies
        script: |
          cd picnic_app
          
          echo "=== Generated.xcconfig 파일 확인 ==="
          if [ ! -f "ios/Flutter/Generated.xcconfig" ]; then
            echo "⚠️ Generated.xcconfig 파일이 없음 - Flutter 설정 재생성"
            flutter build ios --config-only
          fi
          
          echo "✅ Generated.xcconfig 파일 존재 확인:"
          ls -la ios/Flutter/Generated.xcconfig
          
          echo "=== CocoaPods 설치 시작 ==="
          cd ios
          pod install

      - name: Install Shorebird CLI
        script: |
          echo "=== Shorebird CLI 설치 시작 ==="
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          export PATH="$HOME/.shorebird/bin:$PATH"
          shorebird --version || echo "Shorebird 설치 실패"

      - name: Build iOS IPA (CodeMagic Automatic Signing)
        script: |
          cd picnic_app
          
          echo "=== CodeMagic Automatic Signing IPA 빌드 ==="
          echo "✅ CodeMagic 자동 서명 환경 최적화"
          echo "✅ Bundle ID: io.iconcasting.picnic.app"
          echo "✅ Distribution Type: App Store"
          echo ""
          
          # CodeMagic 서명 환경 확인
          echo "=== CodeMagic 서명 환경 확인 ==="
          echo "DEVELOPMENT_TEAM: ${DEVELOPMENT_TEAM:-'24SL34R9HR'}"
          
          # Distribution Certificate 정보 확인
          DIST_CERT_INFO=$(security find-identity -v -p codesigning | grep -i distribution | head -1)
          if [ -n "$DIST_CERT_INFO" ]; then
            echo "Distribution 인증서: $DIST_CERT_INFO"
          else
            echo "⚠️ Distribution 인증서를 찾을 수 없음"
          fi
          
          # Provisioning Profile 정보 확인
          PROFILE_COUNT=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" 2>/dev/null | wc -l)
          echo "설치된 프로비저닝 프로파일 개수: $PROFILE_COUNT개"
          
          if [ "$PROFILE_COUNT" -gt 0 ]; then
            echo "프로비저닝 프로파일 목록:"
            find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" 2>/dev/null | while read profile; do
              PROFILE_NAME=$(security cms -D -i "$profile" 2>/dev/null | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | tr -d '\n')
              echo "  - $(basename "$profile" .mobileprovision): $PROFILE_NAME"
            done
          fi
          echo ""
          
          # Xcode 프로젝트가 Automatic Signing을 사용하도록 확인
          echo "=== Xcode 프로젝트 Automatic Signing 설정 확인 ==="
          cd ios
          
          # Automatic Signing 강제 설정 (CodeMagic 환경에 최적화)
          echo "📝 Automatic Signing 강제 활성화..."
          sed -i '' "s/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_IDENTITY = \"Apple Distribution\";/CODE_SIGN_IDENTITY = \"\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/\"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]\" = \"Apple Distribution\";/\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\" = \"iPhone Developer\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "/PROVISIONING_PROFILE_SPECIFIER = /d" Runner.xcodeproj/project.pbxproj
          
          # Development Team 설정은 유지
          sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"24SL34R9HR\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = 24SL34R9HR;/DEVELOPMENT_TEAM = \"24SL34R9HR\";/g" Runner.xcodeproj/project.pbxproj
          
          echo "✅ Automatic Signing 설정 완료"
          echo "- CODE_SIGN_STYLE: Automatic"
          echo "- DEVELOPMENT_TEAM: 24SL34R9HR"
          echo "- CODE_SIGN_IDENTITY: (자동)"
          echo "- PROVISIONING_PROFILE: (자동)"
          
          cd ..
          echo ""
          
          # Flutter IPA 빌드 (Automatic Signing)
          echo "=== Flutter IPA 빌드 시작 ==="
          echo "CodeMagic Automatic Signing으로 빌드합니다."
          
          echo "🚀 Automatic Signing IPA 빌드"
          flutter build ipa \
            --release \
            --dart-define=ENVIRONMENT=prod \
            --export-method=app-store
          
          BUILD_RESULT=$?
          
          # 빌드 결과 확인
          echo ""
          echo "=== 빌드 결과 확인 ==="
          
          if [ $BUILD_RESULT -eq 0 ]; then
            echo "🎉 Flutter IPA 빌드 명령어 성공!"
            
            # IPA 파일 생성 여부 확인
            if [ -f "build/ios/ipa/picnic_app.ipa" ]; then
              IPA_SIZE=$(du -h "build/ios/ipa/picnic_app.ipa" | cut -f1)
              echo "✅ IPA 파일 생성 완료: build/ios/ipa/picnic_app.ipa (크기: $IPA_SIZE)"
            elif [ -f "build/ios/ipa/Runner.ipa" ]; then
              IPA_SIZE=$(du -h "build/ios/ipa/Runner.ipa" | cut -f1)
              echo "✅ IPA 파일 생성 완료: build/ios/ipa/Runner.ipa (크기: $IPA_SIZE)"
              
              # picnic_app.ipa로 복사
              cp "build/ios/ipa/Runner.ipa" "build/ios/ipa/picnic_app.ipa"
              echo "✅ picnic_app.ipa로 복사 완료"
            else
              echo "⚠️ 빌드 명령어는 성공했지만 IPA 파일을 찾을 수 없음"
              echo "📁 생성된 파일들:"
              find build/ios -name "*.ipa" -o -name "*.xcarchive" 2>/dev/null | head -5
              
              # Archive가 있는 경우 Manual Signing용 수동 export 시도
              XCARCHIVE_PATH=$(find build/ios -name "*.xcarchive" | head -1)
              if [ -n "$XCARCHIVE_PATH" ]; then
                echo ""
                echo "📦 Archive가 발견되어 수동 IPA export를 시도합니다..."
                echo "Archive 경로: $XCARCHIVE_PATH"
                
                # 설치된 프로비저닝 프로파일 정보 가져오기
                PROFILE_PATH=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" | head -1)
                PROFILE_UUID=$(basename "$PROFILE_PATH" .mobileprovision)
                
                # 프로비저닝 프로파일에서 실제 이름 추출
                PROFILE_NAME=$(security cms -D -i "$PROFILE_PATH" 2>/dev/null | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | tr -d '\n\t ')
                
                echo "프로비저닝 프로파일 경로: $PROFILE_PATH"
                echo "프로비저닝 프로파일 UUID: $PROFILE_UUID"
                echo "프로비저닝 프로파일 실제 이름: $PROFILE_NAME"
                
                # 실제 이름이 있으면 사용, 없으면 UUID 사용
                if [ -n "$PROFILE_NAME" ] && [ "$PROFILE_NAME" != "" ]; then
                  PROFILE_IDENTIFIER="$PROFILE_NAME"
                  echo "사용할 식별자: 실제 이름 ($PROFILE_NAME)"
                else
                  PROFILE_IDENTIFIER="$PROFILE_UUID"
                  echo "사용할 식별자: UUID ($PROFILE_UUID)"
                fi
                
                # Manual Signing용 ExportOptions.plist 생성
                echo "📝 Manual Signing용 ExportOptions.plist 생성..."
                echo '<?xml version="1.0" encoding="UTF-8"?>' > ios/ExportOptions.plist
                echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ios/ExportOptions.plist
                echo '<plist version="1.0">' >> ios/ExportOptions.plist
                echo '<dict>' >> ios/ExportOptions.plist
                echo '    <key>method</key>' >> ios/ExportOptions.plist
                echo '    <string>app-store-connect</string>' >> ios/ExportOptions.plist
                echo '    <key>teamID</key>' >> ios/ExportOptions.plist
                echo '    <string>24SL34R9HR</string>' >> ios/ExportOptions.plist
                echo '    <key>signingStyle</key>' >> ios/ExportOptions.plist
                echo '    <string>manual</string>' >> ios/ExportOptions.plist
                echo '    <key>signingCertificate</key>' >> ios/ExportOptions.plist
                echo '    <string>Apple Distribution</string>' >> ios/ExportOptions.plist
                echo '    <key>provisioningProfiles</key>' >> ios/ExportOptions.plist
                echo '    <dict>' >> ios/ExportOptions.plist
                echo '        <key>io.iconcasting.picnic.app</key>' >> ios/ExportOptions.plist
                echo "        <string>$PROFILE_IDENTIFIER</string>" >> ios/ExportOptions.plist
                echo '    </dict>' >> ios/ExportOptions.plist
                echo '    <key>stripSwiftSymbols</key>' >> ios/ExportOptions.plist
                echo '    <true/>' >> ios/ExportOptions.plist
                echo '    <key>uploadBitcode</key>' >> ios/ExportOptions.plist
                echo '    <false/>' >> ios/ExportOptions.plist
                echo '    <key>uploadSymbols</key>' >> ios/ExportOptions.plist
                echo '    <true/>' >> ios/ExportOptions.plist
                echo '</dict>' >> ios/ExportOptions.plist
                echo '</plist>' >> ios/ExportOptions.plist
                
                echo "🚀 Manual Signing으로 IPA export 시도..."
                cd ios
                xcodebuild -exportArchive \
                  -archivePath "../$XCARCHIVE_PATH" \
                  -exportPath "../build/ios/ipa/" \
                  -exportOptionsPlist "ExportOptions.plist"
                
                EXPORT_RESULT=$?
                cd ..
                
                if [ $EXPORT_RESULT -eq 0 ]; then
                  echo "✅ 수동 IPA export 성공!"
                  
                  # IPA 파일 확인 및 이름 정규화
                  if [ -f "build/ios/ipa/picnic_app.ipa" ]; then
                    IPA_SIZE=$(du -h "build/ios/ipa/picnic_app.ipa" | cut -f1)
                    echo "✅ 최종 IPA 파일: build/ios/ipa/picnic_app.ipa (크기: $IPA_SIZE)"
                  elif [ -f "build/ios/ipa/Runner.ipa" ]; then
                    IPA_SIZE=$(du -h "build/ios/ipa/Runner.ipa" | cut -f1)
                    echo "✅ 최종 IPA 파일: build/ios/ipa/Runner.ipa (크기: $IPA_SIZE)"
                    cp "build/ios/ipa/Runner.ipa" "build/ios/ipa/picnic_app.ipa"
                    echo "✅ picnic_app.ipa로 복사 완료"
                  else
                    echo "⚠️ Export는 성공했지만 IPA 파일을 찾을 수 없음"
                    ls -la build/ios/ipa/ 2>/dev/null || echo "IPA 디렉토리 없음"
                  fi
                else
                  echo "❌ 수동 IPA export 실패 (종료 코드: $EXPORT_RESULT)"
                fi
              fi
            fi
            
            echo ""
            echo "🎉 CodeMagic Automatic Signing IPA 빌드 완료!"
          else
            echo "❌ Flutter IPA 빌드 실패 (종료 코드: $BUILD_RESULT)"
            echo ""
            echo "=== 디버깅 정보 ==="
            echo "Flutter 버전:"
            flutter --version | head -3
            echo ""
            echo "Xcode 프로젝트 서명 설정 확인:"
            grep -A 5 -B 5 "CODE_SIGN_STYLE\|DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj | head -10
            echo ""
            echo "설치된 인증서:"
            security find-identity -v -p codesigning | head -3
            echo ""
            echo "프로비저닝 프로파일:"
            ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" 2>/dev/null | head -3 || echo "프로비저닝 프로파일 디렉토리 없음"
            
            exit 1
          fi

      - name: Shorebird iOS Release
        script: |
          export PATH="$HOME/.shorebird/bin:$PATH"
          cd picnic_app

          echo "=== Shorebird iOS 릴리즈 시작 ==="
          echo "Shorebird 버전 확인:"
          shorebird --version

          echo "=== Shorebird 인증 확인 ==="
          if [ -z "$SHOREBIRD_TOKEN" ]; then
            echo "❌ SHOREBIRD_TOKEN 환경변수가 설정되지 않았습니다"
            exit 1
          else
            echo "✅ SHOREBIRD_TOKEN 환경변수가 설정되었습니다"
          fi

          echo "=== Shorebird iOS 릴리즈 실행 ==="
          shorebird release ios \
            --flutter-version 3.32.0 \
            --dart-define=ENVIRONMENT=prod

          echo "=== Shorebird iOS 릴리즈 완료 ==="
          echo "✅ iOS 앱이 Shorebird에 성공적으로 릴리즈되었습니다"

    artifacts:
      - picnic_app/build/ios/ipa/*.ipa
      - picnic_app/build/ios/Runner.xcarchive
      - picnic_app/flutter_drive.log

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
      slack:
        channel: '#codemagic-picnic'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      email:
        recipients:
          - ironlove77@gmail.com
        notify:
          success: true
          failure: true

  # =================== TTJA APP Android (비활성화) ===================
  # ttja-app-android:
  #   name: TTJA App - Android
  #   instance_type: mac_mini_m2
  #   max_build_duration: 120
  #   environment:
  #     android_signing:
  #       - ttja_keystore
  #     groups:
  #       - google_play
  #       - ttja_env
  #     flutter: 3.32.0
  #     java: 17
  #     vars:
  #       APP_NAME: "ttja_app"
  #   cache:
  #     cache_paths:
  #       - $FLUTTER_ROOT/.pub-cache
  #       - $HOME/.gradle/caches
  #       - $HOME/Library/Caches/CocoaPods
  #   triggering:
  #     events:
  #       - push
  #     # TTJA는 태그로만 트리거 (브랜치 트리거 제거)
  #     tag_patterns:
  #       - pattern: 'ttja-v*'
  #         include: true
  #     cancel_previous_builds: true
  #   scripts:
  #     - name: Set up debug keystore
  #       script: |
  #         set -e
  #         set -x
  #         keystore_path="/tmp/keystore.keystore"
  #         if [ -f "$keystore_path" ]; then
  #           echo "Keystore already exists"
  #         else
  #           keytool -genkey -v -keystore "$keystore_path" -alias androiddebugkey -storepass android -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
  #         fi

  #     - name: Get Flutter packages
  #       script: |
  #         cd ttja_app
  #         flutter packages pub get

  #     - name: Build AAB and APK for Distribution
  #       script: |
  #         cd ttja_app
  #         flutter clean
  #         flutter pub get

  #         echo "=== AAB 빌드 시작 ==="
  #         flutter build appbundle --release --dart-define=ENVIRONMENT=prod

  #         echo "=== APK 빌드 시작 ==="
  #         flutter build apk --release --dart-define=ENVIRONMENT=prod

  #         echo "=== 빌드 경로 설정 ==="
  #         # Flutter가 예상하는 경로에 디렉토리 생성
  #         mkdir -p build/app/outputs/bundle/release/
  #         mkdir -p build/app/outputs/apk/release/
  #         mkdir -p build/app/outputs/flutter-apk/

  #         # 실제 생성된 파일을 Flutter가 찾는 경로로 복사
  #         if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
  #           cp android/app/build/outputs/bundle/release/app-release.aab build/app/outputs/bundle/release/
  #           echo "✅ AAB 파일을 올바른 경로로 복사됨"
  #         fi

  #         if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
  #           cp android/app/build/outputs/apk/release/app-release.apk build/app/outputs/apk/release/
  #           cp android/app/build/outputs/apk/release/app-release.apk build/app/outputs/flutter-apk/
  #           echo "✅ APK 파일을 올바른 경로로 복사됨"
  #         fi

  #         echo "=== 빌드 결과 확인 ==="
  #         find build/app/outputs/ -name "*.aab" -o -name "*.apk" | head -10
  #         find android/app/build/outputs/ -name "*.aab" -o -name "*.apk" | head -10

  #   artifacts:
  #     - ttja_app/build/**/outputs/**/*.aab
  #     - ttja_app/build/**/outputs/**/*.apk
  #     - ttja_app/build/**/outputs/**/mapping.txt
  #     - ttja_app/flutter_drive.log

  #   publishing:
  #     google_play:
  #       credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
  #       track: internal
  #       submit_as_draft: true
  #     slack:
  #       channel: '#codemagic-ttja'
  #       notify_on_build_start: true
  #       notify:
  #         success: true
  #         failure: true
  #     email:
  #       recipients:
  #         - ironlove77@gmail.com
  #       notify:
  #         success: true
  #         failure: true

  # =================== TTJA APP iOS (비활성화) ===================
  # ttja-app-ios:
  #   name: TTJA App - iOS
  #   instance_type: mac_mini_m2
  #   max_build_duration: 120
  #   integrations:
  #     app_store_connect: codemagic-picnic
  #   environment:
  #     ios_signing:
  #       distribution_type: app_store
  #       bundle_identifier: com.fasoo.TTJA
  #       # CodeMagic이 자동으로 프로비저닝 프로파일을 생성하도록 설정
  #     groups:
  #       - app_store_connect
  #       - ttja_env
  #     flutter: 3.32.0
  #     vars:
  #       APP_NAME: "ttja_app"
  #       BUNDLE_ID: "com.fasoo.TTJA"
  #   cache:
  #     cache_paths:
  #       - $FLUTTER_ROOT/.pub-cache
  #       - $HOME/.gradle/caches
  #       - $HOME/Library/Caches/CocoaPods
  #   triggering:
  #     events:
  #       - push
  #     # TTJA는 태그로만 트리거 (브랜치 트리거 제거)
  #     tag_patterns:
  #       - pattern: 'ttja-v*'
  #         include: true
  #     cancel_previous_builds: true
  #   scripts:
  #     - name: Get Flutter packages
  #       script: |
  #         cd ttja_app
  #         flutter packages pub get

  #     - name: Install CocoaPods dependencies
  #       script: |
  #         cd ttja_app/ios
  #         pod install

  #     - name: Build iOS Archive
  #       script: |
  #         cd ttja_app
  #         flutter clean
  #         flutter pub get

  #         echo "=== iOS Archive 빌드 시작 ==="
  #         flutter build ipa --release --dart-define=ENVIRONMENT=prod

  #         echo "=== iOS 빌드 경로 설정 ==="
  #         # Flutter가 예상하는 경로에 디렉토리 생성
  #         mkdir -p build/ios/archive/Runner/
  #         mkdir -p build/ios/ipa/

  #         # 실제 생성된 IPA 파일을 Flutter가 찾는 경로로 복사
  #         if [ -f "build/ios/ipa/ttja_app.ipa" ]; then
  #           echo "✅ IPA 파일이 이미 올바른 경로에 있습니다"
  #         else
  #           # IPA 파일 찾기 및 복사
  #           IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
  #           if [ -n "$IPA_FILE" ]; then
  #             cp "$IPA_FILE" build/ios/ipa/ttja_app.ipa
  #             echo "✅ IPA 파일을 올바른 경로로 복사됨: $IPA_FILE"
  #           fi
  #         fi

  #         echo "=== 빌드 결과 확인 ==="
  #         find build/ios/ -name "*.ipa" | head -10
  #         find . -name "*.ipa" 2>/dev/null | head -10

  #   artifacts:
  #     - ttja_app/build/ios/ipa/*.ipa
  #     - ttja_app/build/ios/archive/Runner.xcarchive
  #     - ttja_app/flutter_drive.log

  #   publishing:
  #     app_store_connect:
  #       auth: integration
  #       submit_to_testflight: true
  #       beta_groups:
  #         - App Store Connect Users
  #     slack:
  #       channel: '#codemagic-ttja'
  #       notify_on_build_start: true
  #       notify:
  #         success: true
  #         failure: true
  #     email:
  #       recipients:
  #         - ironlove77@gmail.com
  #       notify:
  #         success: true
  #         failure: true